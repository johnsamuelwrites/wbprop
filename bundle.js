(()=>{"use strict";var __webpack_modules__={56:(module,__unused_webpack_exports,__webpack_require__)=>{eval('{\n\n/* istanbul ignore next  */\nfunction setAttributesWithoutAttributes(styleElement) {\n  var nonce =  true ? __webpack_require__.nc : 0;\n  if (nonce) {\n    styleElement.setAttribute("nonce", nonce);\n  }\n}\nmodule.exports = setAttributesWithoutAttributes;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTYuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBLGNBQWMsS0FBd0MsR0FBRyxzQkFBaUIsR0FBRyxDQUFJO0FBQ2pGO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93YnByb3AvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanM/ZGRjZSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMoc3R5bGVFbGVtZW50KSB7XG4gIHZhciBub25jZSA9IHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyAhPT0gXCJ1bmRlZmluZWRcIiA/IF9fd2VicGFja19ub25jZV9fIDogbnVsbDtcbiAgaWYgKG5vbmNlKSB7XG4gICAgc3R5bGVFbGVtZW50LnNldEF0dHJpYnV0ZShcIm5vbmNlXCIsIG5vbmNlKTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXM7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///56\n\n}')},57:()=>{eval('{\n;// ./node_modules/tslib/tslib.es6.js\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nfunction __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nvar __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nfunction __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === "function")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nfunction __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nfunction __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nfunction __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nfunction __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nfunction __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError("Generator is already executing.");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nfunction __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nfunction __exportStar(m, exports) {\r\n    for (var p in m) if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nfunction __values(o) {\r\n    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === "number") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");\r\n}\r\n\r\nfunction __read(o, n) {\r\n    var m = typeof Symbol === "function" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i["return"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nfunction __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nfunction __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nfunction __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nfunction __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume("next", value); }\r\n    function reject(value) { resume("throw", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nfunction __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nfunction __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nfunction __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nfunction __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nfunction __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nfunction __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError("attempted to get private field on non-instance");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nfunction __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError("attempted to set private field on non-instance");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n\n;// ./node_modules/@material/base/foundation.js\n/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the "Software"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nvar MDCFoundation = /** @class */ (function () {\n    function MDCFoundation(adapter) {\n        if (adapter === void 0) { adapter = {}; }\n        this.adapter_ = adapter;\n    }\n    Object.defineProperty(MDCFoundation, "cssClasses", {\n        get: function () {\n            // Classes extending MDCFoundation should implement this method to return an object which exports every\n            // CSS class the foundation class needs as a property. e.g. {ACTIVE: \'mdc-component--active\'}\n            return {};\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MDCFoundation, "strings", {\n        get: function () {\n            // Classes extending MDCFoundation should implement this method to return an object which exports all\n            // semantic strings as constants. e.g. {ARIA_ROLE: \'tablist\'}\n            return {};\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MDCFoundation, "numbers", {\n        get: function () {\n            // Classes extending MDCFoundation should implement this method to return an object which exports all\n            // of its semantic numbers as constants. e.g. {ANIMATION_DELAY_MS: 350}\n            return {};\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MDCFoundation, "defaultAdapter", {\n        get: function () {\n            // Classes extending MDCFoundation may choose to implement this getter in order to provide a convenient\n            // way of viewing the necessary methods of an adapter. In the future, this could also be used for adapter\n            // validation.\n            return {};\n        },\n        enumerable: true,\n        configurable: true\n    });\n    MDCFoundation.prototype.init = function () {\n        // Subclasses should override this method to perform initialization routines (registering events, etc.)\n    };\n    MDCFoundation.prototype.destroy = function () {\n        // Subclasses should override this method to perform de-initialization routines (de-registering events, etc.)\n    };\n    return MDCFoundation;\n}());\n\n// tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.\n/* harmony default export */ const foundation = ((/* unused pure expression or super */ null && (MDCFoundation)));\n//# sourceMappingURL=foundation.js.map\n;// ./node_modules/@material/base/component.js\n/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the "Software"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n\nvar MDCComponent = /** @class */ (function () {\n    function MDCComponent(root, foundation) {\n        var args = [];\n        for (var _i = 2; _i < arguments.length; _i++) {\n            args[_i - 2] = arguments[_i];\n        }\n        this.root_ = root;\n        this.initialize.apply(this, __spread(args));\n        // Note that we initialize foundation here and not within the constructor\'s default param so that\n        // this.root_ is defined and can be used within the foundation class.\n        this.foundation_ = foundation === undefined ? this.getDefaultFoundation() : foundation;\n        this.foundation_.init();\n        this.initialSyncWithDOM();\n    }\n    MDCComponent.attachTo = function (root) {\n        // Subclasses which extend MDCBase should provide an attachTo() method that takes a root element and\n        // returns an instantiated component with its root set to that element. Also note that in the cases of\n        // subclasses, an explicit foundation class will not have to be passed in; it will simply be initialized\n        // from getDefaultFoundation().\n        return new MDCComponent(root, new MDCFoundation({}));\n    };\n    /* istanbul ignore next: method param only exists for typing purposes; it does not need to be unit tested */\n    MDCComponent.prototype.initialize = function () {\n        var _args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            _args[_i] = arguments[_i];\n        }\n        // Subclasses can override this to do any additional setup work that would be considered part of a\n        // "constructor". Essentially, it is a hook into the parent constructor before the foundation is\n        // initialized. Any additional arguments besides root and foundation will be passed in here.\n    };\n    MDCComponent.prototype.getDefaultFoundation = function () {\n        // Subclasses must override this method to return a properly configured foundation class for the\n        // component.\n        throw new Error(\'Subclasses must override getDefaultFoundation to return a properly configured \' +\n            \'foundation class\');\n    };\n    MDCComponent.prototype.initialSyncWithDOM = function () {\n        // Subclasses should override this method if they need to perform work to synchronize with a host DOM\n        // object. An example of this would be a form control wrapper that needs to synchronize its internal state\n        // to some property or attribute of the host DOM. Please note: this is *not* the place to perform DOM\n        // reads/writes that would cause layout / paint, as this is called synchronously from within the constructor.\n    };\n    MDCComponent.prototype.destroy = function () {\n        // Subclasses may implement this method to release any resources / deregister any listeners they have\n        // attached. An example of this might be deregistering a resize event from the window object.\n        this.foundation_.destroy();\n    };\n    MDCComponent.prototype.listen = function (evtType, handler, options) {\n        this.root_.addEventListener(evtType, handler, options);\n    };\n    MDCComponent.prototype.unlisten = function (evtType, handler, options) {\n        this.root_.removeEventListener(evtType, handler, options);\n    };\n    /**\n     * Fires a cross-browser-compatible custom event from the component root of the given type, with the given data.\n     */\n    MDCComponent.prototype.emit = function (evtType, evtData, shouldBubble) {\n        if (shouldBubble === void 0) { shouldBubble = false; }\n        var evt;\n        if (typeof CustomEvent === \'function\') {\n            evt = new CustomEvent(evtType, {\n                bubbles: shouldBubble,\n                detail: evtData,\n            });\n        }\n        else {\n            evt = document.createEvent(\'CustomEvent\');\n            evt.initCustomEvent(evtType, shouldBubble, false, evtData);\n        }\n        this.root_.dispatchEvent(evt);\n    };\n    return MDCComponent;\n}());\n\n// tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.\n/* harmony default export */ const component = ((/* unused pure expression or super */ null && (MDCComponent)));\n//# sourceMappingURL=component.js.map\n;// ./node_modules/@material/dom/events.js\n/**\n * @license\n * Copyright 2019 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the "Software"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n/**\n * Determine whether the current browser supports passive event listeners, and\n * if so, use them.\n */\nfunction applyPassive(globalObj) {\n    if (globalObj === void 0) { globalObj = window; }\n    return supportsPassiveOption(globalObj) ?\n        { passive: true } :\n        false;\n}\nfunction supportsPassiveOption(globalObj) {\n    if (globalObj === void 0) { globalObj = window; }\n    // See\n    // https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener\n    var passiveSupported = false;\n    try {\n        var options = {\n            // This function will be called when the browser\n            // attempts to access the passive property.\n            get passive() {\n                passiveSupported = true;\n                return false;\n            }\n        };\n        var handler = function () { };\n        globalObj.document.addEventListener(\'test\', handler, options);\n        globalObj.document.removeEventListener(\'test\', handler, options);\n    }\n    catch (err) {\n        passiveSupported = false;\n    }\n    return passiveSupported;\n}\n//# sourceMappingURL=events.js.map\n;// ./node_modules/@material/dom/ponyfill.js\n/**\n * @license\n * Copyright 2018 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the "Software"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n/**\n * @fileoverview A "ponyfill" is a polyfill that doesn\'t modify the global prototype chain.\n * This makes ponyfills safer than traditional polyfills, especially for libraries like MDC.\n */\nfunction closest(element, selector) {\n    if (element.closest) {\n        return element.closest(selector);\n    }\n    var el = element;\n    while (el) {\n        if (matches(el, selector)) {\n            return el;\n        }\n        el = el.parentElement;\n    }\n    return null;\n}\nfunction matches(element, selector) {\n    var nativeMatches = element.matches\n        || element.webkitMatchesSelector\n        || element.msMatchesSelector;\n    return nativeMatches.call(element, selector);\n}\n/**\n * Used to compute the estimated scroll width of elements. When an element is\n * hidden due to display: none; being applied to a parent element, the width is\n * returned as 0. However, the element will have a true width once no longer\n * inside a display: none context. This method computes an estimated width when\n * the element is hidden or returns the true width when the element is visble.\n * @param {Element} element the element whose width to estimate\n */\nfunction estimateScrollWidth(element) {\n    // Check the offsetParent. If the element inherits display: none from any\n    // parent, the offsetParent property will be null (see\n    // https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/offsetParent).\n    // This check ensures we only clone the node when necessary.\n    var htmlEl = element;\n    if (htmlEl.offsetParent !== null) {\n        return htmlEl.scrollWidth;\n    }\n    var clone = htmlEl.cloneNode(true);\n    clone.style.setProperty(\'position\', \'absolute\');\n    clone.style.setProperty(\'transform\', \'translate(-9999px, -9999px)\');\n    document.documentElement.appendChild(clone);\n    var scrollWidth = clone.scrollWidth;\n    document.documentElement.removeChild(clone);\n    return scrollWidth;\n}\n//# sourceMappingURL=ponyfill.js.map\n;// ./node_modules/@material/top-app-bar/node_modules/@material/ripple/constants.js\n/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the "Software"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nvar cssClasses = {\n    // Ripple is a special case where the "root" component is really a "mixin" of sorts,\n    // given that it\'s an \'upgrade\' to an existing component. That being said it is the root\n    // CSS class that all other CSS classes derive from.\n    BG_FOCUSED: \'mdc-ripple-upgraded--background-focused\',\n    FG_ACTIVATION: \'mdc-ripple-upgraded--foreground-activation\',\n    FG_DEACTIVATION: \'mdc-ripple-upgraded--foreground-deactivation\',\n    ROOT: \'mdc-ripple-upgraded\',\n    UNBOUNDED: \'mdc-ripple-upgraded--unbounded\',\n};\nvar strings = {\n    VAR_FG_SCALE: \'--mdc-ripple-fg-scale\',\n    VAR_FG_SIZE: \'--mdc-ripple-fg-size\',\n    VAR_FG_TRANSLATE_END: \'--mdc-ripple-fg-translate-end\',\n    VAR_FG_TRANSLATE_START: \'--mdc-ripple-fg-translate-start\',\n    VAR_LEFT: \'--mdc-ripple-left\',\n    VAR_TOP: \'--mdc-ripple-top\',\n};\nvar numbers = {\n    DEACTIVATION_TIMEOUT_MS: 225,\n    FG_DEACTIVATION_MS: 150,\n    INITIAL_ORIGIN_SCALE: 0.6,\n    PADDING: 10,\n    TAP_DELAY_MS: 300,\n};\n//# sourceMappingURL=constants.js.map\n;// ./node_modules/@material/top-app-bar/node_modules/@material/ripple/util.js\n/**\n * Stores result from supportsCssVariables to avoid redundant processing to\n * detect CSS custom variable support.\n */\nvar supportsCssVariables_;\nfunction supportsCssVariables(windowObj, forceRefresh) {\n    if (forceRefresh === void 0) { forceRefresh = false; }\n    var CSS = windowObj.CSS;\n    var supportsCssVars = supportsCssVariables_;\n    if (typeof supportsCssVariables_ === \'boolean\' && !forceRefresh) {\n        return supportsCssVariables_;\n    }\n    var supportsFunctionPresent = CSS && typeof CSS.supports === \'function\';\n    if (!supportsFunctionPresent) {\n        return false;\n    }\n    var explicitlySupportsCssVars = CSS.supports(\'--css-vars\', \'yes\');\n    // See: https://bugs.webkit.org/show_bug.cgi?id=154669\n    // See: README section on Safari\n    var weAreFeatureDetectingSafari10plus = (CSS.supports(\'(--css-vars: yes)\') &&\n        CSS.supports(\'color\', \'#00000000\'));\n    supportsCssVars =\n        explicitlySupportsCssVars || weAreFeatureDetectingSafari10plus;\n    if (!forceRefresh) {\n        supportsCssVariables_ = supportsCssVars;\n    }\n    return supportsCssVars;\n}\nfunction getNormalizedEventCoords(evt, pageOffset, clientRect) {\n    if (!evt) {\n        return { x: 0, y: 0 };\n    }\n    var x = pageOffset.x, y = pageOffset.y;\n    var documentX = x + clientRect.left;\n    var documentY = y + clientRect.top;\n    var normalizedX;\n    var normalizedY;\n    // Determine touch point relative to the ripple container.\n    if (evt.type === \'touchstart\') {\n        var touchEvent = evt;\n        normalizedX = touchEvent.changedTouches[0].pageX - documentX;\n        normalizedY = touchEvent.changedTouches[0].pageY - documentY;\n    }\n    else {\n        var mouseEvent = evt;\n        normalizedX = mouseEvent.pageX - documentX;\n        normalizedY = mouseEvent.pageY - documentY;\n    }\n    return { x: normalizedX, y: normalizedY };\n}\n//# sourceMappingURL=util.js.map\n;// ./node_modules/@material/top-app-bar/node_modules/@material/ripple/foundation.js\n/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the "Software"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n\n\n\n// Activation events registered on the root element of each instance for activation\nvar ACTIVATION_EVENT_TYPES = [\n    \'touchstart\', \'pointerdown\', \'mousedown\', \'keydown\',\n];\n// Deactivation events registered on documentElement when a pointer-related down event occurs\nvar POINTER_DEACTIVATION_EVENT_TYPES = [\n    \'touchend\', \'pointerup\', \'mouseup\', \'contextmenu\',\n];\n// simultaneous nested activations\nvar activatedTargets = [];\nvar MDCRippleFoundation = /** @class */ (function (_super) {\n    __extends(MDCRippleFoundation, _super);\n    function MDCRippleFoundation(adapter) {\n        var _this = _super.call(this, __assign({}, MDCRippleFoundation.defaultAdapter, adapter)) || this;\n        _this.activationAnimationHasEnded_ = false;\n        _this.activationTimer_ = 0;\n        _this.fgDeactivationRemovalTimer_ = 0;\n        _this.fgScale_ = \'0\';\n        _this.frame_ = { width: 0, height: 0 };\n        _this.initialSize_ = 0;\n        _this.layoutFrame_ = 0;\n        _this.maxRadius_ = 0;\n        _this.unboundedCoords_ = { left: 0, top: 0 };\n        _this.activationState_ = _this.defaultActivationState_();\n        _this.activationTimerCallback_ = function () {\n            _this.activationAnimationHasEnded_ = true;\n            _this.runDeactivationUXLogicIfReady_();\n        };\n        _this.activateHandler_ = function (e) { return _this.activate_(e); };\n        _this.deactivateHandler_ = function () { return _this.deactivate_(); };\n        _this.focusHandler_ = function () { return _this.handleFocus(); };\n        _this.blurHandler_ = function () { return _this.handleBlur(); };\n        _this.resizeHandler_ = function () { return _this.layout(); };\n        return _this;\n    }\n    Object.defineProperty(MDCRippleFoundation, "cssClasses", {\n        get: function () {\n            return cssClasses;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MDCRippleFoundation, "strings", {\n        get: function () {\n            return strings;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MDCRippleFoundation, "numbers", {\n        get: function () {\n            return numbers;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MDCRippleFoundation, "defaultAdapter", {\n        get: function () {\n            return {\n                addClass: function () { return undefined; },\n                browserSupportsCssVars: function () { return true; },\n                computeBoundingRect: function () { return ({ top: 0, right: 0, bottom: 0, left: 0, width: 0, height: 0 }); },\n                containsEventTarget: function () { return true; },\n                deregisterDocumentInteractionHandler: function () { return undefined; },\n                deregisterInteractionHandler: function () { return undefined; },\n                deregisterResizeHandler: function () { return undefined; },\n                getWindowPageOffset: function () { return ({ x: 0, y: 0 }); },\n                isSurfaceActive: function () { return true; },\n                isSurfaceDisabled: function () { return true; },\n                isUnbounded: function () { return true; },\n                registerDocumentInteractionHandler: function () { return undefined; },\n                registerInteractionHandler: function () { return undefined; },\n                registerResizeHandler: function () { return undefined; },\n                removeClass: function () { return undefined; },\n                updateCssVariable: function () { return undefined; },\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    MDCRippleFoundation.prototype.init = function () {\n        var _this = this;\n        var supportsPressRipple = this.supportsPressRipple_();\n        this.registerRootHandlers_(supportsPressRipple);\n        if (supportsPressRipple) {\n            var _a = MDCRippleFoundation.cssClasses, ROOT_1 = _a.ROOT, UNBOUNDED_1 = _a.UNBOUNDED;\n            requestAnimationFrame(function () {\n                _this.adapter_.addClass(ROOT_1);\n                if (_this.adapter_.isUnbounded()) {\n                    _this.adapter_.addClass(UNBOUNDED_1);\n                    // Unbounded ripples need layout logic applied immediately to set coordinates for both shade and ripple\n                    _this.layoutInternal_();\n                }\n            });\n        }\n    };\n    MDCRippleFoundation.prototype.destroy = function () {\n        var _this = this;\n        if (this.supportsPressRipple_()) {\n            if (this.activationTimer_) {\n                clearTimeout(this.activationTimer_);\n                this.activationTimer_ = 0;\n                this.adapter_.removeClass(MDCRippleFoundation.cssClasses.FG_ACTIVATION);\n            }\n            if (this.fgDeactivationRemovalTimer_) {\n                clearTimeout(this.fgDeactivationRemovalTimer_);\n                this.fgDeactivationRemovalTimer_ = 0;\n                this.adapter_.removeClass(MDCRippleFoundation.cssClasses.FG_DEACTIVATION);\n            }\n            var _a = MDCRippleFoundation.cssClasses, ROOT_2 = _a.ROOT, UNBOUNDED_2 = _a.UNBOUNDED;\n            requestAnimationFrame(function () {\n                _this.adapter_.removeClass(ROOT_2);\n                _this.adapter_.removeClass(UNBOUNDED_2);\n                _this.removeCssVars_();\n            });\n        }\n        this.deregisterRootHandlers_();\n        this.deregisterDeactivationHandlers_();\n    };\n    /**\n     * @param evt Optional event containing position information.\n     */\n    MDCRippleFoundation.prototype.activate = function (evt) {\n        this.activate_(evt);\n    };\n    MDCRippleFoundation.prototype.deactivate = function () {\n        this.deactivate_();\n    };\n    MDCRippleFoundation.prototype.layout = function () {\n        var _this = this;\n        if (this.layoutFrame_) {\n            cancelAnimationFrame(this.layoutFrame_);\n        }\n        this.layoutFrame_ = requestAnimationFrame(function () {\n            _this.layoutInternal_();\n            _this.layoutFrame_ = 0;\n        });\n    };\n    MDCRippleFoundation.prototype.setUnbounded = function (unbounded) {\n        var UNBOUNDED = MDCRippleFoundation.cssClasses.UNBOUNDED;\n        if (unbounded) {\n            this.adapter_.addClass(UNBOUNDED);\n        }\n        else {\n            this.adapter_.removeClass(UNBOUNDED);\n        }\n    };\n    MDCRippleFoundation.prototype.handleFocus = function () {\n        var _this = this;\n        requestAnimationFrame(function () {\n            return _this.adapter_.addClass(MDCRippleFoundation.cssClasses.BG_FOCUSED);\n        });\n    };\n    MDCRippleFoundation.prototype.handleBlur = function () {\n        var _this = this;\n        requestAnimationFrame(function () {\n            return _this.adapter_.removeClass(MDCRippleFoundation.cssClasses.BG_FOCUSED);\n        });\n    };\n    /**\n     * We compute this property so that we are not querying information about the client\n     * until the point in time where the foundation requests it. This prevents scenarios where\n     * client-side feature-detection may happen too early, such as when components are rendered on the server\n     * and then initialized at mount time on the client.\n     */\n    MDCRippleFoundation.prototype.supportsPressRipple_ = function () {\n        return this.adapter_.browserSupportsCssVars();\n    };\n    MDCRippleFoundation.prototype.defaultActivationState_ = function () {\n        return {\n            activationEvent: undefined,\n            hasDeactivationUXRun: false,\n            isActivated: false,\n            isProgrammatic: false,\n            wasActivatedByPointer: false,\n            wasElementMadeActive: false,\n        };\n    };\n    /**\n     * supportsPressRipple Passed from init to save a redundant function call\n     */\n    MDCRippleFoundation.prototype.registerRootHandlers_ = function (supportsPressRipple) {\n        var _this = this;\n        if (supportsPressRipple) {\n            ACTIVATION_EVENT_TYPES.forEach(function (evtType) {\n                _this.adapter_.registerInteractionHandler(evtType, _this.activateHandler_);\n            });\n            if (this.adapter_.isUnbounded()) {\n                this.adapter_.registerResizeHandler(this.resizeHandler_);\n            }\n        }\n        this.adapter_.registerInteractionHandler(\'focus\', this.focusHandler_);\n        this.adapter_.registerInteractionHandler(\'blur\', this.blurHandler_);\n    };\n    MDCRippleFoundation.prototype.registerDeactivationHandlers_ = function (evt) {\n        var _this = this;\n        if (evt.type === \'keydown\') {\n            this.adapter_.registerInteractionHandler(\'keyup\', this.deactivateHandler_);\n        }\n        else {\n            POINTER_DEACTIVATION_EVENT_TYPES.forEach(function (evtType) {\n                _this.adapter_.registerDocumentInteractionHandler(evtType, _this.deactivateHandler_);\n            });\n        }\n    };\n    MDCRippleFoundation.prototype.deregisterRootHandlers_ = function () {\n        var _this = this;\n        ACTIVATION_EVENT_TYPES.forEach(function (evtType) {\n            _this.adapter_.deregisterInteractionHandler(evtType, _this.activateHandler_);\n        });\n        this.adapter_.deregisterInteractionHandler(\'focus\', this.focusHandler_);\n        this.adapter_.deregisterInteractionHandler(\'blur\', this.blurHandler_);\n        if (this.adapter_.isUnbounded()) {\n            this.adapter_.deregisterResizeHandler(this.resizeHandler_);\n        }\n    };\n    MDCRippleFoundation.prototype.deregisterDeactivationHandlers_ = function () {\n        var _this = this;\n        this.adapter_.deregisterInteractionHandler(\'keyup\', this.deactivateHandler_);\n        POINTER_DEACTIVATION_EVENT_TYPES.forEach(function (evtType) {\n            _this.adapter_.deregisterDocumentInteractionHandler(evtType, _this.deactivateHandler_);\n        });\n    };\n    MDCRippleFoundation.prototype.removeCssVars_ = function () {\n        var _this = this;\n        var rippleStrings = MDCRippleFoundation.strings;\n        var keys = Object.keys(rippleStrings);\n        keys.forEach(function (key) {\n            if (key.indexOf(\'VAR_\') === 0) {\n                _this.adapter_.updateCssVariable(rippleStrings[key], null);\n            }\n        });\n    };\n    MDCRippleFoundation.prototype.activate_ = function (evt) {\n        var _this = this;\n        if (this.adapter_.isSurfaceDisabled()) {\n            return;\n        }\n        var activationState = this.activationState_;\n        if (activationState.isActivated) {\n            return;\n        }\n        // Avoid reacting to follow-on events fired by touch device after an already-processed user interaction\n        var previousActivationEvent = this.previousActivationEvent_;\n        var isSameInteraction = previousActivationEvent && evt !== undefined && previousActivationEvent.type !== evt.type;\n        if (isSameInteraction) {\n            return;\n        }\n        activationState.isActivated = true;\n        activationState.isProgrammatic = evt === undefined;\n        activationState.activationEvent = evt;\n        activationState.wasActivatedByPointer = activationState.isProgrammatic ? false : evt !== undefined && (evt.type === \'mousedown\' || evt.type === \'touchstart\' || evt.type === \'pointerdown\');\n        var hasActivatedChild = evt !== undefined && activatedTargets.length > 0 && activatedTargets.some(function (target) { return _this.adapter_.containsEventTarget(target); });\n        if (hasActivatedChild) {\n            // Immediately reset activation state, while preserving logic that prevents touch follow-on events\n            this.resetActivationState_();\n            return;\n        }\n        if (evt !== undefined) {\n            activatedTargets.push(evt.target);\n            this.registerDeactivationHandlers_(evt);\n        }\n        activationState.wasElementMadeActive = this.checkElementMadeActive_(evt);\n        if (activationState.wasElementMadeActive) {\n            this.animateActivation_();\n        }\n        requestAnimationFrame(function () {\n            // Reset array on next frame after the current event has had a chance to bubble to prevent ancestor ripples\n            activatedTargets = [];\n            if (!activationState.wasElementMadeActive\n                && evt !== undefined\n                && (evt.key === \' \' || evt.keyCode === 32)) {\n                // If space was pressed, try again within an rAF call to detect :active, because different UAs report\n                // active states inconsistently when they\'re called within event handling code:\n                // - https://bugs.chromium.org/p/chromium/issues/detail?id=635971\n                // - https://bugzilla.mozilla.org/show_bug.cgi?id=1293741\n                // We try first outside rAF to support Edge, which does not exhibit this problem, but will crash if a CSS\n                // variable is set within a rAF callback for a submit button interaction (#2241).\n                activationState.wasElementMadeActive = _this.checkElementMadeActive_(evt);\n                if (activationState.wasElementMadeActive) {\n                    _this.animateActivation_();\n                }\n            }\n            if (!activationState.wasElementMadeActive) {\n                // Reset activation state immediately if element was not made active.\n                _this.activationState_ = _this.defaultActivationState_();\n            }\n        });\n    };\n    MDCRippleFoundation.prototype.checkElementMadeActive_ = function (evt) {\n        return (evt !== undefined && evt.type === \'keydown\') ? this.adapter_.isSurfaceActive() : true;\n    };\n    MDCRippleFoundation.prototype.animateActivation_ = function () {\n        var _this = this;\n        var _a = MDCRippleFoundation.strings, VAR_FG_TRANSLATE_START = _a.VAR_FG_TRANSLATE_START, VAR_FG_TRANSLATE_END = _a.VAR_FG_TRANSLATE_END;\n        var _b = MDCRippleFoundation.cssClasses, FG_DEACTIVATION = _b.FG_DEACTIVATION, FG_ACTIVATION = _b.FG_ACTIVATION;\n        var DEACTIVATION_TIMEOUT_MS = MDCRippleFoundation.numbers.DEACTIVATION_TIMEOUT_MS;\n        this.layoutInternal_();\n        var translateStart = \'\';\n        var translateEnd = \'\';\n        if (!this.adapter_.isUnbounded()) {\n            var _c = this.getFgTranslationCoordinates_(), startPoint = _c.startPoint, endPoint = _c.endPoint;\n            translateStart = startPoint.x + "px, " + startPoint.y + "px";\n            translateEnd = endPoint.x + "px, " + endPoint.y + "px";\n        }\n        this.adapter_.updateCssVariable(VAR_FG_TRANSLATE_START, translateStart);\n        this.adapter_.updateCssVariable(VAR_FG_TRANSLATE_END, translateEnd);\n        // Cancel any ongoing activation/deactivation animations\n        clearTimeout(this.activationTimer_);\n        clearTimeout(this.fgDeactivationRemovalTimer_);\n        this.rmBoundedActivationClasses_();\n        this.adapter_.removeClass(FG_DEACTIVATION);\n        // Force layout in order to re-trigger the animation.\n        this.adapter_.computeBoundingRect();\n        this.adapter_.addClass(FG_ACTIVATION);\n        this.activationTimer_ = setTimeout(function () { return _this.activationTimerCallback_(); }, DEACTIVATION_TIMEOUT_MS);\n    };\n    MDCRippleFoundation.prototype.getFgTranslationCoordinates_ = function () {\n        var _a = this.activationState_, activationEvent = _a.activationEvent, wasActivatedByPointer = _a.wasActivatedByPointer;\n        var startPoint;\n        if (wasActivatedByPointer) {\n            startPoint = getNormalizedEventCoords(activationEvent, this.adapter_.getWindowPageOffset(), this.adapter_.computeBoundingRect());\n        }\n        else {\n            startPoint = {\n                x: this.frame_.width / 2,\n                y: this.frame_.height / 2,\n            };\n        }\n        // Center the element around the start point.\n        startPoint = {\n            x: startPoint.x - (this.initialSize_ / 2),\n            y: startPoint.y - (this.initialSize_ / 2),\n        };\n        var endPoint = {\n            x: (this.frame_.width / 2) - (this.initialSize_ / 2),\n            y: (this.frame_.height / 2) - (this.initialSize_ / 2),\n        };\n        return { startPoint: startPoint, endPoint: endPoint };\n    };\n    MDCRippleFoundation.prototype.runDeactivationUXLogicIfReady_ = function () {\n        var _this = this;\n        // This method is called both when a pointing device is released, and when the activation animation ends.\n        // The deactivation animation should only run after both of those occur.\n        var FG_DEACTIVATION = MDCRippleFoundation.cssClasses.FG_DEACTIVATION;\n        var _a = this.activationState_, hasDeactivationUXRun = _a.hasDeactivationUXRun, isActivated = _a.isActivated;\n        var activationHasEnded = hasDeactivationUXRun || !isActivated;\n        if (activationHasEnded && this.activationAnimationHasEnded_) {\n            this.rmBoundedActivationClasses_();\n            this.adapter_.addClass(FG_DEACTIVATION);\n            this.fgDeactivationRemovalTimer_ = setTimeout(function () {\n                _this.adapter_.removeClass(FG_DEACTIVATION);\n            }, numbers.FG_DEACTIVATION_MS);\n        }\n    };\n    MDCRippleFoundation.prototype.rmBoundedActivationClasses_ = function () {\n        var FG_ACTIVATION = MDCRippleFoundation.cssClasses.FG_ACTIVATION;\n        this.adapter_.removeClass(FG_ACTIVATION);\n        this.activationAnimationHasEnded_ = false;\n        this.adapter_.computeBoundingRect();\n    };\n    MDCRippleFoundation.prototype.resetActivationState_ = function () {\n        var _this = this;\n        this.previousActivationEvent_ = this.activationState_.activationEvent;\n        this.activationState_ = this.defaultActivationState_();\n        // Touch devices may fire additional events for the same interaction within a short time.\n        // Store the previous event until it\'s safe to assume that subsequent events are for new interactions.\n        setTimeout(function () { return _this.previousActivationEvent_ = undefined; }, MDCRippleFoundation.numbers.TAP_DELAY_MS);\n    };\n    MDCRippleFoundation.prototype.deactivate_ = function () {\n        var _this = this;\n        var activationState = this.activationState_;\n        // This can happen in scenarios such as when you have a keyup event that blurs the element.\n        if (!activationState.isActivated) {\n            return;\n        }\n        var state = __assign({}, activationState);\n        if (activationState.isProgrammatic) {\n            requestAnimationFrame(function () { return _this.animateDeactivation_(state); });\n            this.resetActivationState_();\n        }\n        else {\n            this.deregisterDeactivationHandlers_();\n            requestAnimationFrame(function () {\n                _this.activationState_.hasDeactivationUXRun = true;\n                _this.animateDeactivation_(state);\n                _this.resetActivationState_();\n            });\n        }\n    };\n    MDCRippleFoundation.prototype.animateDeactivation_ = function (_a) {\n        var wasActivatedByPointer = _a.wasActivatedByPointer, wasElementMadeActive = _a.wasElementMadeActive;\n        if (wasActivatedByPointer || wasElementMadeActive) {\n            this.runDeactivationUXLogicIfReady_();\n        }\n    };\n    MDCRippleFoundation.prototype.layoutInternal_ = function () {\n        var _this = this;\n        this.frame_ = this.adapter_.computeBoundingRect();\n        var maxDim = Math.max(this.frame_.height, this.frame_.width);\n        // Surface diameter is treated differently for unbounded vs. bounded ripples.\n        // Unbounded ripple diameter is calculated smaller since the surface is expected to already be padded appropriately\n        // to extend the hitbox, and the ripple is expected to meet the edges of the padded hitbox (which is typically\n        // square). Bounded ripples, on the other hand, are fully expected to expand beyond the surface\'s longest diameter\n        // (calculated based on the diagonal plus a constant padding), and are clipped at the surface\'s border via\n        // `overflow: hidden`.\n        var getBoundedRadius = function () {\n            var hypotenuse = Math.sqrt(Math.pow(_this.frame_.width, 2) + Math.pow(_this.frame_.height, 2));\n            return hypotenuse + MDCRippleFoundation.numbers.PADDING;\n        };\n        this.maxRadius_ = this.adapter_.isUnbounded() ? maxDim : getBoundedRadius();\n        // Ripple is sized as a fraction of the largest dimension of the surface, then scales up using a CSS scale transform\n        var initialSize = Math.floor(maxDim * MDCRippleFoundation.numbers.INITIAL_ORIGIN_SCALE);\n        // Unbounded ripple size should always be even number to equally center align.\n        if (this.adapter_.isUnbounded() && initialSize % 2 !== 0) {\n            this.initialSize_ = initialSize - 1;\n        }\n        else {\n            this.initialSize_ = initialSize;\n        }\n        this.fgScale_ = "" + this.maxRadius_ / this.initialSize_;\n        this.updateLayoutCssVars_();\n    };\n    MDCRippleFoundation.prototype.updateLayoutCssVars_ = function () {\n        var _a = MDCRippleFoundation.strings, VAR_FG_SIZE = _a.VAR_FG_SIZE, VAR_LEFT = _a.VAR_LEFT, VAR_TOP = _a.VAR_TOP, VAR_FG_SCALE = _a.VAR_FG_SCALE;\n        this.adapter_.updateCssVariable(VAR_FG_SIZE, this.initialSize_ + "px");\n        this.adapter_.updateCssVariable(VAR_FG_SCALE, this.fgScale_);\n        if (this.adapter_.isUnbounded()) {\n            this.unboundedCoords_ = {\n                left: Math.round((this.frame_.width / 2) - (this.initialSize_ / 2)),\n                top: Math.round((this.frame_.height / 2) - (this.initialSize_ / 2)),\n            };\n            this.adapter_.updateCssVariable(VAR_LEFT, this.unboundedCoords_.left + "px");\n            this.adapter_.updateCssVariable(VAR_TOP, this.unboundedCoords_.top + "px");\n        }\n    };\n    return MDCRippleFoundation;\n}(MDCFoundation));\n\n// tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.\n/* harmony default export */ const ripple_foundation = ((/* unused pure expression or super */ null && (MDCRippleFoundation)));\n//# sourceMappingURL=foundation.js.map\n;// ./node_modules/@material/top-app-bar/node_modules/@material/ripple/component.js\n/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the "Software"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n\n\n\n\n\nvar MDCRipple = /** @class */ (function (_super) {\n    __extends(MDCRipple, _super);\n    function MDCRipple() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.disabled = false;\n        return _this;\n    }\n    MDCRipple.attachTo = function (root, opts) {\n        if (opts === void 0) { opts = { isUnbounded: undefined }; }\n        var ripple = new MDCRipple(root);\n        // Only override unbounded behavior if option is explicitly specified\n        if (opts.isUnbounded !== undefined) {\n            ripple.unbounded = opts.isUnbounded;\n        }\n        return ripple;\n    };\n    MDCRipple.createAdapter = function (instance) {\n        return {\n            addClass: function (className) { return instance.root_.classList.add(className); },\n            browserSupportsCssVars: function () { return supportsCssVariables(window); },\n            computeBoundingRect: function () { return instance.root_.getBoundingClientRect(); },\n            containsEventTarget: function (target) { return instance.root_.contains(target); },\n            deregisterDocumentInteractionHandler: function (evtType, handler) {\n                return document.documentElement.removeEventListener(evtType, handler, applyPassive());\n            },\n            deregisterInteractionHandler: function (evtType, handler) {\n                return instance.root_.removeEventListener(evtType, handler, applyPassive());\n            },\n            deregisterResizeHandler: function (handler) { return window.removeEventListener(\'resize\', handler); },\n            getWindowPageOffset: function () { return ({ x: window.pageXOffset, y: window.pageYOffset }); },\n            isSurfaceActive: function () { return matches(instance.root_, \':active\'); },\n            isSurfaceDisabled: function () { return Boolean(instance.disabled); },\n            isUnbounded: function () { return Boolean(instance.unbounded); },\n            registerDocumentInteractionHandler: function (evtType, handler) {\n                return document.documentElement.addEventListener(evtType, handler, applyPassive());\n            },\n            registerInteractionHandler: function (evtType, handler) {\n                return instance.root_.addEventListener(evtType, handler, applyPassive());\n            },\n            registerResizeHandler: function (handler) { return window.addEventListener(\'resize\', handler); },\n            removeClass: function (className) { return instance.root_.classList.remove(className); },\n            updateCssVariable: function (varName, value) { return instance.root_.style.setProperty(varName, value); },\n        };\n    };\n    Object.defineProperty(MDCRipple.prototype, "unbounded", {\n        get: function () {\n            return Boolean(this.unbounded_);\n        },\n        set: function (unbounded) {\n            this.unbounded_ = Boolean(unbounded);\n            this.setUnbounded_();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    MDCRipple.prototype.activate = function () {\n        this.foundation_.activate();\n    };\n    MDCRipple.prototype.deactivate = function () {\n        this.foundation_.deactivate();\n    };\n    MDCRipple.prototype.layout = function () {\n        this.foundation_.layout();\n    };\n    MDCRipple.prototype.getDefaultFoundation = function () {\n        return new MDCRippleFoundation(MDCRipple.createAdapter(this));\n    };\n    MDCRipple.prototype.initialSyncWithDOM = function () {\n        var root = this.root_;\n        this.unbounded = \'mdcRippleIsUnbounded\' in root.dataset;\n    };\n    /**\n     * Closure Compiler throws an access control error when directly accessing a\n     * protected or private property inside a getter/setter, like unbounded above.\n     * By accessing the protected property inside a method, we solve that problem.\n     * That\'s why this function exists.\n     */\n    MDCRipple.prototype.setUnbounded_ = function () {\n        this.foundation_.setUnbounded(Boolean(this.unbounded_));\n    };\n    return MDCRipple;\n}(MDCComponent));\n\n//# sourceMappingURL=component.js.map\n;// ./node_modules/@material/top-app-bar/constants.js\n/**\n * @license\n * Copyright 2018 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the "Software"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nvar constants_cssClasses = {\n    FIXED_CLASS: \'mdc-top-app-bar--fixed\',\n    FIXED_SCROLLED_CLASS: \'mdc-top-app-bar--fixed-scrolled\',\n    SHORT_CLASS: \'mdc-top-app-bar--short\',\n    SHORT_COLLAPSED_CLASS: \'mdc-top-app-bar--short-collapsed\',\n    SHORT_HAS_ACTION_ITEM_CLASS: \'mdc-top-app-bar--short-has-action-item\',\n};\nvar constants_numbers = {\n    DEBOUNCE_THROTTLE_RESIZE_TIME_MS: 100,\n    MAX_TOP_APP_BAR_HEIGHT: 128,\n};\nvar constants_strings = {\n    ACTION_ITEM_SELECTOR: \'.mdc-top-app-bar__action-item\',\n    NAVIGATION_EVENT: \'MDCTopAppBar:nav\',\n    NAVIGATION_ICON_SELECTOR: \'.mdc-top-app-bar__navigation-icon\',\n    ROOT_SELECTOR: \'.mdc-top-app-bar\',\n    TITLE_SELECTOR: \'.mdc-top-app-bar__title\',\n};\n\n//# sourceMappingURL=constants.js.map\n;// ./node_modules/@material/top-app-bar/foundation.js\n/**\n * @license\n * Copyright 2018 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the "Software"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n\n\nvar MDCTopAppBarBaseFoundation = /** @class */ (function (_super) {\n    __extends(MDCTopAppBarBaseFoundation, _super);\n    /* istanbul ignore next: optional argument is not a branch statement */\n    function MDCTopAppBarBaseFoundation(adapter) {\n        return _super.call(this, __assign({}, MDCTopAppBarBaseFoundation.defaultAdapter, adapter)) || this;\n    }\n    Object.defineProperty(MDCTopAppBarBaseFoundation, "strings", {\n        get: function () {\n            return constants_strings;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MDCTopAppBarBaseFoundation, "cssClasses", {\n        get: function () {\n            return constants_cssClasses;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MDCTopAppBarBaseFoundation, "numbers", {\n        get: function () {\n            return constants_numbers;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MDCTopAppBarBaseFoundation, "defaultAdapter", {\n        /**\n         * See {@link MDCTopAppBarAdapter} for typing information on parameters and return types.\n         */\n        get: function () {\n            // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.\n            return {\n                addClass: function () { return undefined; },\n                removeClass: function () { return undefined; },\n                hasClass: function () { return false; },\n                setStyle: function () { return undefined; },\n                getTopAppBarHeight: function () { return 0; },\n                notifyNavigationIconClicked: function () { return undefined; },\n                getViewportScrollY: function () { return 0; },\n                getTotalActionItems: function () { return 0; },\n            };\n            // tslint:enable:object-literal-sort-keys\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /** Other variants of TopAppBar foundation overrides this method */\n    MDCTopAppBarBaseFoundation.prototype.handleTargetScroll = function () { }; // tslint:disable-line:no-empty\n    /** Other variants of TopAppBar foundation overrides this method */\n    MDCTopAppBarBaseFoundation.prototype.handleWindowResize = function () { }; // tslint:disable-line:no-empty\n    MDCTopAppBarBaseFoundation.prototype.handleNavigationClick = function () {\n        this.adapter_.notifyNavigationIconClicked();\n    };\n    return MDCTopAppBarBaseFoundation;\n}(MDCFoundation));\n\n// tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.\n/* harmony default export */ const top_app_bar_foundation = ((/* unused pure expression or super */ null && (MDCTopAppBarBaseFoundation)));\n//# sourceMappingURL=foundation.js.map\n;// ./node_modules/@material/top-app-bar/standard/foundation.js\n/**\n * @license\n * Copyright 2018 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the "Software"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n\n\nvar INITIAL_VALUE = 0;\nvar MDCTopAppBarFoundation = /** @class */ (function (_super) {\n    __extends(MDCTopAppBarFoundation, _super);\n    /* istanbul ignore next: optional argument is not a branch statement */\n    function MDCTopAppBarFoundation(adapter) {\n        var _this = _super.call(this, adapter) || this;\n        /**\n         * Indicates if the top app bar was docked in the previous scroll handler iteration.\n         */\n        _this.wasDocked_ = true;\n        /**\n         * Indicates if the top app bar is docked in the fully shown position.\n         */\n        _this.isDockedShowing_ = true;\n        /**\n         * Variable for current scroll position of the top app bar\n         */\n        _this.currentAppBarOffsetTop_ = 0;\n        /**\n         * Used to prevent the top app bar from being scrolled out of view during resize events\n         */\n        _this.isCurrentlyBeingResized_ = false;\n        /**\n         * The timeout that\'s used to throttle the resize events\n         */\n        _this.resizeThrottleId_ = INITIAL_VALUE;\n        /**\n         * The timeout that\'s used to debounce toggling the isCurrentlyBeingResized_ variable after a resize\n         */\n        _this.resizeDebounceId_ = INITIAL_VALUE;\n        _this.lastScrollPosition_ = _this.adapter_.getViewportScrollY();\n        _this.topAppBarHeight_ = _this.adapter_.getTopAppBarHeight();\n        return _this;\n    }\n    MDCTopAppBarFoundation.prototype.destroy = function () {\n        _super.prototype.destroy.call(this);\n        this.adapter_.setStyle(\'top\', \'\');\n    };\n    /**\n     * Scroll handler for the default scroll behavior of the top app bar.\n     * @override\n     */\n    MDCTopAppBarFoundation.prototype.handleTargetScroll = function () {\n        var currentScrollPosition = Math.max(this.adapter_.getViewportScrollY(), 0);\n        var diff = currentScrollPosition - this.lastScrollPosition_;\n        this.lastScrollPosition_ = currentScrollPosition;\n        // If the window is being resized the lastScrollPosition_ needs to be updated but the\n        // current scroll of the top app bar should stay in the same position.\n        if (!this.isCurrentlyBeingResized_) {\n            this.currentAppBarOffsetTop_ -= diff;\n            if (this.currentAppBarOffsetTop_ > 0) {\n                this.currentAppBarOffsetTop_ = 0;\n            }\n            else if (Math.abs(this.currentAppBarOffsetTop_) > this.topAppBarHeight_) {\n                this.currentAppBarOffsetTop_ = -this.topAppBarHeight_;\n            }\n            this.moveTopAppBar_();\n        }\n    };\n    /**\n     * Top app bar resize handler that throttle/debounce functions that execute updates.\n     * @override\n     */\n    MDCTopAppBarFoundation.prototype.handleWindowResize = function () {\n        var _this = this;\n        // Throttle resize events 10 p/s\n        if (!this.resizeThrottleId_) {\n            this.resizeThrottleId_ = setTimeout(function () {\n                _this.resizeThrottleId_ = INITIAL_VALUE;\n                _this.throttledResizeHandler_();\n            }, constants_numbers.DEBOUNCE_THROTTLE_RESIZE_TIME_MS);\n        }\n        this.isCurrentlyBeingResized_ = true;\n        if (this.resizeDebounceId_) {\n            clearTimeout(this.resizeDebounceId_);\n        }\n        this.resizeDebounceId_ = setTimeout(function () {\n            _this.handleTargetScroll();\n            _this.isCurrentlyBeingResized_ = false;\n            _this.resizeDebounceId_ = INITIAL_VALUE;\n        }, constants_numbers.DEBOUNCE_THROTTLE_RESIZE_TIME_MS);\n    };\n    /**\n     * Function to determine if the DOM needs to update.\n     */\n    MDCTopAppBarFoundation.prototype.checkForUpdate_ = function () {\n        var offscreenBoundaryTop = -this.topAppBarHeight_;\n        var hasAnyPixelsOffscreen = this.currentAppBarOffsetTop_ < 0;\n        var hasAnyPixelsOnscreen = this.currentAppBarOffsetTop_ > offscreenBoundaryTop;\n        var partiallyShowing = hasAnyPixelsOffscreen && hasAnyPixelsOnscreen;\n        // If it\'s partially showing, it can\'t be docked.\n        if (partiallyShowing) {\n            this.wasDocked_ = false;\n        }\n        else {\n            // Not previously docked and not partially showing, it\'s now docked.\n            if (!this.wasDocked_) {\n                this.wasDocked_ = true;\n                return true;\n            }\n            else if (this.isDockedShowing_ !== hasAnyPixelsOnscreen) {\n                this.isDockedShowing_ = hasAnyPixelsOnscreen;\n                return true;\n            }\n        }\n        return partiallyShowing;\n    };\n    /**\n     * Function to move the top app bar if needed.\n     */\n    MDCTopAppBarFoundation.prototype.moveTopAppBar_ = function () {\n        if (this.checkForUpdate_()) {\n            // Once the top app bar is fully hidden we use the max potential top app bar height as our offset\n            // so the top app bar doesn\'t show if the window resizes and the new height > the old height.\n            var offset = this.currentAppBarOffsetTop_;\n            if (Math.abs(offset) >= this.topAppBarHeight_) {\n                offset = -constants_numbers.MAX_TOP_APP_BAR_HEIGHT;\n            }\n            this.adapter_.setStyle(\'top\', offset + \'px\');\n        }\n    };\n    /**\n     * Throttled function that updates the top app bar scrolled values if the\n     * top app bar height changes.\n     */\n    MDCTopAppBarFoundation.prototype.throttledResizeHandler_ = function () {\n        var currentHeight = this.adapter_.getTopAppBarHeight();\n        if (this.topAppBarHeight_ !== currentHeight) {\n            this.wasDocked_ = false;\n            // Since the top app bar has a different height depending on the screen width, this\n            // will ensure that the top app bar remains in the correct location if\n            // completely hidden and a resize makes the top app bar a different height.\n            this.currentAppBarOffsetTop_ -= this.topAppBarHeight_ - currentHeight;\n            this.topAppBarHeight_ = currentHeight;\n        }\n        this.handleTargetScroll();\n    };\n    return MDCTopAppBarFoundation;\n}(MDCTopAppBarBaseFoundation));\n\n// tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.\n/* harmony default export */ const standard_foundation = ((/* unused pure expression or super */ null && (MDCTopAppBarFoundation)));\n//# sourceMappingURL=foundation.js.map\n;// ./node_modules/@material/top-app-bar/fixed/foundation.js\n/**\n * @license\n * Copyright 2018 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the "Software"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n\n\nvar MDCFixedTopAppBarFoundation = /** @class */ (function (_super) {\n    __extends(MDCFixedTopAppBarFoundation, _super);\n    function MDCFixedTopAppBarFoundation() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        /**\n         * State variable for the previous scroll iteration top app bar state\n         */\n        _this.wasScrolled_ = false;\n        return _this;\n    }\n    /**\n     * Scroll handler for applying/removing the modifier class on the fixed top app bar.\n     * @override\n     */\n    MDCFixedTopAppBarFoundation.prototype.handleTargetScroll = function () {\n        var currentScroll = this.adapter_.getViewportScrollY();\n        if (currentScroll <= 0) {\n            if (this.wasScrolled_) {\n                this.adapter_.removeClass(constants_cssClasses.FIXED_SCROLLED_CLASS);\n                this.wasScrolled_ = false;\n            }\n        }\n        else {\n            if (!this.wasScrolled_) {\n                this.adapter_.addClass(constants_cssClasses.FIXED_SCROLLED_CLASS);\n                this.wasScrolled_ = true;\n            }\n        }\n    };\n    return MDCFixedTopAppBarFoundation;\n}(MDCTopAppBarFoundation));\n\n// tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.\n/* harmony default export */ const fixed_foundation = ((/* unused pure expression or super */ null && (MDCFixedTopAppBarFoundation)));\n//# sourceMappingURL=foundation.js.map\n;// ./node_modules/@material/top-app-bar/short/foundation.js\n/**\n * @license\n * Copyright 2018 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the "Software"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n\n\nvar MDCShortTopAppBarFoundation = /** @class */ (function (_super) {\n    __extends(MDCShortTopAppBarFoundation, _super);\n    /* istanbul ignore next: optional argument is not a branch statement */\n    function MDCShortTopAppBarFoundation(adapter) {\n        var _this = _super.call(this, adapter) || this;\n        _this.isCollapsed_ = false;\n        _this.isAlwaysCollapsed_ = false;\n        return _this;\n    }\n    Object.defineProperty(MDCShortTopAppBarFoundation.prototype, "isCollapsed", {\n        // Public visibility for backward compatibility.\n        get: function () {\n            return this.isCollapsed_;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    MDCShortTopAppBarFoundation.prototype.init = function () {\n        _super.prototype.init.call(this);\n        if (this.adapter_.getTotalActionItems() > 0) {\n            this.adapter_.addClass(constants_cssClasses.SHORT_HAS_ACTION_ITEM_CLASS);\n        }\n        // If initialized with SHORT_COLLAPSED_CLASS, the bar should always be collapsed\n        this.setAlwaysCollapsed(this.adapter_.hasClass(constants_cssClasses.SHORT_COLLAPSED_CLASS));\n    };\n    /**\n     * Set if the short top app bar should always be collapsed.\n     *\n     * @param value When `true`, bar will always be collapsed. When `false`, bar may collapse or expand based on scroll.\n     */\n    MDCShortTopAppBarFoundation.prototype.setAlwaysCollapsed = function (value) {\n        this.isAlwaysCollapsed_ = !!value;\n        if (this.isAlwaysCollapsed_) {\n            this.collapse_();\n        }\n        else {\n            // let maybeCollapseBar_ determine if the bar should be collapsed\n            this.maybeCollapseBar_();\n        }\n    };\n    MDCShortTopAppBarFoundation.prototype.getAlwaysCollapsed = function () {\n        return this.isAlwaysCollapsed_;\n    };\n    /**\n     * Scroll handler for applying/removing the collapsed modifier class on the short top app bar.\n     * @override\n     */\n    MDCShortTopAppBarFoundation.prototype.handleTargetScroll = function () {\n        this.maybeCollapseBar_();\n    };\n    MDCShortTopAppBarFoundation.prototype.maybeCollapseBar_ = function () {\n        if (this.isAlwaysCollapsed_) {\n            return;\n        }\n        var currentScroll = this.adapter_.getViewportScrollY();\n        if (currentScroll <= 0) {\n            if (this.isCollapsed_) {\n                this.uncollapse_();\n            }\n        }\n        else {\n            if (!this.isCollapsed_) {\n                this.collapse_();\n            }\n        }\n    };\n    MDCShortTopAppBarFoundation.prototype.uncollapse_ = function () {\n        this.adapter_.removeClass(constants_cssClasses.SHORT_COLLAPSED_CLASS);\n        this.isCollapsed_ = false;\n    };\n    MDCShortTopAppBarFoundation.prototype.collapse_ = function () {\n        this.adapter_.addClass(constants_cssClasses.SHORT_COLLAPSED_CLASS);\n        this.isCollapsed_ = true;\n    };\n    return MDCShortTopAppBarFoundation;\n}(MDCTopAppBarBaseFoundation));\n\n// tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.\n/* harmony default export */ const short_foundation = ((/* unused pure expression or super */ null && (MDCShortTopAppBarFoundation)));\n//# sourceMappingURL=foundation.js.map\n;// ./node_modules/@material/top-app-bar/component.js\n/**\n * @license\n * Copyright 2018 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the "Software"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n\n\n\n\n\n\nvar MDCTopAppBar = /** @class */ (function (_super) {\n    __extends(MDCTopAppBar, _super);\n    function MDCTopAppBar() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    MDCTopAppBar.attachTo = function (root) {\n        return new MDCTopAppBar(root);\n    };\n    MDCTopAppBar.prototype.initialize = function (rippleFactory) {\n        if (rippleFactory === void 0) { rippleFactory = function (el) { return MDCRipple.attachTo(el); }; }\n        this.navIcon_ = this.root_.querySelector(constants_strings.NAVIGATION_ICON_SELECTOR);\n        // Get all icons in the toolbar and instantiate the ripples\n        var icons = [].slice.call(this.root_.querySelectorAll(constants_strings.ACTION_ITEM_SELECTOR));\n        if (this.navIcon_) {\n            icons.push(this.navIcon_);\n        }\n        this.iconRipples_ = icons.map(function (icon) {\n            var ripple = rippleFactory(icon);\n            ripple.unbounded = true;\n            return ripple;\n        });\n        this.scrollTarget_ = window;\n    };\n    MDCTopAppBar.prototype.initialSyncWithDOM = function () {\n        this.handleNavigationClick_ = this.foundation_.handleNavigationClick.bind(this.foundation_);\n        this.handleWindowResize_ = this.foundation_.handleWindowResize.bind(this.foundation_);\n        this.handleTargetScroll_ = this.foundation_.handleTargetScroll.bind(this.foundation_);\n        this.scrollTarget_.addEventListener(\'scroll\', this.handleTargetScroll_);\n        if (this.navIcon_) {\n            this.navIcon_.addEventListener(\'click\', this.handleNavigationClick_);\n        }\n        var isFixed = this.root_.classList.contains(constants_cssClasses.FIXED_CLASS);\n        var isShort = this.root_.classList.contains(constants_cssClasses.SHORT_CLASS);\n        if (!isShort && !isFixed) {\n            window.addEventListener(\'resize\', this.handleWindowResize_);\n        }\n    };\n    MDCTopAppBar.prototype.destroy = function () {\n        this.iconRipples_.forEach(function (iconRipple) { return iconRipple.destroy(); });\n        this.scrollTarget_.removeEventListener(\'scroll\', this.handleTargetScroll_);\n        if (this.navIcon_) {\n            this.navIcon_.removeEventListener(\'click\', this.handleNavigationClick_);\n        }\n        var isFixed = this.root_.classList.contains(constants_cssClasses.FIXED_CLASS);\n        var isShort = this.root_.classList.contains(constants_cssClasses.SHORT_CLASS);\n        if (!isShort && !isFixed) {\n            window.removeEventListener(\'resize\', this.handleWindowResize_);\n        }\n        _super.prototype.destroy.call(this);\n    };\n    MDCTopAppBar.prototype.setScrollTarget = function (target) {\n        // Remove scroll handler from the previous scroll target\n        this.scrollTarget_.removeEventListener(\'scroll\', this.handleTargetScroll_);\n        this.scrollTarget_ = target;\n        // Initialize scroll handler on the new scroll target\n        this.handleTargetScroll_ =\n            this.foundation_.handleTargetScroll.bind(this.foundation_);\n        this.scrollTarget_.addEventListener(\'scroll\', this.handleTargetScroll_);\n    };\n    MDCTopAppBar.prototype.getDefaultFoundation = function () {\n        var _this = this;\n        // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.\n        // To ensure we don\'t accidentally omit any methods, we need a separate, strongly typed adapter variable.\n        // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.\n        var adapter = {\n            hasClass: function (className) { return _this.root_.classList.contains(className); },\n            addClass: function (className) { return _this.root_.classList.add(className); },\n            removeClass: function (className) { return _this.root_.classList.remove(className); },\n            setStyle: function (property, value) { return _this.root_.style.setProperty(property, value); },\n            getTopAppBarHeight: function () { return _this.root_.clientHeight; },\n            notifyNavigationIconClicked: function () { return _this.emit(constants_strings.NAVIGATION_EVENT, {}); },\n            getViewportScrollY: function () {\n                var win = _this.scrollTarget_;\n                var el = _this.scrollTarget_;\n                return win.pageYOffset !== undefined ? win.pageYOffset : el.scrollTop;\n            },\n            getTotalActionItems: function () { return _this.root_.querySelectorAll(constants_strings.ACTION_ITEM_SELECTOR).length; },\n        };\n        // tslint:enable:object-literal-sort-keys\n        var foundation;\n        if (this.root_.classList.contains(constants_cssClasses.SHORT_CLASS)) {\n            foundation = new MDCShortTopAppBarFoundation(adapter);\n        }\n        else if (this.root_.classList.contains(constants_cssClasses.FIXED_CLASS)) {\n            foundation = new MDCFixedTopAppBarFoundation(adapter);\n        }\n        else {\n            foundation = new MDCTopAppBarFoundation(adapter);\n        }\n        return foundation;\n    };\n    return MDCTopAppBar;\n}(MDCComponent));\n\n//# sourceMappingURL=component.js.map\n;// ./node_modules/@material/dom/focus-trap.js\n/**\n * @license\n * Copyright 2020 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the "Software"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nvar FOCUS_SENTINEL_CLASS = \'mdc-dom-focus-sentinel\';\n/**\n * Utility to trap focus in a given root element, e.g. for modal components such\n * as dialogs. The root should have at least one focusable child element,\n * for setting initial focus when trapping focus.\n * Also tracks the previously focused element, and restores focus to that\n * element when releasing focus.\n */\nvar FocusTrap = /** @class */ (function () {\n    function FocusTrap(root, options) {\n        if (options === void 0) { options = {}; }\n        this.root = root;\n        this.options = options;\n        // Previously focused element before trapping focus.\n        this.elFocusedBeforeTrapFocus = null;\n    }\n    /**\n     * Traps focus in `root`. Also focuses on either `initialFocusEl` if set;\n     * otherwises sets initial focus to the first focusable child element.\n     */\n    FocusTrap.prototype.trapFocus = function () {\n        var focusableEls = this.getFocusableElements(this.root);\n        if (focusableEls.length === 0) {\n            throw new Error(\'FocusTrap: Element must have at least one focusable child.\');\n        }\n        this.elFocusedBeforeTrapFocus =\n            document.activeElement instanceof HTMLElement ? document.activeElement :\n                null;\n        this.wrapTabFocus(this.root, focusableEls);\n        if (!this.options.skipInitialFocus) {\n            this.focusInitialElement(focusableEls, this.options.initialFocusEl);\n        }\n    };\n    /**\n     * Releases focus from `root`. Also restores focus to the previously focused\n     * element.\n     */\n    FocusTrap.prototype.releaseFocus = function () {\n        [].slice.call(this.root.querySelectorAll("." + FOCUS_SENTINEL_CLASS))\n            .forEach(function (sentinelEl) {\n            sentinelEl.parentElement.removeChild(sentinelEl);\n        });\n        if (this.elFocusedBeforeTrapFocus) {\n            this.elFocusedBeforeTrapFocus.focus();\n        }\n    };\n    /**\n     * Wraps tab focus within `el` by adding two hidden sentinel divs which are\n     * used to mark the beginning and the end of the tabbable region. When\n     * focused, these sentinel elements redirect focus to the first/last\n     * children elements of the tabbable region, ensuring that focus is trapped\n     * within that region.\n     */\n    FocusTrap.prototype.wrapTabFocus = function (el, focusableEls) {\n        var sentinelStart = this.createSentinel();\n        var sentinelEnd = this.createSentinel();\n        sentinelStart.addEventListener(\'focus\', function () {\n            if (focusableEls.length > 0) {\n                focusableEls[focusableEls.length - 1].focus();\n            }\n        });\n        sentinelEnd.addEventListener(\'focus\', function () {\n            if (focusableEls.length > 0) {\n                focusableEls[0].focus();\n            }\n        });\n        el.insertBefore(sentinelStart, el.children[0]);\n        el.appendChild(sentinelEnd);\n    };\n    /**\n     * Focuses on `initialFocusEl` if defined and a child of the root element.\n     * Otherwise, focuses on the first focusable child element of the root.\n     */\n    FocusTrap.prototype.focusInitialElement = function (focusableEls, initialFocusEl) {\n        var focusIndex = 0;\n        if (initialFocusEl) {\n            focusIndex = Math.max(focusableEls.indexOf(initialFocusEl), 0);\n        }\n        focusableEls[focusIndex].focus();\n    };\n    FocusTrap.prototype.getFocusableElements = function (root) {\n        var focusableEls = [].slice.call(root.querySelectorAll(\'[autofocus], [tabindex], a, input, textarea, select, button\'));\n        return focusableEls.filter(function (el) {\n            var isDisabledOrHidden = el.getAttribute(\'aria-disabled\') === \'true\' ||\n                el.getAttribute(\'disabled\') != null ||\n                el.getAttribute(\'hidden\') != null ||\n                el.getAttribute(\'aria-hidden\') === \'true\';\n            var isTabbableAndVisible = el.tabIndex >= 0 &&\n                el.getBoundingClientRect().width > 0 &&\n                !el.classList.contains(FOCUS_SENTINEL_CLASS) && !isDisabledOrHidden;\n            var isProgrammaticallyHidden = false;\n            if (isTabbableAndVisible) {\n                var style = getComputedStyle(el);\n                isProgrammaticallyHidden =\n                    style.display === \'none\' || style.visibility === \'hidden\';\n            }\n            return isTabbableAndVisible && !isProgrammaticallyHidden;\n        });\n    };\n    FocusTrap.prototype.createSentinel = function () {\n        var sentinel = document.createElement(\'div\');\n        sentinel.setAttribute(\'tabindex\', \'0\');\n        // Don\'t announce in screen readers.\n        sentinel.setAttribute(\'aria-hidden\', \'true\');\n        sentinel.classList.add(FOCUS_SENTINEL_CLASS);\n        return sentinel;\n    };\n    return FocusTrap;\n}());\n\n//# sourceMappingURL=focus-trap.js.map\n;// ./node_modules/@material/list/constants.js\n/**\n * @license\n * Copyright 2018 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the "Software"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nvar list_constants_cssClasses = {\n    LIST_ITEM_ACTIVATED_CLASS: \'mdc-list-item--activated\',\n    LIST_ITEM_CLASS: \'mdc-list-item\',\n    LIST_ITEM_DISABLED_CLASS: \'mdc-list-item--disabled\',\n    LIST_ITEM_SELECTED_CLASS: \'mdc-list-item--selected\',\n    ROOT: \'mdc-list\',\n};\nvar list_constants_strings = {\n    ACTION_EVENT: \'MDCList:action\',\n    ARIA_CHECKED: \'aria-checked\',\n    ARIA_CHECKED_CHECKBOX_SELECTOR: \'[role="checkbox"][aria-checked="true"]\',\n    ARIA_CHECKED_RADIO_SELECTOR: \'[role="radio"][aria-checked="true"]\',\n    ARIA_CURRENT: \'aria-current\',\n    ARIA_DISABLED: \'aria-disabled\',\n    ARIA_ORIENTATION: \'aria-orientation\',\n    ARIA_ORIENTATION_HORIZONTAL: \'horizontal\',\n    ARIA_ROLE_CHECKBOX_SELECTOR: \'[role="checkbox"]\',\n    ARIA_SELECTED: \'aria-selected\',\n    CHECKBOX_RADIO_SELECTOR: \'input[type="checkbox"], input[type="radio"]\',\n    CHECKBOX_SELECTOR: \'input[type="checkbox"]\',\n    CHILD_ELEMENTS_TO_TOGGLE_TABINDEX: "\\n    ." + list_constants_cssClasses.LIST_ITEM_CLASS + " button:not(:disabled),\\n    ." + list_constants_cssClasses.LIST_ITEM_CLASS + " a\\n  ",\n    FOCUSABLE_CHILD_ELEMENTS: "\\n    ." + list_constants_cssClasses.LIST_ITEM_CLASS + " button:not(:disabled),\\n    ." + list_constants_cssClasses.LIST_ITEM_CLASS + " a,\\n    ." + list_constants_cssClasses.LIST_ITEM_CLASS + " input[type=\\"radio\\"]:not(:disabled),\\n    ." + list_constants_cssClasses.LIST_ITEM_CLASS + " input[type=\\"checkbox\\"]:not(:disabled)\\n  ",\n    RADIO_SELECTOR: \'input[type="radio"]\',\n};\nvar list_constants_numbers = {\n    UNSET_INDEX: -1,\n};\n\n//# sourceMappingURL=constants.js.map\n;// ./node_modules/@material/list/foundation.js\n/**\n * @license\n * Copyright 2018 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the "Software"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n\n\nvar ELEMENTS_KEY_ALLOWED_IN = [\'input\', \'button\', \'textarea\', \'select\'];\nfunction foundation_isNumberArray(selectedIndex) {\n    return selectedIndex instanceof Array;\n}\nvar MDCListFoundation = /** @class */ (function (_super) {\n    __extends(MDCListFoundation, _super);\n    function MDCListFoundation(adapter) {\n        var _this = _super.call(this, __assign({}, MDCListFoundation.defaultAdapter, adapter)) || this;\n        _this.wrapFocus_ = false;\n        _this.isVertical_ = true;\n        _this.isSingleSelectionList_ = false;\n        _this.selectedIndex_ = list_constants_numbers.UNSET_INDEX;\n        _this.focusedItemIndex_ = list_constants_numbers.UNSET_INDEX;\n        _this.useActivatedClass_ = false;\n        _this.ariaCurrentAttrValue_ = null;\n        _this.isCheckboxList_ = false;\n        _this.isRadioList_ = false;\n        return _this;\n    }\n    Object.defineProperty(MDCListFoundation, "strings", {\n        get: function () {\n            return list_constants_strings;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MDCListFoundation, "cssClasses", {\n        get: function () {\n            return list_constants_cssClasses;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MDCListFoundation, "numbers", {\n        get: function () {\n            return list_constants_numbers;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MDCListFoundation, "defaultAdapter", {\n        get: function () {\n            return {\n                addClassForElementIndex: function () { return undefined; },\n                focusItemAtIndex: function () { return undefined; },\n                getAttributeForElementIndex: function () { return null; },\n                getFocusedElementIndex: function () { return 0; },\n                getListItemCount: function () { return 0; },\n                hasCheckboxAtIndex: function () { return false; },\n                hasRadioAtIndex: function () { return false; },\n                isCheckboxCheckedAtIndex: function () { return false; },\n                isFocusInsideList: function () { return false; },\n                isRootFocused: function () { return false; },\n                listItemAtIndexHasClass: function () { return false; },\n                notifyAction: function () { return undefined; },\n                removeClassForElementIndex: function () { return undefined; },\n                setAttributeForElementIndex: function () { return undefined; },\n                setCheckedCheckboxOrRadioAtIndex: function () { return undefined; },\n                setTabIndexForListItemChildren: function () { return undefined; },\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    MDCListFoundation.prototype.layout = function () {\n        if (this.adapter_.getListItemCount() === 0) {\n            return;\n        }\n        if (this.adapter_.hasCheckboxAtIndex(0)) {\n            this.isCheckboxList_ = true;\n        }\n        else if (this.adapter_.hasRadioAtIndex(0)) {\n            this.isRadioList_ = true;\n        }\n    };\n    /**\n     * Sets the private wrapFocus_ variable.\n     */\n    MDCListFoundation.prototype.setWrapFocus = function (value) {\n        this.wrapFocus_ = value;\n    };\n    /**\n     * Sets the isVertical_ private variable.\n     */\n    MDCListFoundation.prototype.setVerticalOrientation = function (value) {\n        this.isVertical_ = value;\n    };\n    /**\n     * Sets the isSingleSelectionList_ private variable.\n     */\n    MDCListFoundation.prototype.setSingleSelection = function (value) {\n        this.isSingleSelectionList_ = value;\n    };\n    /**\n     * Sets the useActivatedClass_ private variable.\n     */\n    MDCListFoundation.prototype.setUseActivatedClass = function (useActivated) {\n        this.useActivatedClass_ = useActivated;\n    };\n    MDCListFoundation.prototype.getSelectedIndex = function () {\n        return this.selectedIndex_;\n    };\n    MDCListFoundation.prototype.setSelectedIndex = function (index) {\n        if (!this.isIndexValid_(index)) {\n            return;\n        }\n        if (this.isCheckboxList_) {\n            this.setCheckboxAtIndex_(index);\n        }\n        else if (this.isRadioList_) {\n            this.setRadioAtIndex_(index);\n        }\n        else {\n            this.setSingleSelectionAtIndex_(index);\n        }\n    };\n    /**\n     * Focus in handler for the list items.\n     */\n    MDCListFoundation.prototype.handleFocusIn = function (_, listItemIndex) {\n        if (listItemIndex >= 0) {\n            this.adapter_.setTabIndexForListItemChildren(listItemIndex, \'0\');\n        }\n    };\n    /**\n     * Focus out handler for the list items.\n     */\n    MDCListFoundation.prototype.handleFocusOut = function (_, listItemIndex) {\n        var _this = this;\n        if (listItemIndex >= 0) {\n            this.adapter_.setTabIndexForListItemChildren(listItemIndex, \'-1\');\n        }\n        /**\n         * Between Focusout & Focusin some browsers do not have focus on any element. Setting a delay to wait till the focus\n         * is moved to next element.\n         */\n        setTimeout(function () {\n            if (!_this.adapter_.isFocusInsideList()) {\n                _this.setTabindexToFirstSelectedItem_();\n            }\n        }, 0);\n    };\n    /**\n     * Key handler for the list.\n     */\n    MDCListFoundation.prototype.handleKeydown = function (evt, isRootListItem, listItemIndex) {\n        var isArrowLeft = evt.key === \'ArrowLeft\' || evt.keyCode === 37;\n        var isArrowUp = evt.key === \'ArrowUp\' || evt.keyCode === 38;\n        var isArrowRight = evt.key === \'ArrowRight\' || evt.keyCode === 39;\n        var isArrowDown = evt.key === \'ArrowDown\' || evt.keyCode === 40;\n        var isHome = evt.key === \'Home\' || evt.keyCode === 36;\n        var isEnd = evt.key === \'End\' || evt.keyCode === 35;\n        var isEnter = evt.key === \'Enter\' || evt.keyCode === 13;\n        var isSpace = evt.key === \'Space\' || evt.keyCode === 32;\n        if (this.adapter_.isRootFocused()) {\n            if (isArrowUp || isEnd) {\n                evt.preventDefault();\n                this.focusLastElement();\n            }\n            else if (isArrowDown || isHome) {\n                evt.preventDefault();\n                this.focusFirstElement();\n            }\n            return;\n        }\n        var currentIndex = this.adapter_.getFocusedElementIndex();\n        if (currentIndex === -1) {\n            currentIndex = listItemIndex;\n            if (currentIndex < 0) {\n                // If this event doesn\'t have a mdc-list-item ancestor from the\n                // current list (not from a sublist), return early.\n                return;\n            }\n        }\n        var nextIndex;\n        if ((this.isVertical_ && isArrowDown) || (!this.isVertical_ && isArrowRight)) {\n            this.preventDefaultEvent_(evt);\n            nextIndex = this.focusNextElement(currentIndex);\n        }\n        else if ((this.isVertical_ && isArrowUp) || (!this.isVertical_ && isArrowLeft)) {\n            this.preventDefaultEvent_(evt);\n            nextIndex = this.focusPrevElement(currentIndex);\n        }\n        else if (isHome) {\n            this.preventDefaultEvent_(evt);\n            nextIndex = this.focusFirstElement();\n        }\n        else if (isEnd) {\n            this.preventDefaultEvent_(evt);\n            nextIndex = this.focusLastElement();\n        }\n        else if (isEnter || isSpace) {\n            if (isRootListItem) {\n                // Return early if enter key is pressed on anchor element which triggers synthetic MouseEvent event.\n                var target = evt.target;\n                if (target && target.tagName === \'A\' && isEnter) {\n                    return;\n                }\n                this.preventDefaultEvent_(evt);\n                if (this.isSelectableList_()) {\n                    this.setSelectedIndexOnAction_(currentIndex);\n                }\n                this.adapter_.notifyAction(currentIndex);\n            }\n        }\n        this.focusedItemIndex_ = currentIndex;\n        if (nextIndex !== undefined) {\n            this.setTabindexAtIndex_(nextIndex);\n            this.focusedItemIndex_ = nextIndex;\n        }\n    };\n    /**\n     * Click handler for the list.\n     */\n    MDCListFoundation.prototype.handleClick = function (index, toggleCheckbox) {\n        if (index === list_constants_numbers.UNSET_INDEX) {\n            return;\n        }\n        if (this.isSelectableList_()) {\n            this.setSelectedIndexOnAction_(index, toggleCheckbox);\n        }\n        this.adapter_.notifyAction(index);\n        this.setTabindexAtIndex_(index);\n        this.focusedItemIndex_ = index;\n    };\n    /**\n     * Focuses the next element on the list.\n     */\n    MDCListFoundation.prototype.focusNextElement = function (index) {\n        var count = this.adapter_.getListItemCount();\n        var nextIndex = index + 1;\n        if (nextIndex >= count) {\n            if (this.wrapFocus_) {\n                nextIndex = 0;\n            }\n            else {\n                // Return early because last item is already focused.\n                return index;\n            }\n        }\n        this.adapter_.focusItemAtIndex(nextIndex);\n        return nextIndex;\n    };\n    /**\n     * Focuses the previous element on the list.\n     */\n    MDCListFoundation.prototype.focusPrevElement = function (index) {\n        var prevIndex = index - 1;\n        if (prevIndex < 0) {\n            if (this.wrapFocus_) {\n                prevIndex = this.adapter_.getListItemCount() - 1;\n            }\n            else {\n                // Return early because first item is already focused.\n                return index;\n            }\n        }\n        this.adapter_.focusItemAtIndex(prevIndex);\n        return prevIndex;\n    };\n    MDCListFoundation.prototype.focusFirstElement = function () {\n        this.adapter_.focusItemAtIndex(0);\n        return 0;\n    };\n    MDCListFoundation.prototype.focusLastElement = function () {\n        var lastIndex = this.adapter_.getListItemCount() - 1;\n        this.adapter_.focusItemAtIndex(lastIndex);\n        return lastIndex;\n    };\n    /**\n     * @param itemIndex Index of the list item\n     * @param isEnabled Sets the list item to enabled or disabled.\n     */\n    MDCListFoundation.prototype.setEnabled = function (itemIndex, isEnabled) {\n        if (!this.isIndexValid_(itemIndex)) {\n            return;\n        }\n        if (isEnabled) {\n            this.adapter_.removeClassForElementIndex(itemIndex, list_constants_cssClasses.LIST_ITEM_DISABLED_CLASS);\n            this.adapter_.setAttributeForElementIndex(itemIndex, list_constants_strings.ARIA_DISABLED, \'false\');\n        }\n        else {\n            this.adapter_.addClassForElementIndex(itemIndex, list_constants_cssClasses.LIST_ITEM_DISABLED_CLASS);\n            this.adapter_.setAttributeForElementIndex(itemIndex, list_constants_strings.ARIA_DISABLED, \'true\');\n        }\n    };\n    /**\n     * Ensures that preventDefault is only called if the containing element doesn\'t\n     * consume the event, and it will cause an unintended scroll.\n     */\n    MDCListFoundation.prototype.preventDefaultEvent_ = function (evt) {\n        var target = evt.target;\n        var tagName = ("" + target.tagName).toLowerCase();\n        if (ELEMENTS_KEY_ALLOWED_IN.indexOf(tagName) === -1) {\n            evt.preventDefault();\n        }\n    };\n    MDCListFoundation.prototype.setSingleSelectionAtIndex_ = function (index) {\n        if (this.selectedIndex_ === index) {\n            return;\n        }\n        var selectedClassName = list_constants_cssClasses.LIST_ITEM_SELECTED_CLASS;\n        if (this.useActivatedClass_) {\n            selectedClassName = list_constants_cssClasses.LIST_ITEM_ACTIVATED_CLASS;\n        }\n        if (this.selectedIndex_ !== list_constants_numbers.UNSET_INDEX) {\n            this.adapter_.removeClassForElementIndex(this.selectedIndex_, selectedClassName);\n        }\n        this.adapter_.addClassForElementIndex(index, selectedClassName);\n        this.setAriaForSingleSelectionAtIndex_(index);\n        this.selectedIndex_ = index;\n    };\n    /**\n     * Sets aria attribute for single selection at given index.\n     */\n    MDCListFoundation.prototype.setAriaForSingleSelectionAtIndex_ = function (index) {\n        // Detect the presence of aria-current and get the value only during list initialization when it is in unset state.\n        if (this.selectedIndex_ === list_constants_numbers.UNSET_INDEX) {\n            this.ariaCurrentAttrValue_ =\n                this.adapter_.getAttributeForElementIndex(index, list_constants_strings.ARIA_CURRENT);\n        }\n        var isAriaCurrent = this.ariaCurrentAttrValue_ !== null;\n        var ariaAttribute = isAriaCurrent ? list_constants_strings.ARIA_CURRENT : list_constants_strings.ARIA_SELECTED;\n        if (this.selectedIndex_ !== list_constants_numbers.UNSET_INDEX) {\n            this.adapter_.setAttributeForElementIndex(this.selectedIndex_, ariaAttribute, \'false\');\n        }\n        var ariaAttributeValue = isAriaCurrent ? this.ariaCurrentAttrValue_ : \'true\';\n        this.adapter_.setAttributeForElementIndex(index, ariaAttribute, ariaAttributeValue);\n    };\n    /**\n     * Toggles radio at give index. Radio doesn\'t change the checked state if it is already checked.\n     */\n    MDCListFoundation.prototype.setRadioAtIndex_ = function (index) {\n        this.adapter_.setCheckedCheckboxOrRadioAtIndex(index, true);\n        if (this.selectedIndex_ !== list_constants_numbers.UNSET_INDEX) {\n            this.adapter_.setAttributeForElementIndex(this.selectedIndex_, list_constants_strings.ARIA_CHECKED, \'false\');\n        }\n        this.adapter_.setAttributeForElementIndex(index, list_constants_strings.ARIA_CHECKED, \'true\');\n        this.selectedIndex_ = index;\n    };\n    MDCListFoundation.prototype.setCheckboxAtIndex_ = function (index) {\n        for (var i = 0; i < this.adapter_.getListItemCount(); i++) {\n            var isChecked = false;\n            if (index.indexOf(i) >= 0) {\n                isChecked = true;\n            }\n            this.adapter_.setCheckedCheckboxOrRadioAtIndex(i, isChecked);\n            this.adapter_.setAttributeForElementIndex(i, list_constants_strings.ARIA_CHECKED, isChecked ? \'true\' : \'false\');\n        }\n        this.selectedIndex_ = index;\n    };\n    MDCListFoundation.prototype.setTabindexAtIndex_ = function (index) {\n        if (this.focusedItemIndex_ === list_constants_numbers.UNSET_INDEX && index !== 0) {\n            // If no list item was selected set first list item\'s tabindex to -1.\n            // Generally, tabindex is set to 0 on first list item of list that has no preselected items.\n            this.adapter_.setAttributeForElementIndex(0, \'tabindex\', \'-1\');\n        }\n        else if (this.focusedItemIndex_ >= 0 && this.focusedItemIndex_ !== index) {\n            this.adapter_.setAttributeForElementIndex(this.focusedItemIndex_, \'tabindex\', \'-1\');\n        }\n        this.adapter_.setAttributeForElementIndex(index, \'tabindex\', \'0\');\n    };\n    /**\n     * @return Return true if it is single selectin list, checkbox list or radio list.\n     */\n    MDCListFoundation.prototype.isSelectableList_ = function () {\n        return this.isSingleSelectionList_ || this.isCheckboxList_ || this.isRadioList_;\n    };\n    MDCListFoundation.prototype.setTabindexToFirstSelectedItem_ = function () {\n        var targetIndex = 0;\n        if (this.isSelectableList_()) {\n            if (typeof this.selectedIndex_ === \'number\' && this.selectedIndex_ !== list_constants_numbers.UNSET_INDEX) {\n                targetIndex = this.selectedIndex_;\n            }\n            else if (foundation_isNumberArray(this.selectedIndex_) && this.selectedIndex_.length > 0) {\n                targetIndex = this.selectedIndex_.reduce(function (currentIndex, minIndex) { return Math.min(currentIndex, minIndex); });\n            }\n        }\n        this.setTabindexAtIndex_(targetIndex);\n    };\n    MDCListFoundation.prototype.isIndexValid_ = function (index) {\n        var _this = this;\n        if (index instanceof Array) {\n            if (!this.isCheckboxList_) {\n                throw new Error(\'MDCListFoundation: Array of index is only supported for checkbox based list\');\n            }\n            if (index.length === 0) {\n                return true;\n            }\n            else {\n                return index.some(function (i) { return _this.isIndexInRange_(i); });\n            }\n        }\n        else if (typeof index === \'number\') {\n            if (this.isCheckboxList_) {\n                throw new Error(\'MDCListFoundation: Expected array of index for checkbox based list but got number: \' + index);\n            }\n            return this.isIndexInRange_(index);\n        }\n        else {\n            return false;\n        }\n    };\n    MDCListFoundation.prototype.isIndexInRange_ = function (index) {\n        var listSize = this.adapter_.getListItemCount();\n        return index >= 0 && index < listSize;\n    };\n    /**\n     * Sets selected index on user action, toggles checkbox / radio based on toggleCheckbox value.\n     * User interaction should not toggle list item(s) when disabled.\n     */\n    MDCListFoundation.prototype.setSelectedIndexOnAction_ = function (index, toggleCheckbox) {\n        if (toggleCheckbox === void 0) { toggleCheckbox = true; }\n        if (this.adapter_.listItemAtIndexHasClass(index, list_constants_cssClasses.LIST_ITEM_DISABLED_CLASS)) {\n            return;\n        }\n        if (this.isCheckboxList_) {\n            this.toggleCheckboxAtIndex_(index, toggleCheckbox);\n        }\n        else {\n            this.setSelectedIndex(index);\n        }\n    };\n    MDCListFoundation.prototype.toggleCheckboxAtIndex_ = function (index, toggleCheckbox) {\n        var isChecked = this.adapter_.isCheckboxCheckedAtIndex(index);\n        if (toggleCheckbox) {\n            isChecked = !isChecked;\n            this.adapter_.setCheckedCheckboxOrRadioAtIndex(index, isChecked);\n        }\n        this.adapter_.setAttributeForElementIndex(index, list_constants_strings.ARIA_CHECKED, isChecked ? \'true\' : \'false\');\n        // If none of the checkbox items are selected and selectedIndex is not initialized then provide a default value.\n        var selectedIndexes = this.selectedIndex_ === list_constants_numbers.UNSET_INDEX ? [] : this.selectedIndex_.slice();\n        if (isChecked) {\n            selectedIndexes.push(index);\n        }\n        else {\n            selectedIndexes = selectedIndexes.filter(function (i) { return i !== index; });\n        }\n        this.selectedIndex_ = selectedIndexes;\n    };\n    return MDCListFoundation;\n}(MDCFoundation));\n\n// tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.\n/* harmony default export */ const list_foundation = ((/* unused pure expression or super */ null && (MDCListFoundation)));\n//# sourceMappingURL=foundation.js.map\n;// ./node_modules/@material/list/component.js\n/**\n * @license\n * Copyright 2018 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the "Software"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n\n\n\n\nvar MDCList = /** @class */ (function (_super) {\n    __extends(MDCList, _super);\n    function MDCList() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Object.defineProperty(MDCList.prototype, "vertical", {\n        set: function (value) {\n            this.foundation_.setVerticalOrientation(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MDCList.prototype, "listElements", {\n        get: function () {\n            return [].slice.call(this.root_.querySelectorAll("." + list_constants_cssClasses.LIST_ITEM_CLASS));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MDCList.prototype, "wrapFocus", {\n        set: function (value) {\n            this.foundation_.setWrapFocus(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MDCList.prototype, "singleSelection", {\n        set: function (isSingleSelectionList) {\n            this.foundation_.setSingleSelection(isSingleSelectionList);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MDCList.prototype, "selectedIndex", {\n        get: function () {\n            return this.foundation_.getSelectedIndex();\n        },\n        set: function (index) {\n            this.foundation_.setSelectedIndex(index);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    MDCList.attachTo = function (root) {\n        return new MDCList(root);\n    };\n    MDCList.prototype.initialSyncWithDOM = function () {\n        this.handleClick_ = this.handleClickEvent_.bind(this);\n        this.handleKeydown_ = this.handleKeydownEvent_.bind(this);\n        this.focusInEventListener_ = this.handleFocusInEvent_.bind(this);\n        this.focusOutEventListener_ = this.handleFocusOutEvent_.bind(this);\n        this.listen(\'keydown\', this.handleKeydown_);\n        this.listen(\'click\', this.handleClick_);\n        this.listen(\'focusin\', this.focusInEventListener_);\n        this.listen(\'focusout\', this.focusOutEventListener_);\n        this.layout();\n        this.initializeListType();\n    };\n    MDCList.prototype.destroy = function () {\n        this.unlisten(\'keydown\', this.handleKeydown_);\n        this.unlisten(\'click\', this.handleClick_);\n        this.unlisten(\'focusin\', this.focusInEventListener_);\n        this.unlisten(\'focusout\', this.focusOutEventListener_);\n    };\n    MDCList.prototype.layout = function () {\n        var direction = this.root_.getAttribute(list_constants_strings.ARIA_ORIENTATION);\n        this.vertical = direction !== list_constants_strings.ARIA_ORIENTATION_HORIZONTAL;\n        // List items need to have at least tabindex=-1 to be focusable.\n        [].slice.call(this.root_.querySelectorAll(\'.mdc-list-item:not([tabindex])\'))\n            .forEach(function (el) {\n            el.setAttribute(\'tabindex\', \'-1\');\n        });\n        // Child button/a elements are not tabbable until the list item is focused.\n        [].slice.call(this.root_.querySelectorAll(list_constants_strings.FOCUSABLE_CHILD_ELEMENTS))\n            .forEach(function (el) { return el.setAttribute(\'tabindex\', \'-1\'); });\n        this.foundation_.layout();\n    };\n    /**\n     * Initialize selectedIndex value based on pre-selected checkbox list items, single selection or radio.\n     */\n    MDCList.prototype.initializeListType = function () {\n        var _this = this;\n        var checkboxListItems = this.root_.querySelectorAll(list_constants_strings.ARIA_ROLE_CHECKBOX_SELECTOR);\n        var singleSelectedListItem = this.root_.querySelector("\\n      ." + list_constants_cssClasses.LIST_ITEM_ACTIVATED_CLASS + ",\\n      ." + list_constants_cssClasses.LIST_ITEM_SELECTED_CLASS + "\\n    ");\n        var radioSelectedListItem = this.root_.querySelector(list_constants_strings.ARIA_CHECKED_RADIO_SELECTOR);\n        if (checkboxListItems.length) {\n            var preselectedItems = this.root_.querySelectorAll(list_constants_strings.ARIA_CHECKED_CHECKBOX_SELECTOR);\n            this.selectedIndex =\n                [].map.call(preselectedItems, function (listItem) { return _this.listElements.indexOf(listItem); });\n        }\n        else if (singleSelectedListItem) {\n            if (singleSelectedListItem.classList.contains(list_constants_cssClasses.LIST_ITEM_ACTIVATED_CLASS)) {\n                this.foundation_.setUseActivatedClass(true);\n            }\n            this.singleSelection = true;\n            this.selectedIndex = this.listElements.indexOf(singleSelectedListItem);\n        }\n        else if (radioSelectedListItem) {\n            this.selectedIndex = this.listElements.indexOf(radioSelectedListItem);\n        }\n    };\n    /**\n     * Updates the list item at itemIndex to the desired isEnabled state.\n     * @param itemIndex Index of the list item\n     * @param isEnabled Sets the list item to enabled or disabled.\n     */\n    MDCList.prototype.setEnabled = function (itemIndex, isEnabled) {\n        this.foundation_.setEnabled(itemIndex, isEnabled);\n    };\n    MDCList.prototype.getDefaultFoundation = function () {\n        var _this = this;\n        // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.\n        // To ensure we don\'t accidentally omit any methods, we need a separate, strongly typed adapter variable.\n        var adapter = {\n            addClassForElementIndex: function (index, className) {\n                var element = _this.listElements[index];\n                if (element) {\n                    element.classList.add(className);\n                }\n            },\n            focusItemAtIndex: function (index) {\n                var element = _this.listElements[index];\n                if (element) {\n                    element.focus();\n                }\n            },\n            getAttributeForElementIndex: function (index, attr) { return _this.listElements[index].getAttribute(attr); },\n            getFocusedElementIndex: function () { return _this.listElements.indexOf(document.activeElement); },\n            getListItemCount: function () { return _this.listElements.length; },\n            hasCheckboxAtIndex: function (index) {\n                var listItem = _this.listElements[index];\n                return !!listItem.querySelector(list_constants_strings.CHECKBOX_SELECTOR);\n            },\n            hasRadioAtIndex: function (index) {\n                var listItem = _this.listElements[index];\n                return !!listItem.querySelector(list_constants_strings.RADIO_SELECTOR);\n            },\n            isCheckboxCheckedAtIndex: function (index) {\n                var listItem = _this.listElements[index];\n                var toggleEl = listItem.querySelector(list_constants_strings.CHECKBOX_SELECTOR);\n                return toggleEl.checked;\n            },\n            isFocusInsideList: function () {\n                return _this.root_.contains(document.activeElement);\n            },\n            isRootFocused: function () { return document.activeElement === _this.root_; },\n            listItemAtIndexHasClass: function (index, className) { return _this.listElements[index].classList.contains(className); },\n            notifyAction: function (index) {\n                _this.emit(list_constants_strings.ACTION_EVENT, { index: index }, /** shouldBubble */ true);\n            },\n            removeClassForElementIndex: function (index, className) {\n                var element = _this.listElements[index];\n                if (element) {\n                    element.classList.remove(className);\n                }\n            },\n            setAttributeForElementIndex: function (index, attr, value) {\n                var element = _this.listElements[index];\n                if (element) {\n                    element.setAttribute(attr, value);\n                }\n            },\n            setCheckedCheckboxOrRadioAtIndex: function (index, isChecked) {\n                var listItem = _this.listElements[index];\n                var toggleEl = listItem.querySelector(list_constants_strings.CHECKBOX_RADIO_SELECTOR);\n                toggleEl.checked = isChecked;\n                var event = document.createEvent(\'Event\');\n                event.initEvent(\'change\', true, true);\n                toggleEl.dispatchEvent(event);\n            },\n            setTabIndexForListItemChildren: function (listItemIndex, tabIndexValue) {\n                var element = _this.listElements[listItemIndex];\n                var listItemChildren = [].slice.call(element.querySelectorAll(list_constants_strings.CHILD_ELEMENTS_TO_TOGGLE_TABINDEX));\n                listItemChildren.forEach(function (el) { return el.setAttribute(\'tabindex\', tabIndexValue); });\n            },\n        };\n        return new MDCListFoundation(adapter);\n    };\n    /**\n     * Used to figure out which list item this event is targetting. Or returns -1 if\n     * there is no list item\n     */\n    MDCList.prototype.getListItemIndex_ = function (evt) {\n        var eventTarget = evt.target;\n        var nearestParent = closest(eventTarget, "." + list_constants_cssClasses.LIST_ITEM_CLASS + ", ." + list_constants_cssClasses.ROOT);\n        // Get the index of the element if it is a list item.\n        if (nearestParent && matches(nearestParent, "." + list_constants_cssClasses.LIST_ITEM_CLASS)) {\n            return this.listElements.indexOf(nearestParent);\n        }\n        return -1;\n    };\n    /**\n     * Used to figure out which element was clicked before sending the event to the foundation.\n     */\n    MDCList.prototype.handleFocusInEvent_ = function (evt) {\n        var index = this.getListItemIndex_(evt);\n        this.foundation_.handleFocusIn(evt, index);\n    };\n    /**\n     * Used to figure out which element was clicked before sending the event to the foundation.\n     */\n    MDCList.prototype.handleFocusOutEvent_ = function (evt) {\n        var index = this.getListItemIndex_(evt);\n        this.foundation_.handleFocusOut(evt, index);\n    };\n    /**\n     * Used to figure out which element was focused when keydown event occurred before sending the event to the\n     * foundation.\n     */\n    MDCList.prototype.handleKeydownEvent_ = function (evt) {\n        var index = this.getListItemIndex_(evt);\n        var target = evt.target;\n        this.foundation_.handleKeydown(evt, target.classList.contains(list_constants_cssClasses.LIST_ITEM_CLASS), index);\n    };\n    /**\n     * Used to figure out which element was clicked before sending the event to the foundation.\n     */\n    MDCList.prototype.handleClickEvent_ = function (evt) {\n        var index = this.getListItemIndex_(evt);\n        var target = evt.target;\n        // Toggle the checkbox only if it\'s not the target of the event, or the checkbox will have 2 change events.\n        var toggleCheckbox = !matches(target, list_constants_strings.CHECKBOX_RADIO_SELECTOR);\n        this.foundation_.handleClick(index, toggleCheckbox);\n    };\n    return MDCList;\n}(MDCComponent));\n\n//# sourceMappingURL=component.js.map\n;// ./node_modules/@material/drawer/constants.js\n/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the "Software"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nvar drawer_constants_cssClasses = {\n    ANIMATE: \'mdc-drawer--animate\',\n    CLOSING: \'mdc-drawer--closing\',\n    DISMISSIBLE: \'mdc-drawer--dismissible\',\n    MODAL: \'mdc-drawer--modal\',\n    OPEN: \'mdc-drawer--open\',\n    OPENING: \'mdc-drawer--opening\',\n    ROOT: \'mdc-drawer\',\n};\nvar drawer_constants_strings = {\n    APP_CONTENT_SELECTOR: \'.mdc-drawer-app-content\',\n    CLOSE_EVENT: \'MDCDrawer:closed\',\n    OPEN_EVENT: \'MDCDrawer:opened\',\n    SCRIM_SELECTOR: \'.mdc-drawer-scrim\',\n};\n\n//# sourceMappingURL=constants.js.map\n;// ./node_modules/@material/drawer/dismissible/foundation.js\n/**\n * @license\n * Copyright 2018 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the "Software"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n\n\nvar MDCDismissibleDrawerFoundation = /** @class */ (function (_super) {\n    __extends(MDCDismissibleDrawerFoundation, _super);\n    function MDCDismissibleDrawerFoundation(adapter) {\n        var _this = _super.call(this, __assign({}, MDCDismissibleDrawerFoundation.defaultAdapter, adapter)) || this;\n        _this.animationFrame_ = 0;\n        _this.animationTimer_ = 0;\n        return _this;\n    }\n    Object.defineProperty(MDCDismissibleDrawerFoundation, "strings", {\n        get: function () {\n            return drawer_constants_strings;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MDCDismissibleDrawerFoundation, "cssClasses", {\n        get: function () {\n            return drawer_constants_cssClasses;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MDCDismissibleDrawerFoundation, "defaultAdapter", {\n        get: function () {\n            // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.\n            return {\n                addClass: function () { return undefined; },\n                removeClass: function () { return undefined; },\n                hasClass: function () { return false; },\n                elementHasClass: function () { return false; },\n                notifyClose: function () { return undefined; },\n                notifyOpen: function () { return undefined; },\n                saveFocus: function () { return undefined; },\n                restoreFocus: function () { return undefined; },\n                focusActiveNavigationItem: function () { return undefined; },\n                trapFocus: function () { return undefined; },\n                releaseFocus: function () { return undefined; },\n            };\n            // tslint:enable:object-literal-sort-keys\n        },\n        enumerable: true,\n        configurable: true\n    });\n    MDCDismissibleDrawerFoundation.prototype.destroy = function () {\n        if (this.animationFrame_) {\n            cancelAnimationFrame(this.animationFrame_);\n        }\n        if (this.animationTimer_) {\n            clearTimeout(this.animationTimer_);\n        }\n    };\n    /**\n     * Opens the drawer from the closed state.\n     */\n    MDCDismissibleDrawerFoundation.prototype.open = function () {\n        var _this = this;\n        if (this.isOpen() || this.isOpening() || this.isClosing()) {\n            return;\n        }\n        this.adapter_.addClass(drawer_constants_cssClasses.OPEN);\n        this.adapter_.addClass(drawer_constants_cssClasses.ANIMATE);\n        // Wait a frame once display is no longer "none", to establish basis for animation\n        this.runNextAnimationFrame_(function () {\n            _this.adapter_.addClass(drawer_constants_cssClasses.OPENING);\n        });\n        this.adapter_.saveFocus();\n    };\n    /**\n     * Closes the drawer from the open state.\n     */\n    MDCDismissibleDrawerFoundation.prototype.close = function () {\n        if (!this.isOpen() || this.isOpening() || this.isClosing()) {\n            return;\n        }\n        this.adapter_.addClass(drawer_constants_cssClasses.CLOSING);\n    };\n    /**\n     * Returns true if the drawer is in the open position.\n     * @return true if drawer is in open state.\n     */\n    MDCDismissibleDrawerFoundation.prototype.isOpen = function () {\n        return this.adapter_.hasClass(drawer_constants_cssClasses.OPEN);\n    };\n    /**\n     * Returns true if the drawer is animating open.\n     * @return true if drawer is animating open.\n     */\n    MDCDismissibleDrawerFoundation.prototype.isOpening = function () {\n        return this.adapter_.hasClass(drawer_constants_cssClasses.OPENING) || this.adapter_.hasClass(drawer_constants_cssClasses.ANIMATE);\n    };\n    /**\n     * Returns true if the drawer is animating closed.\n     * @return true if drawer is animating closed.\n     */\n    MDCDismissibleDrawerFoundation.prototype.isClosing = function () {\n        return this.adapter_.hasClass(drawer_constants_cssClasses.CLOSING);\n    };\n    /**\n     * Keydown handler to close drawer when key is escape.\n     */\n    MDCDismissibleDrawerFoundation.prototype.handleKeydown = function (evt) {\n        var keyCode = evt.keyCode, key = evt.key;\n        var isEscape = key === \'Escape\' || keyCode === 27;\n        if (isEscape) {\n            this.close();\n        }\n    };\n    /**\n     * Handles the `transitionend` event when the drawer finishes opening/closing.\n     */\n    MDCDismissibleDrawerFoundation.prototype.handleTransitionEnd = function (evt) {\n        var OPENING = drawer_constants_cssClasses.OPENING, CLOSING = drawer_constants_cssClasses.CLOSING, OPEN = drawer_constants_cssClasses.OPEN, ANIMATE = drawer_constants_cssClasses.ANIMATE, ROOT = drawer_constants_cssClasses.ROOT;\n        // In Edge, transitionend on ripple pseudo-elements yields a target without classList, so check for Element first.\n        var isRootElement = this.isElement_(evt.target) && this.adapter_.elementHasClass(evt.target, ROOT);\n        if (!isRootElement) {\n            return;\n        }\n        if (this.isClosing()) {\n            this.adapter_.removeClass(OPEN);\n            this.closed_();\n            this.adapter_.restoreFocus();\n            this.adapter_.notifyClose();\n        }\n        else {\n            this.adapter_.focusActiveNavigationItem();\n            this.opened_();\n            this.adapter_.notifyOpen();\n        }\n        this.adapter_.removeClass(ANIMATE);\n        this.adapter_.removeClass(OPENING);\n        this.adapter_.removeClass(CLOSING);\n    };\n    /**\n     * Extension point for when drawer finishes open animation.\n     */\n    MDCDismissibleDrawerFoundation.prototype.opened_ = function () { }; // tslint:disable-line:no-empty\n    /**\n     * Extension point for when drawer finishes close animation.\n     */\n    MDCDismissibleDrawerFoundation.prototype.closed_ = function () { }; // tslint:disable-line:no-empty\n    /**\n     * Runs the given logic on the next animation frame, using setTimeout to factor in Firefox reflow behavior.\n     */\n    MDCDismissibleDrawerFoundation.prototype.runNextAnimationFrame_ = function (callback) {\n        var _this = this;\n        cancelAnimationFrame(this.animationFrame_);\n        this.animationFrame_ = requestAnimationFrame(function () {\n            _this.animationFrame_ = 0;\n            clearTimeout(_this.animationTimer_);\n            _this.animationTimer_ = setTimeout(callback, 0);\n        });\n    };\n    MDCDismissibleDrawerFoundation.prototype.isElement_ = function (element) {\n        // In Edge, transitionend on ripple pseudo-elements yields a target without classList.\n        return Boolean(element.classList);\n    };\n    return MDCDismissibleDrawerFoundation;\n}(MDCFoundation));\n\n// tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.\n/* harmony default export */ const dismissible_foundation = ((/* unused pure expression or super */ null && (MDCDismissibleDrawerFoundation)));\n//# sourceMappingURL=foundation.js.map\n;// ./node_modules/@material/drawer/modal/foundation.js\n/**\n * @license\n * Copyright 2018 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the "Software"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n\n/* istanbul ignore next: subclass is not a branch statement */\nvar MDCModalDrawerFoundation = /** @class */ (function (_super) {\n    __extends(MDCModalDrawerFoundation, _super);\n    function MDCModalDrawerFoundation() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Handles click event on scrim.\n     */\n    MDCModalDrawerFoundation.prototype.handleScrimClick = function () {\n        this.close();\n    };\n    /**\n     * Called when drawer finishes open animation.\n     */\n    MDCModalDrawerFoundation.prototype.opened_ = function () {\n        this.adapter_.trapFocus();\n    };\n    /**\n     * Called when drawer finishes close animation.\n     */\n    MDCModalDrawerFoundation.prototype.closed_ = function () {\n        this.adapter_.releaseFocus();\n    };\n    return MDCModalDrawerFoundation;\n}(MDCDismissibleDrawerFoundation));\n\n// tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.\n/* harmony default export */ const modal_foundation = ((/* unused pure expression or super */ null && (MDCModalDrawerFoundation)));\n//# sourceMappingURL=foundation.js.map\n;// ./node_modules/@material/drawer/util.js\n/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the "Software"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nfunction createFocusTrapInstance(surfaceEl, focusTrapFactory) {\n    return focusTrapFactory(surfaceEl, {\n        // Component handles focusing on active nav item.\n        skipInitialFocus: true,\n    });\n}\n//# sourceMappingURL=util.js.map\n;// ./node_modules/@material/drawer/component.js\n/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the "Software"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n\n\n\n\n\n\n\nvar component_cssClasses = MDCDismissibleDrawerFoundation.cssClasses, component_strings = MDCDismissibleDrawerFoundation.strings;\n/**\n * @events `MDCDrawer:closed {}` Emits when the navigation drawer has closed.\n * @events `MDCDrawer:opened {}` Emits when the navigation drawer has opened.\n */\nvar MDCDrawer = /** @class */ (function (_super) {\n    __extends(MDCDrawer, _super);\n    function MDCDrawer() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    MDCDrawer.attachTo = function (root) {\n        return new MDCDrawer(root);\n    };\n    Object.defineProperty(MDCDrawer.prototype, "open", {\n        /**\n         * @return boolean Proxies to the foundation\'s `open`/`close` methods.\n         * Also returns true if drawer is in the open position.\n         */\n        get: function () {\n            return this.foundation_.isOpen();\n        },\n        /**\n         * Toggles the drawer open and closed.\n         */\n        set: function (isOpen) {\n            if (isOpen) {\n                this.foundation_.open();\n            }\n            else {\n                this.foundation_.close();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MDCDrawer.prototype, "list", {\n        get: function () {\n            return this.list_;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    MDCDrawer.prototype.initialize = function (focusTrapFactory, listFactory) {\n        if (focusTrapFactory === void 0) { focusTrapFactory = function (el) { return new FocusTrap(el); }; }\n        if (listFactory === void 0) { listFactory = function (el) { return new MDCList(el); }; }\n        var listEl = this.root_.querySelector("." + MDCListFoundation.cssClasses.ROOT);\n        if (listEl) {\n            this.list_ = listFactory(listEl);\n            this.list_.wrapFocus = true;\n        }\n        this.focusTrapFactory_ = focusTrapFactory;\n    };\n    MDCDrawer.prototype.initialSyncWithDOM = function () {\n        var _this = this;\n        var MODAL = component_cssClasses.MODAL;\n        var SCRIM_SELECTOR = component_strings.SCRIM_SELECTOR;\n        this.scrim_ = this.root_.parentNode.querySelector(SCRIM_SELECTOR);\n        if (this.scrim_ && this.root_.classList.contains(MODAL)) {\n            this.handleScrimClick_ = function () { return _this.foundation_.handleScrimClick(); };\n            this.scrim_.addEventListener(\'click\', this.handleScrimClick_);\n            this.focusTrap_ = createFocusTrapInstance(this.root_, this.focusTrapFactory_);\n        }\n        this.handleKeydown_ = function (evt) { return _this.foundation_.handleKeydown(evt); };\n        this.handleTransitionEnd_ = function (evt) { return _this.foundation_.handleTransitionEnd(evt); };\n        this.listen(\'keydown\', this.handleKeydown_);\n        this.listen(\'transitionend\', this.handleTransitionEnd_);\n    };\n    MDCDrawer.prototype.destroy = function () {\n        this.unlisten(\'keydown\', this.handleKeydown_);\n        this.unlisten(\'transitionend\', this.handleTransitionEnd_);\n        if (this.list_) {\n            this.list_.destroy();\n        }\n        var MODAL = component_cssClasses.MODAL;\n        if (this.scrim_ && this.handleScrimClick_ && this.root_.classList.contains(MODAL)) {\n            this.scrim_.removeEventListener(\'click\', this.handleScrimClick_);\n            // Ensure drawer is closed to hide scrim and release focus\n            this.open = false;\n        }\n    };\n    MDCDrawer.prototype.getDefaultFoundation = function () {\n        var _this = this;\n        // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.\n        // To ensure we don\'t accidentally omit any methods, we need a separate, strongly typed adapter variable.\n        // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.\n        var adapter = {\n            addClass: function (className) { return _this.root_.classList.add(className); },\n            removeClass: function (className) { return _this.root_.classList.remove(className); },\n            hasClass: function (className) { return _this.root_.classList.contains(className); },\n            elementHasClass: function (element, className) { return element.classList.contains(className); },\n            saveFocus: function () { return _this.previousFocus_ = document.activeElement; },\n            restoreFocus: function () {\n                var previousFocus = _this.previousFocus_;\n                if (previousFocus && previousFocus.focus && _this.root_.contains(document.activeElement)) {\n                    previousFocus.focus();\n                }\n            },\n            focusActiveNavigationItem: function () {\n                var activeNavItemEl = _this.root_.querySelector("." + MDCListFoundation.cssClasses.LIST_ITEM_ACTIVATED_CLASS);\n                if (activeNavItemEl) {\n                    activeNavItemEl.focus();\n                }\n            },\n            notifyClose: function () { return _this.emit(component_strings.CLOSE_EVENT, {}, true /* shouldBubble */); },\n            notifyOpen: function () { return _this.emit(component_strings.OPEN_EVENT, {}, true /* shouldBubble */); },\n            trapFocus: function () { return _this.focusTrap_.trapFocus(); },\n            releaseFocus: function () { return _this.focusTrap_.releaseFocus(); },\n        };\n        // tslint:enable:object-literal-sort-keys\n        var DISMISSIBLE = component_cssClasses.DISMISSIBLE, MODAL = component_cssClasses.MODAL;\n        if (this.root_.classList.contains(DISMISSIBLE)) {\n            return new MDCDismissibleDrawerFoundation(adapter);\n        }\n        else if (this.root_.classList.contains(MODAL)) {\n            return new MDCModalDrawerFoundation(adapter);\n        }\n        else {\n            throw new Error("MDCDrawer: Failed to instantiate component. Supported variants are " + DISMISSIBLE + " and " + MODAL + ".");\n        }\n    };\n    return MDCDrawer;\n}(MDCComponent));\n\n//# sourceMappingURL=component.js.map\n;// ./node_modules/d3-array/src/max.js\nfunction max(values, valueof) {\n  let max;\n  if (valueof === undefined) {\n    for (const value of values) {\n      if (value != null\n          && (max < value || (max === undefined && value >= value))) {\n        max = value;\n      }\n    }\n  } else {\n    let index = -1;\n    for (let value of values) {\n      if ((value = valueof(value, ++index, values)) != null\n          && (max < value || (max === undefined && value >= value))) {\n        max = value;\n      }\n    }\n  }\n  return max;\n}\n\n;// ./node_modules/d3-array/src/index.js\n\n\n\n\n\n\n\n\n\n\n\n\n\n // Deprecated; use bin.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n // Deprecated; use leastIndex.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n;// ./node_modules/d3-axis/src/identity.js\n/* harmony default export */ function src_identity(x) {\n  return x;\n}\n\n;// ./node_modules/d3-axis/src/axis.js\n\n\nvar axis_top = 1,\n    right = 2,\n    bottom = 3,\n    left = 4,\n    epsilon = 1e-6;\n\nfunction translateX(x) {\n  return "translate(" + x + ",0)";\n}\n\nfunction translateY(y) {\n  return "translate(0," + y + ")";\n}\n\nfunction number(scale) {\n  return d => +scale(d);\n}\n\nfunction center(scale, offset) {\n  offset = Math.max(0, scale.bandwidth() - offset * 2) / 2;\n  if (scale.round()) offset = Math.round(offset);\n  return d => +scale(d) + offset;\n}\n\nfunction entering() {\n  return !this.__axis;\n}\n\nfunction axis(orient, scale) {\n  var tickArguments = [],\n      tickValues = null,\n      tickFormat = null,\n      tickSizeInner = 6,\n      tickSizeOuter = 6,\n      tickPadding = 3,\n      offset = typeof window !== "undefined" && window.devicePixelRatio > 1 ? 0 : 0.5,\n      k = orient === axis_top || orient === left ? -1 : 1,\n      x = orient === left || orient === right ? "x" : "y",\n      transform = orient === axis_top || orient === bottom ? translateX : translateY;\n\n  function axis(context) {\n    var values = tickValues == null ? (scale.ticks ? scale.ticks.apply(scale, tickArguments) : scale.domain()) : tickValues,\n        format = tickFormat == null ? (scale.tickFormat ? scale.tickFormat.apply(scale, tickArguments) : src_identity) : tickFormat,\n        spacing = Math.max(tickSizeInner, 0) + tickPadding,\n        range = scale.range(),\n        range0 = +range[0] + offset,\n        range1 = +range[range.length - 1] + offset,\n        position = (scale.bandwidth ? center : number)(scale.copy(), offset),\n        selection = context.selection ? context.selection() : context,\n        path = selection.selectAll(".domain").data([null]),\n        tick = selection.selectAll(".tick").data(values, scale).order(),\n        tickExit = tick.exit(),\n        tickEnter = tick.enter().append("g").attr("class", "tick"),\n        line = tick.select("line"),\n        text = tick.select("text");\n\n    path = path.merge(path.enter().insert("path", ".tick")\n        .attr("class", "domain")\n        .attr("stroke", "currentColor"));\n\n    tick = tick.merge(tickEnter);\n\n    line = line.merge(tickEnter.append("line")\n        .attr("stroke", "currentColor")\n        .attr(x + "2", k * tickSizeInner));\n\n    text = text.merge(tickEnter.append("text")\n        .attr("fill", "currentColor")\n        .attr(x, k * spacing)\n        .attr("dy", orient === axis_top ? "0em" : orient === bottom ? "0.71em" : "0.32em"));\n\n    if (context !== selection) {\n      path = path.transition(context);\n      tick = tick.transition(context);\n      line = line.transition(context);\n      text = text.transition(context);\n\n      tickExit = tickExit.transition(context)\n          .attr("opacity", epsilon)\n          .attr("transform", function(d) { return isFinite(d = position(d)) ? transform(d + offset) : this.getAttribute("transform"); });\n\n      tickEnter\n          .attr("opacity", epsilon)\n          .attr("transform", function(d) { var p = this.parentNode.__axis; return transform((p && isFinite(p = p(d)) ? p : position(d)) + offset); });\n    }\n\n    tickExit.remove();\n\n    path\n        .attr("d", orient === left || orient === right\n            ? (tickSizeOuter ? "M" + k * tickSizeOuter + "," + range0 + "H" + offset + "V" + range1 + "H" + k * tickSizeOuter : "M" + offset + "," + range0 + "V" + range1)\n            : (tickSizeOuter ? "M" + range0 + "," + k * tickSizeOuter + "V" + offset + "H" + range1 + "V" + k * tickSizeOuter : "M" + range0 + "," + offset + "H" + range1));\n\n    tick\n        .attr("opacity", 1)\n        .attr("transform", function(d) { return transform(position(d) + offset); });\n\n    line\n        .attr(x + "2", k * tickSizeInner);\n\n    text\n        .attr(x, k * spacing)\n        .text(format);\n\n    selection.filter(entering)\n        .attr("fill", "none")\n        .attr("font-size", 10)\n        .attr("font-family", "sans-serif")\n        .attr("text-anchor", orient === right ? "start" : orient === left ? "end" : "middle");\n\n    selection\n        .each(function() { this.__axis = position; });\n  }\n\n  axis.scale = function(_) {\n    return arguments.length ? (scale = _, axis) : scale;\n  };\n\n  axis.ticks = function() {\n    return tickArguments = Array.from(arguments), axis;\n  };\n\n  axis.tickArguments = function(_) {\n    return arguments.length ? (tickArguments = _ == null ? [] : Array.from(_), axis) : tickArguments.slice();\n  };\n\n  axis.tickValues = function(_) {\n    return arguments.length ? (tickValues = _ == null ? null : Array.from(_), axis) : tickValues && tickValues.slice();\n  };\n\n  axis.tickFormat = function(_) {\n    return arguments.length ? (tickFormat = _, axis) : tickFormat;\n  };\n\n  axis.tickSize = function(_) {\n    return arguments.length ? (tickSizeInner = tickSizeOuter = +_, axis) : tickSizeInner;\n  };\n\n  axis.tickSizeInner = function(_) {\n    return arguments.length ? (tickSizeInner = +_, axis) : tickSizeInner;\n  };\n\n  axis.tickSizeOuter = function(_) {\n    return arguments.length ? (tickSizeOuter = +_, axis) : tickSizeOuter;\n  };\n\n  axis.tickPadding = function(_) {\n    return arguments.length ? (tickPadding = +_, axis) : tickPadding;\n  };\n\n  axis.offset = function(_) {\n    return arguments.length ? (offset = +_, axis) : offset;\n  };\n\n  return axis;\n}\n\nfunction axisTop(scale) {\n  return axis(axis_top, scale);\n}\n\nfunction axisRight(scale) {\n  return axis(right, scale);\n}\n\nfunction axisBottom(scale) {\n  return axis(bottom, scale);\n}\n\nfunction axisLeft(scale) {\n  return axis(left, scale);\n}\n\n;// ./node_modules/d3-axis/src/index.js\n\n\n;// ./node_modules/d3-selection/src/selector.js\nfunction none() {}\n\n/* harmony default export */ function selector(selector) {\n  return selector == null ? none : function() {\n    return this.querySelector(selector);\n  };\n}\n\n;// ./node_modules/d3-selection/src/selection/select.js\n\n\n\n/* harmony default export */ function selection_select(select) {\n  if (typeof select !== "function") select = selector(select);\n\n  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {\n    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {\n      if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {\n        if ("__data__" in node) subnode.__data__ = node.__data__;\n        subgroup[i] = subnode;\n      }\n    }\n  }\n\n  return new Selection(subgroups, this._parents);\n}\n\n;// ./node_modules/d3-selection/src/array.js\n// Given something array like (or null), returns something that is strictly an\n// array. This is used to ensure that array-like objects passed to d3.selectAll\n// or selection.selectAll are converted into proper arrays when creating a\n// selection; we don’t ever want to create a selection backed by a live\n// HTMLCollection or NodeList. However, note that selection.selectAll will use a\n// static NodeList as a group, since it safely derived from querySelectorAll.\nfunction array(x) {\n  return x == null ? [] : Array.isArray(x) ? x : Array.from(x);\n}\n\n;// ./node_modules/d3-selection/src/selectorAll.js\nfunction empty() {\n  return [];\n}\n\n/* harmony default export */ function selectorAll(selector) {\n  return selector == null ? empty : function() {\n    return this.querySelectorAll(selector);\n  };\n}\n\n;// ./node_modules/d3-selection/src/selection/selectAll.js\n\n\n\n\nfunction arrayAll(select) {\n  return function() {\n    return array(select.apply(this, arguments));\n  };\n}\n\n/* harmony default export */ function selectAll(select) {\n  if (typeof select === "function") select = arrayAll(select);\n  else select = selectorAll(select);\n\n  for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {\n    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {\n      if (node = group[i]) {\n        subgroups.push(select.call(node, node.__data__, i, group));\n        parents.push(node);\n      }\n    }\n  }\n\n  return new Selection(subgroups, parents);\n}\n\n;// ./node_modules/d3-selection/src/matcher.js\n/* harmony default export */ function matcher(selector) {\n  return function() {\n    return this.matches(selector);\n  };\n}\n\nfunction childMatcher(selector) {\n  return function(node) {\n    return node.matches(selector);\n  };\n}\n\n\n;// ./node_modules/d3-selection/src/selection/selectChild.js\n\n\nvar find = Array.prototype.find;\n\nfunction childFind(match) {\n  return function() {\n    return find.call(this.children, match);\n  };\n}\n\nfunction childFirst() {\n  return this.firstElementChild;\n}\n\n/* harmony default export */ function selectChild(match) {\n  return this.select(match == null ? childFirst\n      : childFind(typeof match === "function" ? match : childMatcher(match)));\n}\n\n;// ./node_modules/d3-selection/src/selection/selectChildren.js\n\n\nvar filter = Array.prototype.filter;\n\nfunction children() {\n  return Array.from(this.children);\n}\n\nfunction childrenFilter(match) {\n  return function() {\n    return filter.call(this.children, match);\n  };\n}\n\n/* harmony default export */ function selectChildren(match) {\n  return this.selectAll(match == null ? children\n      : childrenFilter(typeof match === "function" ? match : childMatcher(match)));\n}\n\n;// ./node_modules/d3-selection/src/selection/filter.js\n\n\n\n/* harmony default export */ function selection_filter(match) {\n  if (typeof match !== "function") match = matcher(match);\n\n  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {\n    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {\n      if ((node = group[i]) && match.call(node, node.__data__, i, group)) {\n        subgroup.push(node);\n      }\n    }\n  }\n\n  return new Selection(subgroups, this._parents);\n}\n\n;// ./node_modules/d3-selection/src/selection/sparse.js\n/* harmony default export */ function sparse(update) {\n  return new Array(update.length);\n}\n\n;// ./node_modules/d3-selection/src/selection/enter.js\n\n\n\n/* harmony default export */ function enter() {\n  return new Selection(this._enter || this._groups.map(sparse), this._parents);\n}\n\nfunction EnterNode(parent, datum) {\n  this.ownerDocument = parent.ownerDocument;\n  this.namespaceURI = parent.namespaceURI;\n  this._next = null;\n  this._parent = parent;\n  this.__data__ = datum;\n}\n\nEnterNode.prototype = {\n  constructor: EnterNode,\n  appendChild: function(child) { return this._parent.insertBefore(child, this._next); },\n  insertBefore: function(child, next) { return this._parent.insertBefore(child, next); },\n  querySelector: function(selector) { return this._parent.querySelector(selector); },\n  querySelectorAll: function(selector) { return this._parent.querySelectorAll(selector); }\n};\n\n;// ./node_modules/d3-selection/src/constant.js\n/* harmony default export */ function src_constant(x) {\n  return function() {\n    return x;\n  };\n}\n\n;// ./node_modules/d3-selection/src/selection/data.js\n\n\n\n\nfunction bindIndex(parent, group, enter, update, exit, data) {\n  var i = 0,\n      node,\n      groupLength = group.length,\n      dataLength = data.length;\n\n  // Put any non-null nodes that fit into update.\n  // Put any null nodes into enter.\n  // Put any remaining data into enter.\n  for (; i < dataLength; ++i) {\n    if (node = group[i]) {\n      node.__data__ = data[i];\n      update[i] = node;\n    } else {\n      enter[i] = new EnterNode(parent, data[i]);\n    }\n  }\n\n  // Put any non-null nodes that don’t fit into exit.\n  for (; i < groupLength; ++i) {\n    if (node = group[i]) {\n      exit[i] = node;\n    }\n  }\n}\n\nfunction bindKey(parent, group, enter, update, exit, data, key) {\n  var i,\n      node,\n      nodeByKeyValue = new Map,\n      groupLength = group.length,\n      dataLength = data.length,\n      keyValues = new Array(groupLength),\n      keyValue;\n\n  // Compute the key for each node.\n  // If multiple nodes have the same key, the duplicates are added to exit.\n  for (i = 0; i < groupLength; ++i) {\n    if (node = group[i]) {\n      keyValues[i] = keyValue = key.call(node, node.__data__, i, group) + "";\n      if (nodeByKeyValue.has(keyValue)) {\n        exit[i] = node;\n      } else {\n        nodeByKeyValue.set(keyValue, node);\n      }\n    }\n  }\n\n  // Compute the key for each datum.\n  // If there a node associated with this key, join and add it to update.\n  // If there is not (or the key is a duplicate), add it to enter.\n  for (i = 0; i < dataLength; ++i) {\n    keyValue = key.call(parent, data[i], i, data) + "";\n    if (node = nodeByKeyValue.get(keyValue)) {\n      update[i] = node;\n      node.__data__ = data[i];\n      nodeByKeyValue.delete(keyValue);\n    } else {\n      enter[i] = new EnterNode(parent, data[i]);\n    }\n  }\n\n  // Add any remaining nodes that were not bound to data to exit.\n  for (i = 0; i < groupLength; ++i) {\n    if ((node = group[i]) && (nodeByKeyValue.get(keyValues[i]) === node)) {\n      exit[i] = node;\n    }\n  }\n}\n\nfunction datum(node) {\n  return node.__data__;\n}\n\n/* harmony default export */ function data(value, key) {\n  if (!arguments.length) return Array.from(this, datum);\n\n  var bind = key ? bindKey : bindIndex,\n      parents = this._parents,\n      groups = this._groups;\n\n  if (typeof value !== "function") value = src_constant(value);\n\n  for (var m = groups.length, update = new Array(m), enter = new Array(m), exit = new Array(m), j = 0; j < m; ++j) {\n    var parent = parents[j],\n        group = groups[j],\n        groupLength = group.length,\n        data = arraylike(value.call(parent, parent && parent.__data__, j, parents)),\n        dataLength = data.length,\n        enterGroup = enter[j] = new Array(dataLength),\n        updateGroup = update[j] = new Array(dataLength),\n        exitGroup = exit[j] = new Array(groupLength);\n\n    bind(parent, group, enterGroup, updateGroup, exitGroup, data, key);\n\n    // Now connect the enter nodes to their following update node, such that\n    // appendChild can insert the materialized enter node before this node,\n    // rather than at the end of the parent node.\n    for (var i0 = 0, i1 = 0, previous, next; i0 < dataLength; ++i0) {\n      if (previous = enterGroup[i0]) {\n        if (i0 >= i1) i1 = i0 + 1;\n        while (!(next = updateGroup[i1]) && ++i1 < dataLength);\n        previous._next = next || null;\n      }\n    }\n  }\n\n  update = new Selection(update, parents);\n  update._enter = enter;\n  update._exit = exit;\n  return update;\n}\n\n// Given some data, this returns an array-like view of it: an object that\n// exposes a length property and allows numeric indexing. Note that unlike\n// selectAll, this isn’t worried about “live” collections because the resulting\n// array will only be used briefly while data is being bound. (It is possible to\n// cause the data to change while iterating by using a key function, but please\n// don’t; we’d rather avoid a gratuitous copy.)\nfunction arraylike(data) {\n  return typeof data === "object" && "length" in data\n    ? data // Array, TypedArray, NodeList, array-like\n    : Array.from(data); // Map, Set, iterable, string, or anything else\n}\n\n;// ./node_modules/d3-selection/src/selection/exit.js\n\n\n\n/* harmony default export */ function exit() {\n  return new Selection(this._exit || this._groups.map(sparse), this._parents);\n}\n\n;// ./node_modules/d3-selection/src/selection/join.js\n/* harmony default export */ function join(onenter, onupdate, onexit) {\n  var enter = this.enter(), update = this, exit = this.exit();\n  if (typeof onenter === "function") {\n    enter = onenter(enter);\n    if (enter) enter = enter.selection();\n  } else {\n    enter = enter.append(onenter + "");\n  }\n  if (onupdate != null) {\n    update = onupdate(update);\n    if (update) update = update.selection();\n  }\n  if (onexit == null) exit.remove(); else onexit(exit);\n  return enter && update ? enter.merge(update).order() : update;\n}\n\n;// ./node_modules/d3-selection/src/selection/merge.js\n\n\n/* harmony default export */ function merge(context) {\n  var selection = context.selection ? context.selection() : context;\n\n  for (var groups0 = this._groups, groups1 = selection._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {\n    for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {\n      if (node = group0[i] || group1[i]) {\n        merge[i] = node;\n      }\n    }\n  }\n\n  for (; j < m0; ++j) {\n    merges[j] = groups0[j];\n  }\n\n  return new Selection(merges, this._parents);\n}\n\n;// ./node_modules/d3-selection/src/selection/order.js\n/* harmony default export */ function order() {\n\n  for (var groups = this._groups, j = -1, m = groups.length; ++j < m;) {\n    for (var group = groups[j], i = group.length - 1, next = group[i], node; --i >= 0;) {\n      if (node = group[i]) {\n        if (next && node.compareDocumentPosition(next) ^ 4) next.parentNode.insertBefore(node, next);\n        next = node;\n      }\n    }\n  }\n\n  return this;\n}\n\n;// ./node_modules/d3-selection/src/selection/sort.js\n\n\n/* harmony default export */ function sort(compare) {\n  if (!compare) compare = ascending;\n\n  function compareNode(a, b) {\n    return a && b ? compare(a.__data__, b.__data__) : !a - !b;\n  }\n\n  for (var groups = this._groups, m = groups.length, sortgroups = new Array(m), j = 0; j < m; ++j) {\n    for (var group = groups[j], n = group.length, sortgroup = sortgroups[j] = new Array(n), node, i = 0; i < n; ++i) {\n      if (node = group[i]) {\n        sortgroup[i] = node;\n      }\n    }\n    sortgroup.sort(compareNode);\n  }\n\n  return new Selection(sortgroups, this._parents).order();\n}\n\nfunction ascending(a, b) {\n  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;\n}\n\n;// ./node_modules/d3-selection/src/selection/call.js\n/* harmony default export */ function call() {\n  var callback = arguments[0];\n  arguments[0] = this;\n  callback.apply(null, arguments);\n  return this;\n}\n\n;// ./node_modules/d3-selection/src/selection/nodes.js\n/* harmony default export */ function nodes() {\n  return Array.from(this);\n}\n\n;// ./node_modules/d3-selection/src/selection/node.js\n/* harmony default export */ function node() {\n\n  for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {\n    for (var group = groups[j], i = 0, n = group.length; i < n; ++i) {\n      var node = group[i];\n      if (node) return node;\n    }\n  }\n\n  return null;\n}\n\n;// ./node_modules/d3-selection/src/selection/size.js\n/* harmony default export */ function size() {\n  let size = 0;\n  for (const node of this) ++size; // eslint-disable-line no-unused-vars\n  return size;\n}\n\n;// ./node_modules/d3-selection/src/selection/empty.js\n/* harmony default export */ function selection_empty() {\n  return !this.node();\n}\n\n;// ./node_modules/d3-selection/src/selection/each.js\n/* harmony default export */ function each(callback) {\n\n  for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {\n    for (var group = groups[j], i = 0, n = group.length, node; i < n; ++i) {\n      if (node = group[i]) callback.call(node, node.__data__, i, group);\n    }\n  }\n\n  return this;\n}\n\n;// ./node_modules/d3-selection/src/namespaces.js\nvar xhtml = "http://www.w3.org/1999/xhtml";\n\n/* harmony default export */ const namespaces = ({\n  svg: "http://www.w3.org/2000/svg",\n  xhtml: xhtml,\n  xlink: "http://www.w3.org/1999/xlink",\n  xml: "http://www.w3.org/XML/1998/namespace",\n  xmlns: "http://www.w3.org/2000/xmlns/"\n});\n\n;// ./node_modules/d3-selection/src/namespace.js\n\n\n/* harmony default export */ function namespace(name) {\n  var prefix = name += "", i = prefix.indexOf(":");\n  if (i >= 0 && (prefix = name.slice(0, i)) !== "xmlns") name = name.slice(i + 1);\n  return namespaces.hasOwnProperty(prefix) ? {space: namespaces[prefix], local: name} : name; // eslint-disable-line no-prototype-builtins\n}\n\n;// ./node_modules/d3-selection/src/selection/attr.js\n\n\nfunction attrRemove(name) {\n  return function() {\n    this.removeAttribute(name);\n  };\n}\n\nfunction attrRemoveNS(fullname) {\n  return function() {\n    this.removeAttributeNS(fullname.space, fullname.local);\n  };\n}\n\nfunction attrConstant(name, value) {\n  return function() {\n    this.setAttribute(name, value);\n  };\n}\n\nfunction attrConstantNS(fullname, value) {\n  return function() {\n    this.setAttributeNS(fullname.space, fullname.local, value);\n  };\n}\n\nfunction attrFunction(name, value) {\n  return function() {\n    var v = value.apply(this, arguments);\n    if (v == null) this.removeAttribute(name);\n    else this.setAttribute(name, v);\n  };\n}\n\nfunction attrFunctionNS(fullname, value) {\n  return function() {\n    var v = value.apply(this, arguments);\n    if (v == null) this.removeAttributeNS(fullname.space, fullname.local);\n    else this.setAttributeNS(fullname.space, fullname.local, v);\n  };\n}\n\n/* harmony default export */ function attr(name, value) {\n  var fullname = namespace(name);\n\n  if (arguments.length < 2) {\n    var node = this.node();\n    return fullname.local\n        ? node.getAttributeNS(fullname.space, fullname.local)\n        : node.getAttribute(fullname);\n  }\n\n  return this.each((value == null\n      ? (fullname.local ? attrRemoveNS : attrRemove) : (typeof value === "function"\n      ? (fullname.local ? attrFunctionNS : attrFunction)\n      : (fullname.local ? attrConstantNS : attrConstant)))(fullname, value));\n}\n\n;// ./node_modules/d3-selection/src/window.js\n/* harmony default export */ function src_window(node) {\n  return (node.ownerDocument && node.ownerDocument.defaultView) // node is a Node\n      || (node.document && node) // node is a Window\n      || node.defaultView; // node is a Document\n}\n\n;// ./node_modules/d3-selection/src/selection/style.js\n\n\nfunction styleRemove(name) {\n  return function() {\n    this.style.removeProperty(name);\n  };\n}\n\nfunction styleConstant(name, value, priority) {\n  return function() {\n    this.style.setProperty(name, value, priority);\n  };\n}\n\nfunction styleFunction(name, value, priority) {\n  return function() {\n    var v = value.apply(this, arguments);\n    if (v == null) this.style.removeProperty(name);\n    else this.style.setProperty(name, v, priority);\n  };\n}\n\n/* harmony default export */ function style(name, value, priority) {\n  return arguments.length > 1\n      ? this.each((value == null\n            ? styleRemove : typeof value === "function"\n            ? styleFunction\n            : styleConstant)(name, value, priority == null ? "" : priority))\n      : styleValue(this.node(), name);\n}\n\nfunction styleValue(node, name) {\n  return node.style.getPropertyValue(name)\n      || src_window(node).getComputedStyle(node, null).getPropertyValue(name);\n}\n\n;// ./node_modules/d3-selection/src/selection/property.js\nfunction propertyRemove(name) {\n  return function() {\n    delete this[name];\n  };\n}\n\nfunction propertyConstant(name, value) {\n  return function() {\n    this[name] = value;\n  };\n}\n\nfunction propertyFunction(name, value) {\n  return function() {\n    var v = value.apply(this, arguments);\n    if (v == null) delete this[name];\n    else this[name] = v;\n  };\n}\n\n/* harmony default export */ function property(name, value) {\n  return arguments.length > 1\n      ? this.each((value == null\n          ? propertyRemove : typeof value === "function"\n          ? propertyFunction\n          : propertyConstant)(name, value))\n      : this.node()[name];\n}\n\n;// ./node_modules/d3-selection/src/selection/classed.js\nfunction classArray(string) {\n  return string.trim().split(/^|\\s+/);\n}\n\nfunction classList(node) {\n  return node.classList || new ClassList(node);\n}\n\nfunction ClassList(node) {\n  this._node = node;\n  this._names = classArray(node.getAttribute("class") || "");\n}\n\nClassList.prototype = {\n  add: function(name) {\n    var i = this._names.indexOf(name);\n    if (i < 0) {\n      this._names.push(name);\n      this._node.setAttribute("class", this._names.join(" "));\n    }\n  },\n  remove: function(name) {\n    var i = this._names.indexOf(name);\n    if (i >= 0) {\n      this._names.splice(i, 1);\n      this._node.setAttribute("class", this._names.join(" "));\n    }\n  },\n  contains: function(name) {\n    return this._names.indexOf(name) >= 0;\n  }\n};\n\nfunction classedAdd(node, names) {\n  var list = classList(node), i = -1, n = names.length;\n  while (++i < n) list.add(names[i]);\n}\n\nfunction classedRemove(node, names) {\n  var list = classList(node), i = -1, n = names.length;\n  while (++i < n) list.remove(names[i]);\n}\n\nfunction classedTrue(names) {\n  return function() {\n    classedAdd(this, names);\n  };\n}\n\nfunction classedFalse(names) {\n  return function() {\n    classedRemove(this, names);\n  };\n}\n\nfunction classedFunction(names, value) {\n  return function() {\n    (value.apply(this, arguments) ? classedAdd : classedRemove)(this, names);\n  };\n}\n\n/* harmony default export */ function classed(name, value) {\n  var names = classArray(name + "");\n\n  if (arguments.length < 2) {\n    var list = classList(this.node()), i = -1, n = names.length;\n    while (++i < n) if (!list.contains(names[i])) return false;\n    return true;\n  }\n\n  return this.each((typeof value === "function"\n      ? classedFunction : value\n      ? classedTrue\n      : classedFalse)(names, value));\n}\n\n;// ./node_modules/d3-selection/src/selection/text.js\nfunction textRemove() {\n  this.textContent = "";\n}\n\nfunction textConstant(value) {\n  return function() {\n    this.textContent = value;\n  };\n}\n\nfunction textFunction(value) {\n  return function() {\n    var v = value.apply(this, arguments);\n    this.textContent = v == null ? "" : v;\n  };\n}\n\n/* harmony default export */ function selection_text(value) {\n  return arguments.length\n      ? this.each(value == null\n          ? textRemove : (typeof value === "function"\n          ? textFunction\n          : textConstant)(value))\n      : this.node().textContent;\n}\n\n;// ./node_modules/d3-selection/src/selection/html.js\nfunction htmlRemove() {\n  this.innerHTML = "";\n}\n\nfunction htmlConstant(value) {\n  return function() {\n    this.innerHTML = value;\n  };\n}\n\nfunction htmlFunction(value) {\n  return function() {\n    var v = value.apply(this, arguments);\n    this.innerHTML = v == null ? "" : v;\n  };\n}\n\n/* harmony default export */ function html(value) {\n  return arguments.length\n      ? this.each(value == null\n          ? htmlRemove : (typeof value === "function"\n          ? htmlFunction\n          : htmlConstant)(value))\n      : this.node().innerHTML;\n}\n\n;// ./node_modules/d3-selection/src/selection/raise.js\nfunction raise() {\n  if (this.nextSibling) this.parentNode.appendChild(this);\n}\n\n/* harmony default export */ function selection_raise() {\n  return this.each(raise);\n}\n\n;// ./node_modules/d3-selection/src/selection/lower.js\nfunction lower() {\n  if (this.previousSibling) this.parentNode.insertBefore(this, this.parentNode.firstChild);\n}\n\n/* harmony default export */ function selection_lower() {\n  return this.each(lower);\n}\n\n;// ./node_modules/d3-selection/src/creator.js\n\n\n\nfunction creatorInherit(name) {\n  return function() {\n    var document = this.ownerDocument,\n        uri = this.namespaceURI;\n    return uri === xhtml && document.documentElement.namespaceURI === xhtml\n        ? document.createElement(name)\n        : document.createElementNS(uri, name);\n  };\n}\n\nfunction creatorFixed(fullname) {\n  return function() {\n    return this.ownerDocument.createElementNS(fullname.space, fullname.local);\n  };\n}\n\n/* harmony default export */ function creator(name) {\n  var fullname = namespace(name);\n  return (fullname.local\n      ? creatorFixed\n      : creatorInherit)(fullname);\n}\n\n;// ./node_modules/d3-selection/src/selection/append.js\n\n\n/* harmony default export */ function append(name) {\n  var create = typeof name === "function" ? name : creator(name);\n  return this.select(function() {\n    return this.appendChild(create.apply(this, arguments));\n  });\n}\n\n;// ./node_modules/d3-selection/src/selection/insert.js\n\n\n\nfunction constantNull() {\n  return null;\n}\n\n/* harmony default export */ function insert(name, before) {\n  var create = typeof name === "function" ? name : creator(name),\n      select = before == null ? constantNull : typeof before === "function" ? before : selector(before);\n  return this.select(function() {\n    return this.insertBefore(create.apply(this, arguments), select.apply(this, arguments) || null);\n  });\n}\n\n;// ./node_modules/d3-selection/src/selection/remove.js\nfunction remove() {\n  var parent = this.parentNode;\n  if (parent) parent.removeChild(this);\n}\n\n/* harmony default export */ function selection_remove() {\n  return this.each(remove);\n}\n\n;// ./node_modules/d3-selection/src/selection/clone.js\nfunction selection_cloneShallow() {\n  var clone = this.cloneNode(false), parent = this.parentNode;\n  return parent ? parent.insertBefore(clone, this.nextSibling) : clone;\n}\n\nfunction selection_cloneDeep() {\n  var clone = this.cloneNode(true), parent = this.parentNode;\n  return parent ? parent.insertBefore(clone, this.nextSibling) : clone;\n}\n\n/* harmony default export */ function clone(deep) {\n  return this.select(deep ? selection_cloneDeep : selection_cloneShallow);\n}\n\n;// ./node_modules/d3-selection/src/selection/datum.js\n/* harmony default export */ function selection_datum(value) {\n  return arguments.length\n      ? this.property("__data__", value)\n      : this.node().__data__;\n}\n\n;// ./node_modules/d3-selection/src/selection/on.js\nfunction contextListener(listener) {\n  return function(event) {\n    listener.call(this, event, this.__data__);\n  };\n}\n\nfunction parseTypenames(typenames) {\n  return typenames.trim().split(/^|\\s+/).map(function(t) {\n    var name = "", i = t.indexOf(".");\n    if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);\n    return {type: t, name: name};\n  });\n}\n\nfunction onRemove(typename) {\n  return function() {\n    var on = this.__on;\n    if (!on) return;\n    for (var j = 0, i = -1, m = on.length, o; j < m; ++j) {\n      if (o = on[j], (!typename.type || o.type === typename.type) && o.name === typename.name) {\n        this.removeEventListener(o.type, o.listener, o.options);\n      } else {\n        on[++i] = o;\n      }\n    }\n    if (++i) on.length = i;\n    else delete this.__on;\n  };\n}\n\nfunction onAdd(typename, value, options) {\n  return function() {\n    var on = this.__on, o, listener = contextListener(value);\n    if (on) for (var j = 0, m = on.length; j < m; ++j) {\n      if ((o = on[j]).type === typename.type && o.name === typename.name) {\n        this.removeEventListener(o.type, o.listener, o.options);\n        this.addEventListener(o.type, o.listener = listener, o.options = options);\n        o.value = value;\n        return;\n      }\n    }\n    this.addEventListener(typename.type, listener, options);\n    o = {type: typename.type, name: typename.name, value: value, listener: listener, options: options};\n    if (!on) this.__on = [o];\n    else on.push(o);\n  };\n}\n\n/* harmony default export */ function on(typename, value, options) {\n  var typenames = parseTypenames(typename + ""), i, n = typenames.length, t;\n\n  if (arguments.length < 2) {\n    var on = this.node().__on;\n    if (on) for (var j = 0, m = on.length, o; j < m; ++j) {\n      for (i = 0, o = on[j]; i < n; ++i) {\n        if ((t = typenames[i]).type === o.type && t.name === o.name) {\n          return o.value;\n        }\n      }\n    }\n    return;\n  }\n\n  on = value ? onAdd : onRemove;\n  for (i = 0; i < n; ++i) this.each(on(typenames[i], value, options));\n  return this;\n}\n\n;// ./node_modules/d3-selection/src/selection/dispatch.js\n\n\nfunction dispatchEvent(node, type, params) {\n  var window = src_window(node),\n      event = window.CustomEvent;\n\n  if (typeof event === "function") {\n    event = new event(type, params);\n  } else {\n    event = window.document.createEvent("Event");\n    if (params) event.initEvent(type, params.bubbles, params.cancelable), event.detail = params.detail;\n    else event.initEvent(type, false, false);\n  }\n\n  node.dispatchEvent(event);\n}\n\nfunction dispatchConstant(type, params) {\n  return function() {\n    return dispatchEvent(this, type, params);\n  };\n}\n\nfunction dispatchFunction(type, params) {\n  return function() {\n    return dispatchEvent(this, type, params.apply(this, arguments));\n  };\n}\n\n/* harmony default export */ function selection_dispatch(type, params) {\n  return this.each((typeof params === "function"\n      ? dispatchFunction\n      : dispatchConstant)(type, params));\n}\n\n;// ./node_modules/d3-selection/src/selection/iterator.js\n/* harmony default export */ function* iterator() {\n  for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {\n    for (var group = groups[j], i = 0, n = group.length, node; i < n; ++i) {\n      if (node = group[i]) yield node;\n    }\n  }\n}\n\n;// ./node_modules/d3-selection/src/selection/index.js\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar root = [null];\n\nfunction Selection(groups, parents) {\n  this._groups = groups;\n  this._parents = parents;\n}\n\nfunction selection() {\n  return new Selection([[document.documentElement]], root);\n}\n\nfunction selection_selection() {\n  return this;\n}\n\nSelection.prototype = selection.prototype = {\n  constructor: Selection,\n  select: selection_select,\n  selectAll: selectAll,\n  selectChild: selectChild,\n  selectChildren: selectChildren,\n  filter: selection_filter,\n  data: data,\n  enter: enter,\n  exit: exit,\n  join: join,\n  merge: merge,\n  selection: selection_selection,\n  order: order,\n  sort: sort,\n  call: call,\n  nodes: nodes,\n  node: node,\n  size: size,\n  empty: selection_empty,\n  each: each,\n  attr: attr,\n  style: style,\n  property: property,\n  classed: classed,\n  text: selection_text,\n  html: html,\n  raise: selection_raise,\n  lower: selection_lower,\n  append: append,\n  insert: insert,\n  remove: selection_remove,\n  clone: clone,\n  datum: selection_datum,\n  on: on,\n  dispatch: selection_dispatch,\n  [Symbol.iterator]: iterator\n};\n\n/* harmony default export */ const src_selection = (selection);\n\n;// ./node_modules/d3-dispatch/src/dispatch.js\nvar noop = {value: () => {}};\n\nfunction dispatch_dispatch() {\n  for (var i = 0, n = arguments.length, _ = {}, t; i < n; ++i) {\n    if (!(t = arguments[i] + "") || (t in _) || /[\\s.]/.test(t)) throw new Error("illegal type: " + t);\n    _[t] = [];\n  }\n  return new Dispatch(_);\n}\n\nfunction Dispatch(_) {\n  this._ = _;\n}\n\nfunction dispatch_parseTypenames(typenames, types) {\n  return typenames.trim().split(/^|\\s+/).map(function(t) {\n    var name = "", i = t.indexOf(".");\n    if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);\n    if (t && !types.hasOwnProperty(t)) throw new Error("unknown type: " + t);\n    return {type: t, name: name};\n  });\n}\n\nDispatch.prototype = dispatch_dispatch.prototype = {\n  constructor: Dispatch,\n  on: function(typename, callback) {\n    var _ = this._,\n        T = dispatch_parseTypenames(typename + "", _),\n        t,\n        i = -1,\n        n = T.length;\n\n    // If no callback was specified, return the callback of the given type and name.\n    if (arguments.length < 2) {\n      while (++i < n) if ((t = (typename = T[i]).type) && (t = get(_[t], typename.name))) return t;\n      return;\n    }\n\n    // If a type was specified, set the callback for the given type and name.\n    // Otherwise, if a null callback was specified, remove callbacks of the given name.\n    if (callback != null && typeof callback !== "function") throw new Error("invalid callback: " + callback);\n    while (++i < n) {\n      if (t = (typename = T[i]).type) _[t] = set(_[t], typename.name, callback);\n      else if (callback == null) for (t in _) _[t] = set(_[t], typename.name, null);\n    }\n\n    return this;\n  },\n  copy: function() {\n    var copy = {}, _ = this._;\n    for (var t in _) copy[t] = _[t].slice();\n    return new Dispatch(copy);\n  },\n  call: function(type, that) {\n    if ((n = arguments.length - 2) > 0) for (var args = new Array(n), i = 0, n, t; i < n; ++i) args[i] = arguments[i + 2];\n    if (!this._.hasOwnProperty(type)) throw new Error("unknown type: " + type);\n    for (t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);\n  },\n  apply: function(type, that, args) {\n    if (!this._.hasOwnProperty(type)) throw new Error("unknown type: " + type);\n    for (var t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);\n  }\n};\n\nfunction get(type, name) {\n  for (var i = 0, n = type.length, c; i < n; ++i) {\n    if ((c = type[i]).name === name) {\n      return c.value;\n    }\n  }\n}\n\nfunction set(type, name, callback) {\n  for (var i = 0, n = type.length; i < n; ++i) {\n    if (type[i].name === name) {\n      type[i] = noop, type = type.slice(0, i).concat(type.slice(i + 1));\n      break;\n    }\n  }\n  if (callback != null) type.push({name: name, value: callback});\n  return type;\n}\n\n/* harmony default export */ const src_dispatch = (dispatch_dispatch);\n\n;// ./node_modules/d3-timer/src/timer.js\nvar timer_frame = 0, // is an animation frame pending?\n    timeout = 0, // is a timeout pending?\n    interval = 0, // are any timers active?\n    pokeDelay = 1000, // how frequently we check for clock skew\n    taskHead,\n    taskTail,\n    clockLast = 0,\n    clockNow = 0,\n    clockSkew = 0,\n    clock = typeof performance === "object" && performance.now ? performance : Date,\n    setFrame = typeof window === "object" && window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : function(f) { setTimeout(f, 17); };\n\nfunction now() {\n  return clockNow || (setFrame(clearNow), clockNow = clock.now() + clockSkew);\n}\n\nfunction clearNow() {\n  clockNow = 0;\n}\n\nfunction Timer() {\n  this._call =\n  this._time =\n  this._next = null;\n}\n\nTimer.prototype = timer.prototype = {\n  constructor: Timer,\n  restart: function(callback, delay, time) {\n    if (typeof callback !== "function") throw new TypeError("callback is not a function");\n    time = (time == null ? now() : +time) + (delay == null ? 0 : +delay);\n    if (!this._next && taskTail !== this) {\n      if (taskTail) taskTail._next = this;\n      else taskHead = this;\n      taskTail = this;\n    }\n    this._call = callback;\n    this._time = time;\n    sleep();\n  },\n  stop: function() {\n    if (this._call) {\n      this._call = null;\n      this._time = Infinity;\n      sleep();\n    }\n  }\n};\n\nfunction timer(callback, delay, time) {\n  var t = new Timer;\n  t.restart(callback, delay, time);\n  return t;\n}\n\nfunction timerFlush() {\n  now(); // Get the current time, if not already set.\n  ++timer_frame; // Pretend we’ve set an alarm, if we haven’t already.\n  var t = taskHead, e;\n  while (t) {\n    if ((e = clockNow - t._time) >= 0) t._call.call(undefined, e);\n    t = t._next;\n  }\n  --timer_frame;\n}\n\nfunction wake() {\n  clockNow = (clockLast = clock.now()) + clockSkew;\n  timer_frame = timeout = 0;\n  try {\n    timerFlush();\n  } finally {\n    timer_frame = 0;\n    nap();\n    clockNow = 0;\n  }\n}\n\nfunction poke() {\n  var now = clock.now(), delay = now - clockLast;\n  if (delay > pokeDelay) clockSkew -= delay, clockLast = now;\n}\n\nfunction nap() {\n  var t0, t1 = taskHead, t2, time = Infinity;\n  while (t1) {\n    if (t1._call) {\n      if (time > t1._time) time = t1._time;\n      t0 = t1, t1 = t1._next;\n    } else {\n      t2 = t1._next, t1._next = null;\n      t1 = t0 ? t0._next = t2 : taskHead = t2;\n    }\n  }\n  taskTail = t0;\n  sleep(time);\n}\n\nfunction sleep(time) {\n  if (timer_frame) return; // Soonest alarm already set, or will be.\n  if (timeout) timeout = clearTimeout(timeout);\n  var delay = time - clockNow; // Strictly less than if we recomputed clockNow.\n  if (delay > 24) {\n    if (time < Infinity) timeout = setTimeout(wake, time - clock.now() - clockSkew);\n    if (interval) interval = clearInterval(interval);\n  } else {\n    if (!interval) clockLast = clock.now(), interval = setInterval(poke, pokeDelay);\n    timer_frame = 1, setFrame(wake);\n  }\n}\n\n;// ./node_modules/d3-timer/src/timeout.js\n\n\n/* harmony default export */ function src_timeout(callback, delay, time) {\n  var t = new Timer;\n  delay = delay == null ? 0 : +delay;\n  t.restart(elapsed => {\n    t.stop();\n    callback(elapsed + delay);\n  }, delay, time);\n  return t;\n}\n\n;// ./node_modules/d3-transition/src/transition/schedule.js\n\n\n\nvar emptyOn = src_dispatch("start", "end", "cancel", "interrupt");\nvar emptyTween = [];\n\nvar CREATED = 0;\nvar SCHEDULED = 1;\nvar STARTING = 2;\nvar STARTED = 3;\nvar RUNNING = 4;\nvar ENDING = 5;\nvar ENDED = 6;\n\n/* harmony default export */ function schedule(node, name, id, index, group, timing) {\n  var schedules = node.__transition;\n  if (!schedules) node.__transition = {};\n  else if (id in schedules) return;\n  create(node, id, {\n    name: name,\n    index: index, // For context during callback.\n    group: group, // For context during callback.\n    on: emptyOn,\n    tween: emptyTween,\n    time: timing.time,\n    delay: timing.delay,\n    duration: timing.duration,\n    ease: timing.ease,\n    timer: null,\n    state: CREATED\n  });\n}\n\nfunction init(node, id) {\n  var schedule = schedule_get(node, id);\n  if (schedule.state > CREATED) throw new Error("too late; already scheduled");\n  return schedule;\n}\n\nfunction schedule_set(node, id) {\n  var schedule = schedule_get(node, id);\n  if (schedule.state > STARTED) throw new Error("too late; already running");\n  return schedule;\n}\n\nfunction schedule_get(node, id) {\n  var schedule = node.__transition;\n  if (!schedule || !(schedule = schedule[id])) throw new Error("transition not found");\n  return schedule;\n}\n\nfunction create(node, id, self) {\n  var schedules = node.__transition,\n      tween;\n\n  // Initialize the self timer when the transition is created.\n  // Note the actual delay is not known until the first callback!\n  schedules[id] = self;\n  self.timer = timer(schedule, 0, self.time);\n\n  function schedule(elapsed) {\n    self.state = SCHEDULED;\n    self.timer.restart(start, self.delay, self.time);\n\n    // If the elapsed delay is less than our first sleep, start immediately.\n    if (self.delay <= elapsed) start(elapsed - self.delay);\n  }\n\n  function start(elapsed) {\n    var i, j, n, o;\n\n    // If the state is not SCHEDULED, then we previously errored on start.\n    if (self.state !== SCHEDULED) return stop();\n\n    for (i in schedules) {\n      o = schedules[i];\n      if (o.name !== self.name) continue;\n\n      // While this element already has a starting transition during this frame,\n      // defer starting an interrupting transition until that transition has a\n      // chance to tick (and possibly end); see d3/d3-transition#54!\n      if (o.state === STARTED) return src_timeout(start);\n\n      // Interrupt the active transition, if any.\n      if (o.state === RUNNING) {\n        o.state = ENDED;\n        o.timer.stop();\n        o.on.call("interrupt", node, node.__data__, o.index, o.group);\n        delete schedules[i];\n      }\n\n      // Cancel any pre-empted transitions.\n      else if (+i < id) {\n        o.state = ENDED;\n        o.timer.stop();\n        o.on.call("cancel", node, node.__data__, o.index, o.group);\n        delete schedules[i];\n      }\n    }\n\n    // Defer the first tick to end of the current frame; see d3/d3#1576.\n    // Note the transition may be canceled after start and before the first tick!\n    // Note this must be scheduled before the start event; see d3/d3-transition#16!\n    // Assuming this is successful, subsequent callbacks go straight to tick.\n    src_timeout(function() {\n      if (self.state === STARTED) {\n        self.state = RUNNING;\n        self.timer.restart(tick, self.delay, self.time);\n        tick(elapsed);\n      }\n    });\n\n    // Dispatch the start event.\n    // Note this must be done before the tween are initialized.\n    self.state = STARTING;\n    self.on.call("start", node, node.__data__, self.index, self.group);\n    if (self.state !== STARTING) return; // interrupted\n    self.state = STARTED;\n\n    // Initialize the tween, deleting null tween.\n    tween = new Array(n = self.tween.length);\n    for (i = 0, j = -1; i < n; ++i) {\n      if (o = self.tween[i].value.call(node, node.__data__, self.index, self.group)) {\n        tween[++j] = o;\n      }\n    }\n    tween.length = j + 1;\n  }\n\n  function tick(elapsed) {\n    var t = elapsed < self.duration ? self.ease.call(null, elapsed / self.duration) : (self.timer.restart(stop), self.state = ENDING, 1),\n        i = -1,\n        n = tween.length;\n\n    while (++i < n) {\n      tween[i].call(node, t);\n    }\n\n    // Dispatch the end event.\n    if (self.state === ENDING) {\n      self.on.call("end", node, node.__data__, self.index, self.group);\n      stop();\n    }\n  }\n\n  function stop() {\n    self.state = ENDED;\n    self.timer.stop();\n    delete schedules[id];\n    for (var i in schedules) return; // eslint-disable-line no-unused-vars\n    delete node.__transition;\n  }\n}\n\n;// ./node_modules/d3-transition/src/interrupt.js\n\n\n/* harmony default export */ function src_interrupt(node, name) {\n  var schedules = node.__transition,\n      schedule,\n      active,\n      empty = true,\n      i;\n\n  if (!schedules) return;\n\n  name = name == null ? null : name + "";\n\n  for (i in schedules) {\n    if ((schedule = schedules[i]).name !== name) { empty = false; continue; }\n    active = schedule.state > STARTING && schedule.state < ENDING;\n    schedule.state = ENDED;\n    schedule.timer.stop();\n    schedule.on.call(active ? "interrupt" : "cancel", node, node.__data__, schedule.index, schedule.group);\n    delete schedules[i];\n  }\n\n  if (empty) delete node.__transition;\n}\n\n;// ./node_modules/d3-transition/src/selection/interrupt.js\n\n\n/* harmony default export */ function selection_interrupt(name) {\n  return this.each(function() {\n    src_interrupt(this, name);\n  });\n}\n\n;// ./node_modules/d3-interpolate/src/number.js\n/* harmony default export */ function src_number(a, b) {\n  return a = +a, b = +b, function(t) {\n    return a * (1 - t) + b * t;\n  };\n}\n\n;// ./node_modules/d3-interpolate/src/transform/decompose.js\nvar degrees = 180 / Math.PI;\n\nvar decompose_identity = {\n  translateX: 0,\n  translateY: 0,\n  rotate: 0,\n  skewX: 0,\n  scaleX: 1,\n  scaleY: 1\n};\n\n/* harmony default export */ function decompose(a, b, c, d, e, f) {\n  var scaleX, scaleY, skewX;\n  if (scaleX = Math.sqrt(a * a + b * b)) a /= scaleX, b /= scaleX;\n  if (skewX = a * c + b * d) c -= a * skewX, d -= b * skewX;\n  if (scaleY = Math.sqrt(c * c + d * d)) c /= scaleY, d /= scaleY, skewX /= scaleY;\n  if (a * d < b * c) a = -a, b = -b, skewX = -skewX, scaleX = -scaleX;\n  return {\n    translateX: e,\n    translateY: f,\n    rotate: Math.atan2(b, a) * degrees,\n    skewX: Math.atan(skewX) * degrees,\n    scaleX: scaleX,\n    scaleY: scaleY\n  };\n}\n\n;// ./node_modules/d3-interpolate/src/transform/parse.js\n\n\nvar svgNode;\n\n/* eslint-disable no-undef */\nfunction parseCss(value) {\n  const m = new (typeof DOMMatrix === "function" ? DOMMatrix : WebKitCSSMatrix)(value + "");\n  return m.isIdentity ? decompose_identity : decompose(m.a, m.b, m.c, m.d, m.e, m.f);\n}\n\nfunction parseSvg(value) {\n  if (value == null) return decompose_identity;\n  if (!svgNode) svgNode = document.createElementNS("http://www.w3.org/2000/svg", "g");\n  svgNode.setAttribute("transform", value);\n  if (!(value = svgNode.transform.baseVal.consolidate())) return decompose_identity;\n  value = value.matrix;\n  return decompose(value.a, value.b, value.c, value.d, value.e, value.f);\n}\n\n;// ./node_modules/d3-interpolate/src/transform/index.js\n\n\n\nfunction interpolateTransform(parse, pxComma, pxParen, degParen) {\n\n  function pop(s) {\n    return s.length ? s.pop() + " " : "";\n  }\n\n  function translate(xa, ya, xb, yb, s, q) {\n    if (xa !== xb || ya !== yb) {\n      var i = s.push("translate(", null, pxComma, null, pxParen);\n      q.push({i: i - 4, x: src_number(xa, xb)}, {i: i - 2, x: src_number(ya, yb)});\n    } else if (xb || yb) {\n      s.push("translate(" + xb + pxComma + yb + pxParen);\n    }\n  }\n\n  function rotate(a, b, s, q) {\n    if (a !== b) {\n      if (a - b > 180) b += 360; else if (b - a > 180) a += 360; // shortest path\n      q.push({i: s.push(pop(s) + "rotate(", null, degParen) - 2, x: src_number(a, b)});\n    } else if (b) {\n      s.push(pop(s) + "rotate(" + b + degParen);\n    }\n  }\n\n  function skewX(a, b, s, q) {\n    if (a !== b) {\n      q.push({i: s.push(pop(s) + "skewX(", null, degParen) - 2, x: src_number(a, b)});\n    } else if (b) {\n      s.push(pop(s) + "skewX(" + b + degParen);\n    }\n  }\n\n  function scale(xa, ya, xb, yb, s, q) {\n    if (xa !== xb || ya !== yb) {\n      var i = s.push(pop(s) + "scale(", null, ",", null, ")");\n      q.push({i: i - 4, x: src_number(xa, xb)}, {i: i - 2, x: src_number(ya, yb)});\n    } else if (xb !== 1 || yb !== 1) {\n      s.push(pop(s) + "scale(" + xb + "," + yb + ")");\n    }\n  }\n\n  return function(a, b) {\n    var s = [], // string constants and placeholders\n        q = []; // number interpolators\n    a = parse(a), b = parse(b);\n    translate(a.translateX, a.translateY, b.translateX, b.translateY, s, q);\n    rotate(a.rotate, b.rotate, s, q);\n    skewX(a.skewX, b.skewX, s, q);\n    scale(a.scaleX, a.scaleY, b.scaleX, b.scaleY, s, q);\n    a = b = null; // gc\n    return function(t) {\n      var i = -1, n = q.length, o;\n      while (++i < n) s[(o = q[i]).i] = o.x(t);\n      return s.join("");\n    };\n  };\n}\n\nvar interpolateTransformCss = interpolateTransform(parseCss, "px, ", "px)", "deg)");\nvar interpolateTransformSvg = interpolateTransform(parseSvg, ", ", ")", ")");\n\n;// ./node_modules/d3-transition/src/transition/tween.js\n\n\nfunction tweenRemove(id, name) {\n  var tween0, tween1;\n  return function() {\n    var schedule = schedule_set(this, id),\n        tween = schedule.tween;\n\n    // If this node shared tween with the previous node,\n    // just assign the updated shared tween and we’re done!\n    // Otherwise, copy-on-write.\n    if (tween !== tween0) {\n      tween1 = tween0 = tween;\n      for (var i = 0, n = tween1.length; i < n; ++i) {\n        if (tween1[i].name === name) {\n          tween1 = tween1.slice();\n          tween1.splice(i, 1);\n          break;\n        }\n      }\n    }\n\n    schedule.tween = tween1;\n  };\n}\n\nfunction tweenFunction(id, name, value) {\n  var tween0, tween1;\n  if (typeof value !== "function") throw new Error;\n  return function() {\n    var schedule = schedule_set(this, id),\n        tween = schedule.tween;\n\n    // If this node shared tween with the previous node,\n    // just assign the updated shared tween and we’re done!\n    // Otherwise, copy-on-write.\n    if (tween !== tween0) {\n      tween1 = (tween0 = tween).slice();\n      for (var t = {name: name, value: value}, i = 0, n = tween1.length; i < n; ++i) {\n        if (tween1[i].name === name) {\n          tween1[i] = t;\n          break;\n        }\n      }\n      if (i === n) tween1.push(t);\n    }\n\n    schedule.tween = tween1;\n  };\n}\n\n/* harmony default export */ function tween(name, value) {\n  var id = this._id;\n\n  name += "";\n\n  if (arguments.length < 2) {\n    var tween = schedule_get(this.node(), id).tween;\n    for (var i = 0, n = tween.length, t; i < n; ++i) {\n      if ((t = tween[i]).name === name) {\n        return t.value;\n      }\n    }\n    return null;\n  }\n\n  return this.each((value == null ? tweenRemove : tweenFunction)(id, name, value));\n}\n\nfunction tweenValue(transition, name, value) {\n  var id = transition._id;\n\n  transition.each(function() {\n    var schedule = schedule_set(this, id);\n    (schedule.value || (schedule.value = {}))[name] = value.apply(this, arguments);\n  });\n\n  return function(node) {\n    return schedule_get(node, id).value[name];\n  };\n}\n\n;// ./node_modules/d3-color/src/define.js\n/* harmony default export */ function src_define(constructor, factory, prototype) {\n  constructor.prototype = factory.prototype = prototype;\n  prototype.constructor = constructor;\n}\n\nfunction extend(parent, definition) {\n  var prototype = Object.create(parent.prototype);\n  for (var key in definition) prototype[key] = definition[key];\n  return prototype;\n}\n\n;// ./node_modules/d3-color/src/color.js\n\n\nfunction Color() {}\n\nvar darker = 0.7;\nvar brighter = 1 / darker;\n\nvar reI = "\\\\s*([+-]?\\\\d+)\\\\s*",\n    reN = "\\\\s*([+-]?(?:\\\\d*\\\\.)?\\\\d+(?:[eE][+-]?\\\\d+)?)\\\\s*",\n    reP = "\\\\s*([+-]?(?:\\\\d*\\\\.)?\\\\d+(?:[eE][+-]?\\\\d+)?)%\\\\s*",\n    reHex = /^#([0-9a-f]{3,8})$/,\n    reRgbInteger = new RegExp(`^rgb\\\\(${reI},${reI},${reI}\\\\)$`),\n    reRgbPercent = new RegExp(`^rgb\\\\(${reP},${reP},${reP}\\\\)$`),\n    reRgbaInteger = new RegExp(`^rgba\\\\(${reI},${reI},${reI},${reN}\\\\)$`),\n    reRgbaPercent = new RegExp(`^rgba\\\\(${reP},${reP},${reP},${reN}\\\\)$`),\n    reHslPercent = new RegExp(`^hsl\\\\(${reN},${reP},${reP}\\\\)$`),\n    reHslaPercent = new RegExp(`^hsla\\\\(${reN},${reP},${reP},${reN}\\\\)$`);\n\nvar named = {\n  aliceblue: 0xf0f8ff,\n  antiquewhite: 0xfaebd7,\n  aqua: 0x00ffff,\n  aquamarine: 0x7fffd4,\n  azure: 0xf0ffff,\n  beige: 0xf5f5dc,\n  bisque: 0xffe4c4,\n  black: 0x000000,\n  blanchedalmond: 0xffebcd,\n  blue: 0x0000ff,\n  blueviolet: 0x8a2be2,\n  brown: 0xa52a2a,\n  burlywood: 0xdeb887,\n  cadetblue: 0x5f9ea0,\n  chartreuse: 0x7fff00,\n  chocolate: 0xd2691e,\n  coral: 0xff7f50,\n  cornflowerblue: 0x6495ed,\n  cornsilk: 0xfff8dc,\n  crimson: 0xdc143c,\n  cyan: 0x00ffff,\n  darkblue: 0x00008b,\n  darkcyan: 0x008b8b,\n  darkgoldenrod: 0xb8860b,\n  darkgray: 0xa9a9a9,\n  darkgreen: 0x006400,\n  darkgrey: 0xa9a9a9,\n  darkkhaki: 0xbdb76b,\n  darkmagenta: 0x8b008b,\n  darkolivegreen: 0x556b2f,\n  darkorange: 0xff8c00,\n  darkorchid: 0x9932cc,\n  darkred: 0x8b0000,\n  darksalmon: 0xe9967a,\n  darkseagreen: 0x8fbc8f,\n  darkslateblue: 0x483d8b,\n  darkslategray: 0x2f4f4f,\n  darkslategrey: 0x2f4f4f,\n  darkturquoise: 0x00ced1,\n  darkviolet: 0x9400d3,\n  deeppink: 0xff1493,\n  deepskyblue: 0x00bfff,\n  dimgray: 0x696969,\n  dimgrey: 0x696969,\n  dodgerblue: 0x1e90ff,\n  firebrick: 0xb22222,\n  floralwhite: 0xfffaf0,\n  forestgreen: 0x228b22,\n  fuchsia: 0xff00ff,\n  gainsboro: 0xdcdcdc,\n  ghostwhite: 0xf8f8ff,\n  gold: 0xffd700,\n  goldenrod: 0xdaa520,\n  gray: 0x808080,\n  green: 0x008000,\n  greenyellow: 0xadff2f,\n  grey: 0x808080,\n  honeydew: 0xf0fff0,\n  hotpink: 0xff69b4,\n  indianred: 0xcd5c5c,\n  indigo: 0x4b0082,\n  ivory: 0xfffff0,\n  khaki: 0xf0e68c,\n  lavender: 0xe6e6fa,\n  lavenderblush: 0xfff0f5,\n  lawngreen: 0x7cfc00,\n  lemonchiffon: 0xfffacd,\n  lightblue: 0xadd8e6,\n  lightcoral: 0xf08080,\n  lightcyan: 0xe0ffff,\n  lightgoldenrodyellow: 0xfafad2,\n  lightgray: 0xd3d3d3,\n  lightgreen: 0x90ee90,\n  lightgrey: 0xd3d3d3,\n  lightpink: 0xffb6c1,\n  lightsalmon: 0xffa07a,\n  lightseagreen: 0x20b2aa,\n  lightskyblue: 0x87cefa,\n  lightslategray: 0x778899,\n  lightslategrey: 0x778899,\n  lightsteelblue: 0xb0c4de,\n  lightyellow: 0xffffe0,\n  lime: 0x00ff00,\n  limegreen: 0x32cd32,\n  linen: 0xfaf0e6,\n  magenta: 0xff00ff,\n  maroon: 0x800000,\n  mediumaquamarine: 0x66cdaa,\n  mediumblue: 0x0000cd,\n  mediumorchid: 0xba55d3,\n  mediumpurple: 0x9370db,\n  mediumseagreen: 0x3cb371,\n  mediumslateblue: 0x7b68ee,\n  mediumspringgreen: 0x00fa9a,\n  mediumturquoise: 0x48d1cc,\n  mediumvioletred: 0xc71585,\n  midnightblue: 0x191970,\n  mintcream: 0xf5fffa,\n  mistyrose: 0xffe4e1,\n  moccasin: 0xffe4b5,\n  navajowhite: 0xffdead,\n  navy: 0x000080,\n  oldlace: 0xfdf5e6,\n  olive: 0x808000,\n  olivedrab: 0x6b8e23,\n  orange: 0xffa500,\n  orangered: 0xff4500,\n  orchid: 0xda70d6,\n  palegoldenrod: 0xeee8aa,\n  palegreen: 0x98fb98,\n  paleturquoise: 0xafeeee,\n  palevioletred: 0xdb7093,\n  papayawhip: 0xffefd5,\n  peachpuff: 0xffdab9,\n  peru: 0xcd853f,\n  pink: 0xffc0cb,\n  plum: 0xdda0dd,\n  powderblue: 0xb0e0e6,\n  purple: 0x800080,\n  rebeccapurple: 0x663399,\n  red: 0xff0000,\n  rosybrown: 0xbc8f8f,\n  royalblue: 0x4169e1,\n  saddlebrown: 0x8b4513,\n  salmon: 0xfa8072,\n  sandybrown: 0xf4a460,\n  seagreen: 0x2e8b57,\n  seashell: 0xfff5ee,\n  sienna: 0xa0522d,\n  silver: 0xc0c0c0,\n  skyblue: 0x87ceeb,\n  slateblue: 0x6a5acd,\n  slategray: 0x708090,\n  slategrey: 0x708090,\n  snow: 0xfffafa,\n  springgreen: 0x00ff7f,\n  steelblue: 0x4682b4,\n  tan: 0xd2b48c,\n  teal: 0x008080,\n  thistle: 0xd8bfd8,\n  tomato: 0xff6347,\n  turquoise: 0x40e0d0,\n  violet: 0xee82ee,\n  wheat: 0xf5deb3,\n  white: 0xffffff,\n  whitesmoke: 0xf5f5f5,\n  yellow: 0xffff00,\n  yellowgreen: 0x9acd32\n};\n\nsrc_define(Color, color, {\n  copy(channels) {\n    return Object.assign(new this.constructor, this, channels);\n  },\n  displayable() {\n    return this.rgb().displayable();\n  },\n  hex: color_formatHex, // Deprecated! Use color.formatHex.\n  formatHex: color_formatHex,\n  formatHex8: color_formatHex8,\n  formatHsl: color_formatHsl,\n  formatRgb: color_formatRgb,\n  toString: color_formatRgb\n});\n\nfunction color_formatHex() {\n  return this.rgb().formatHex();\n}\n\nfunction color_formatHex8() {\n  return this.rgb().formatHex8();\n}\n\nfunction color_formatHsl() {\n  return hslConvert(this).formatHsl();\n}\n\nfunction color_formatRgb() {\n  return this.rgb().formatRgb();\n}\n\nfunction color(format) {\n  var m, l;\n  format = (format + "").trim().toLowerCase();\n  return (m = reHex.exec(format)) ? (l = m[1].length, m = parseInt(m[1], 16), l === 6 ? rgbn(m) // #ff0000\n      : l === 3 ? new Rgb((m >> 8 & 0xf) | (m >> 4 & 0xf0), (m >> 4 & 0xf) | (m & 0xf0), ((m & 0xf) << 4) | (m & 0xf), 1) // #f00\n      : l === 8 ? rgba(m >> 24 & 0xff, m >> 16 & 0xff, m >> 8 & 0xff, (m & 0xff) / 0xff) // #ff000000\n      : l === 4 ? rgba((m >> 12 & 0xf) | (m >> 8 & 0xf0), (m >> 8 & 0xf) | (m >> 4 & 0xf0), (m >> 4 & 0xf) | (m & 0xf0), (((m & 0xf) << 4) | (m & 0xf)) / 0xff) // #f000\n      : null) // invalid hex\n      : (m = reRgbInteger.exec(format)) ? new Rgb(m[1], m[2], m[3], 1) // rgb(255, 0, 0)\n      : (m = reRgbPercent.exec(format)) ? new Rgb(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, 1) // rgb(100%, 0%, 0%)\n      : (m = reRgbaInteger.exec(format)) ? rgba(m[1], m[2], m[3], m[4]) // rgba(255, 0, 0, 1)\n      : (m = reRgbaPercent.exec(format)) ? rgba(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, m[4]) // rgb(100%, 0%, 0%, 1)\n      : (m = reHslPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, 1) // hsl(120, 50%, 50%)\n      : (m = reHslaPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, m[4]) // hsla(120, 50%, 50%, 1)\n      : named.hasOwnProperty(format) ? rgbn(named[format]) // eslint-disable-line no-prototype-builtins\n      : format === "transparent" ? new Rgb(NaN, NaN, NaN, 0)\n      : null;\n}\n\nfunction rgbn(n) {\n  return new Rgb(n >> 16 & 0xff, n >> 8 & 0xff, n & 0xff, 1);\n}\n\nfunction rgba(r, g, b, a) {\n  if (a <= 0) r = g = b = NaN;\n  return new Rgb(r, g, b, a);\n}\n\nfunction rgbConvert(o) {\n  if (!(o instanceof Color)) o = color(o);\n  if (!o) return new Rgb;\n  o = o.rgb();\n  return new Rgb(o.r, o.g, o.b, o.opacity);\n}\n\nfunction color_rgb(r, g, b, opacity) {\n  return arguments.length === 1 ? rgbConvert(r) : new Rgb(r, g, b, opacity == null ? 1 : opacity);\n}\n\nfunction Rgb(r, g, b, opacity) {\n  this.r = +r;\n  this.g = +g;\n  this.b = +b;\n  this.opacity = +opacity;\n}\n\nsrc_define(Rgb, color_rgb, extend(Color, {\n  brighter(k) {\n    k = k == null ? brighter : Math.pow(brighter, k);\n    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);\n  },\n  darker(k) {\n    k = k == null ? darker : Math.pow(darker, k);\n    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);\n  },\n  rgb() {\n    return this;\n  },\n  clamp() {\n    return new Rgb(clampi(this.r), clampi(this.g), clampi(this.b), clampa(this.opacity));\n  },\n  displayable() {\n    return (-0.5 <= this.r && this.r < 255.5)\n        && (-0.5 <= this.g && this.g < 255.5)\n        && (-0.5 <= this.b && this.b < 255.5)\n        && (0 <= this.opacity && this.opacity <= 1);\n  },\n  hex: rgb_formatHex, // Deprecated! Use color.formatHex.\n  formatHex: rgb_formatHex,\n  formatHex8: rgb_formatHex8,\n  formatRgb: rgb_formatRgb,\n  toString: rgb_formatRgb\n}));\n\nfunction rgb_formatHex() {\n  return `#${hex(this.r)}${hex(this.g)}${hex(this.b)}`;\n}\n\nfunction rgb_formatHex8() {\n  return `#${hex(this.r)}${hex(this.g)}${hex(this.b)}${hex((isNaN(this.opacity) ? 1 : this.opacity) * 255)}`;\n}\n\nfunction rgb_formatRgb() {\n  const a = clampa(this.opacity);\n  return `${a === 1 ? "rgb(" : "rgba("}${clampi(this.r)}, ${clampi(this.g)}, ${clampi(this.b)}${a === 1 ? ")" : `, ${a})`}`;\n}\n\nfunction clampa(opacity) {\n  return isNaN(opacity) ? 1 : Math.max(0, Math.min(1, opacity));\n}\n\nfunction clampi(value) {\n  return Math.max(0, Math.min(255, Math.round(value) || 0));\n}\n\nfunction hex(value) {\n  value = clampi(value);\n  return (value < 16 ? "0" : "") + value.toString(16);\n}\n\nfunction hsla(h, s, l, a) {\n  if (a <= 0) h = s = l = NaN;\n  else if (l <= 0 || l >= 1) h = s = NaN;\n  else if (s <= 0) h = NaN;\n  return new Hsl(h, s, l, a);\n}\n\nfunction hslConvert(o) {\n  if (o instanceof Hsl) return new Hsl(o.h, o.s, o.l, o.opacity);\n  if (!(o instanceof Color)) o = color(o);\n  if (!o) return new Hsl;\n  if (o instanceof Hsl) return o;\n  o = o.rgb();\n  var r = o.r / 255,\n      g = o.g / 255,\n      b = o.b / 255,\n      min = Math.min(r, g, b),\n      max = Math.max(r, g, b),\n      h = NaN,\n      s = max - min,\n      l = (max + min) / 2;\n  if (s) {\n    if (r === max) h = (g - b) / s + (g < b) * 6;\n    else if (g === max) h = (b - r) / s + 2;\n    else h = (r - g) / s + 4;\n    s /= l < 0.5 ? max + min : 2 - max - min;\n    h *= 60;\n  } else {\n    s = l > 0 && l < 1 ? 0 : h;\n  }\n  return new Hsl(h, s, l, o.opacity);\n}\n\nfunction hsl(h, s, l, opacity) {\n  return arguments.length === 1 ? hslConvert(h) : new Hsl(h, s, l, opacity == null ? 1 : opacity);\n}\n\nfunction Hsl(h, s, l, opacity) {\n  this.h = +h;\n  this.s = +s;\n  this.l = +l;\n  this.opacity = +opacity;\n}\n\nsrc_define(Hsl, hsl, extend(Color, {\n  brighter(k) {\n    k = k == null ? brighter : Math.pow(brighter, k);\n    return new Hsl(this.h, this.s, this.l * k, this.opacity);\n  },\n  darker(k) {\n    k = k == null ? darker : Math.pow(darker, k);\n    return new Hsl(this.h, this.s, this.l * k, this.opacity);\n  },\n  rgb() {\n    var h = this.h % 360 + (this.h < 0) * 360,\n        s = isNaN(h) || isNaN(this.s) ? 0 : this.s,\n        l = this.l,\n        m2 = l + (l < 0.5 ? l : 1 - l) * s,\n        m1 = 2 * l - m2;\n    return new Rgb(\n      hsl2rgb(h >= 240 ? h - 240 : h + 120, m1, m2),\n      hsl2rgb(h, m1, m2),\n      hsl2rgb(h < 120 ? h + 240 : h - 120, m1, m2),\n      this.opacity\n    );\n  },\n  clamp() {\n    return new Hsl(clamph(this.h), clampt(this.s), clampt(this.l), clampa(this.opacity));\n  },\n  displayable() {\n    return (0 <= this.s && this.s <= 1 || isNaN(this.s))\n        && (0 <= this.l && this.l <= 1)\n        && (0 <= this.opacity && this.opacity <= 1);\n  },\n  formatHsl() {\n    const a = clampa(this.opacity);\n    return `${a === 1 ? "hsl(" : "hsla("}${clamph(this.h)}, ${clampt(this.s) * 100}%, ${clampt(this.l) * 100}%${a === 1 ? ")" : `, ${a})`}`;\n  }\n}));\n\nfunction clamph(value) {\n  value = (value || 0) % 360;\n  return value < 0 ? value + 360 : value;\n}\n\nfunction clampt(value) {\n  return Math.max(0, Math.min(1, value || 0));\n}\n\n/* From FvD 13.37, CSS Color Module Level 3 */\nfunction hsl2rgb(h, m1, m2) {\n  return (h < 60 ? m1 + (m2 - m1) * h / 60\n      : h < 180 ? m2\n      : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60\n      : m1) * 255;\n}\n\n;// ./node_modules/d3-interpolate/src/basis.js\nfunction basis(t1, v0, v1, v2, v3) {\n  var t2 = t1 * t1, t3 = t2 * t1;\n  return ((1 - 3 * t1 + 3 * t2 - t3) * v0\n      + (4 - 6 * t2 + 3 * t3) * v1\n      + (1 + 3 * t1 + 3 * t2 - 3 * t3) * v2\n      + t3 * v3) / 6;\n}\n\n/* harmony default export */ function src_basis(values) {\n  var n = values.length - 1;\n  return function(t) {\n    var i = t <= 0 ? (t = 0) : t >= 1 ? (t = 1, n - 1) : Math.floor(t * n),\n        v1 = values[i],\n        v2 = values[i + 1],\n        v0 = i > 0 ? values[i - 1] : 2 * v1 - v2,\n        v3 = i < n - 1 ? values[i + 2] : 2 * v2 - v1;\n    return basis((t - i / n) * n, v0, v1, v2, v3);\n  };\n}\n\n;// ./node_modules/d3-interpolate/src/basisClosed.js\n\n\n/* harmony default export */ function basisClosed(values) {\n  var n = values.length;\n  return function(t) {\n    var i = Math.floor(((t %= 1) < 0 ? ++t : t) * n),\n        v0 = values[(i + n - 1) % n],\n        v1 = values[i % n],\n        v2 = values[(i + 1) % n],\n        v3 = values[(i + 2) % n];\n    return basis((t - i / n) * n, v0, v1, v2, v3);\n  };\n}\n\n;// ./node_modules/d3-interpolate/src/constant.js\n/* harmony default export */ const d3_interpolate_src_constant = (x => () => x);\n\n;// ./node_modules/d3-interpolate/src/color.js\n\n\nfunction linear(a, d) {\n  return function(t) {\n    return a + t * d;\n  };\n}\n\nfunction exponential(a, b, y) {\n  return a = Math.pow(a, y), b = Math.pow(b, y) - a, y = 1 / y, function(t) {\n    return Math.pow(a + t * b, y);\n  };\n}\n\nfunction hue(a, b) {\n  var d = b - a;\n  return d ? linear(a, d > 180 || d < -180 ? d - 360 * Math.round(d / 360) : d) : constant(isNaN(a) ? b : a);\n}\n\nfunction gamma(y) {\n  return (y = +y) === 1 ? nogamma : function(a, b) {\n    return b - a ? exponential(a, b, y) : d3_interpolate_src_constant(isNaN(a) ? b : a);\n  };\n}\n\nfunction nogamma(a, b) {\n  var d = b - a;\n  return d ? linear(a, d) : d3_interpolate_src_constant(isNaN(a) ? b : a);\n}\n\n;// ./node_modules/d3-interpolate/src/rgb.js\n\n\n\n\n\n/* harmony default export */ const rgb = ((function rgbGamma(y) {\n  var color = gamma(y);\n\n  function rgb(start, end) {\n    var r = color((start = color_rgb(start)).r, (end = color_rgb(end)).r),\n        g = color(start.g, end.g),\n        b = color(start.b, end.b),\n        opacity = nogamma(start.opacity, end.opacity);\n    return function(t) {\n      start.r = r(t);\n      start.g = g(t);\n      start.b = b(t);\n      start.opacity = opacity(t);\n      return start + "";\n    };\n  }\n\n  rgb.gamma = rgbGamma;\n\n  return rgb;\n})(1));\n\nfunction rgbSpline(spline) {\n  return function(colors) {\n    var n = colors.length,\n        r = new Array(n),\n        g = new Array(n),\n        b = new Array(n),\n        i, color;\n    for (i = 0; i < n; ++i) {\n      color = color_rgb(colors[i]);\n      r[i] = color.r || 0;\n      g[i] = color.g || 0;\n      b[i] = color.b || 0;\n    }\n    r = spline(r);\n    g = spline(g);\n    b = spline(b);\n    color.opacity = 1;\n    return function(t) {\n      color.r = r(t);\n      color.g = g(t);\n      color.b = b(t);\n      return color + "";\n    };\n  };\n}\n\nvar rgbBasis = rgbSpline(src_basis);\nvar rgbBasisClosed = rgbSpline(basisClosed);\n\n;// ./node_modules/d3-interpolate/src/string.js\n\n\nvar reA = /[-+]?(?:\\d+\\.?\\d*|\\.?\\d+)(?:[eE][-+]?\\d+)?/g,\n    reB = new RegExp(reA.source, "g");\n\nfunction zero(b) {\n  return function() {\n    return b;\n  };\n}\n\nfunction one(b) {\n  return function(t) {\n    return b(t) + "";\n  };\n}\n\n/* harmony default export */ function string(a, b) {\n  var bi = reA.lastIndex = reB.lastIndex = 0, // scan index for next number in b\n      am, // current match in a\n      bm, // current match in b\n      bs, // string preceding current number in b, if any\n      i = -1, // index in s\n      s = [], // string constants and placeholders\n      q = []; // number interpolators\n\n  // Coerce inputs to strings.\n  a = a + "", b = b + "";\n\n  // Interpolate pairs of numbers in a & b.\n  while ((am = reA.exec(a))\n      && (bm = reB.exec(b))) {\n    if ((bs = bm.index) > bi) { // a string precedes the next number in b\n      bs = b.slice(bi, bs);\n      if (s[i]) s[i] += bs; // coalesce with previous string\n      else s[++i] = bs;\n    }\n    if ((am = am[0]) === (bm = bm[0])) { // numbers in a & b match\n      if (s[i]) s[i] += bm; // coalesce with previous string\n      else s[++i] = bm;\n    } else { // interpolate non-matching numbers\n      s[++i] = null;\n      q.push({i: i, x: src_number(am, bm)});\n    }\n    bi = reB.lastIndex;\n  }\n\n  // Add remains of b.\n  if (bi < b.length) {\n    bs = b.slice(bi);\n    if (s[i]) s[i] += bs; // coalesce with previous string\n    else s[++i] = bs;\n  }\n\n  // Special optimization for only a single match.\n  // Otherwise, interpolate each of the numbers and rejoin the string.\n  return s.length < 2 ? (q[0]\n      ? one(q[0].x)\n      : zero(b))\n      : (b = q.length, function(t) {\n          for (var i = 0, o; i < b; ++i) s[(o = q[i]).i] = o.x(t);\n          return s.join("");\n        });\n}\n\n;// ./node_modules/d3-transition/src/transition/interpolate.js\n\n\n\n/* harmony default export */ function transition_interpolate(a, b) {\n  var c;\n  return (typeof b === "number" ? src_number\n      : b instanceof color ? rgb\n      : (c = color(b)) ? (b = c, rgb)\n      : string)(a, b);\n}\n\n;// ./node_modules/d3-transition/src/transition/attr.js\n\n\n\n\n\nfunction attr_attrRemove(name) {\n  return function() {\n    this.removeAttribute(name);\n  };\n}\n\nfunction attr_attrRemoveNS(fullname) {\n  return function() {\n    this.removeAttributeNS(fullname.space, fullname.local);\n  };\n}\n\nfunction attr_attrConstant(name, interpolate, value1) {\n  var string00,\n      string1 = value1 + "",\n      interpolate0;\n  return function() {\n    var string0 = this.getAttribute(name);\n    return string0 === string1 ? null\n        : string0 === string00 ? interpolate0\n        : interpolate0 = interpolate(string00 = string0, value1);\n  };\n}\n\nfunction attr_attrConstantNS(fullname, interpolate, value1) {\n  var string00,\n      string1 = value1 + "",\n      interpolate0;\n  return function() {\n    var string0 = this.getAttributeNS(fullname.space, fullname.local);\n    return string0 === string1 ? null\n        : string0 === string00 ? interpolate0\n        : interpolate0 = interpolate(string00 = string0, value1);\n  };\n}\n\nfunction attr_attrFunction(name, interpolate, value) {\n  var string00,\n      string10,\n      interpolate0;\n  return function() {\n    var string0, value1 = value(this), string1;\n    if (value1 == null) return void this.removeAttribute(name);\n    string0 = this.getAttribute(name);\n    string1 = value1 + "";\n    return string0 === string1 ? null\n        : string0 === string00 && string1 === string10 ? interpolate0\n        : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));\n  };\n}\n\nfunction attr_attrFunctionNS(fullname, interpolate, value) {\n  var string00,\n      string10,\n      interpolate0;\n  return function() {\n    var string0, value1 = value(this), string1;\n    if (value1 == null) return void this.removeAttributeNS(fullname.space, fullname.local);\n    string0 = this.getAttributeNS(fullname.space, fullname.local);\n    string1 = value1 + "";\n    return string0 === string1 ? null\n        : string0 === string00 && string1 === string10 ? interpolate0\n        : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));\n  };\n}\n\n/* harmony default export */ function transition_attr(name, value) {\n  var fullname = namespace(name), i = fullname === "transform" ? interpolateTransformSvg : transition_interpolate;\n  return this.attrTween(name, typeof value === "function"\n      ? (fullname.local ? attr_attrFunctionNS : attr_attrFunction)(fullname, i, tweenValue(this, "attr." + name, value))\n      : value == null ? (fullname.local ? attr_attrRemoveNS : attr_attrRemove)(fullname)\n      : (fullname.local ? attr_attrConstantNS : attr_attrConstant)(fullname, i, value));\n}\n\n;// ./node_modules/d3-transition/src/transition/attrTween.js\n\n\nfunction attrInterpolate(name, i) {\n  return function(t) {\n    this.setAttribute(name, i.call(this, t));\n  };\n}\n\nfunction attrInterpolateNS(fullname, i) {\n  return function(t) {\n    this.setAttributeNS(fullname.space, fullname.local, i.call(this, t));\n  };\n}\n\nfunction attrTweenNS(fullname, value) {\n  var t0, i0;\n  function tween() {\n    var i = value.apply(this, arguments);\n    if (i !== i0) t0 = (i0 = i) && attrInterpolateNS(fullname, i);\n    return t0;\n  }\n  tween._value = value;\n  return tween;\n}\n\nfunction attrTween(name, value) {\n  var t0, i0;\n  function tween() {\n    var i = value.apply(this, arguments);\n    if (i !== i0) t0 = (i0 = i) && attrInterpolate(name, i);\n    return t0;\n  }\n  tween._value = value;\n  return tween;\n}\n\n/* harmony default export */ function transition_attrTween(name, value) {\n  var key = "attr." + name;\n  if (arguments.length < 2) return (key = this.tween(key)) && key._value;\n  if (value == null) return this.tween(key, null);\n  if (typeof value !== "function") throw new Error;\n  var fullname = namespace(name);\n  return this.tween(key, (fullname.local ? attrTweenNS : attrTween)(fullname, value));\n}\n\n;// ./node_modules/d3-transition/src/transition/delay.js\n\n\nfunction delayFunction(id, value) {\n  return function() {\n    init(this, id).delay = +value.apply(this, arguments);\n  };\n}\n\nfunction delayConstant(id, value) {\n  return value = +value, function() {\n    init(this, id).delay = value;\n  };\n}\n\n/* harmony default export */ function delay(value) {\n  var id = this._id;\n\n  return arguments.length\n      ? this.each((typeof value === "function"\n          ? delayFunction\n          : delayConstant)(id, value))\n      : schedule_get(this.node(), id).delay;\n}\n\n;// ./node_modules/d3-transition/src/transition/duration.js\n\n\nfunction durationFunction(id, value) {\n  return function() {\n    schedule_set(this, id).duration = +value.apply(this, arguments);\n  };\n}\n\nfunction durationConstant(id, value) {\n  return value = +value, function() {\n    schedule_set(this, id).duration = value;\n  };\n}\n\n/* harmony default export */ function duration(value) {\n  var id = this._id;\n\n  return arguments.length\n      ? this.each((typeof value === "function"\n          ? durationFunction\n          : durationConstant)(id, value))\n      : schedule_get(this.node(), id).duration;\n}\n\n;// ./node_modules/d3-transition/src/transition/ease.js\n\n\nfunction easeConstant(id, value) {\n  if (typeof value !== "function") throw new Error;\n  return function() {\n    schedule_set(this, id).ease = value;\n  };\n}\n\n/* harmony default export */ function ease(value) {\n  var id = this._id;\n\n  return arguments.length\n      ? this.each(easeConstant(id, value))\n      : schedule_get(this.node(), id).ease;\n}\n\n;// ./node_modules/d3-transition/src/transition/easeVarying.js\n\n\nfunction easeVarying(id, value) {\n  return function() {\n    var v = value.apply(this, arguments);\n    if (typeof v !== "function") throw new Error;\n    schedule_set(this, id).ease = v;\n  };\n}\n\n/* harmony default export */ function transition_easeVarying(value) {\n  if (typeof value !== "function") throw new Error;\n  return this.each(easeVarying(this._id, value));\n}\n\n;// ./node_modules/d3-transition/src/transition/filter.js\n\n\n\n/* harmony default export */ function transition_filter(match) {\n  if (typeof match !== "function") match = matcher(match);\n\n  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {\n    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {\n      if ((node = group[i]) && match.call(node, node.__data__, i, group)) {\n        subgroup.push(node);\n      }\n    }\n  }\n\n  return new Transition(subgroups, this._parents, this._name, this._id);\n}\n\n;// ./node_modules/d3-transition/src/transition/merge.js\n\n\n/* harmony default export */ function transition_merge(transition) {\n  if (transition._id !== this._id) throw new Error;\n\n  for (var groups0 = this._groups, groups1 = transition._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {\n    for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {\n      if (node = group0[i] || group1[i]) {\n        merge[i] = node;\n      }\n    }\n  }\n\n  for (; j < m0; ++j) {\n    merges[j] = groups0[j];\n  }\n\n  return new Transition(merges, this._parents, this._name, this._id);\n}\n\n;// ./node_modules/d3-transition/src/transition/on.js\n\n\nfunction start(name) {\n  return (name + "").trim().split(/^|\\s+/).every(function(t) {\n    var i = t.indexOf(".");\n    if (i >= 0) t = t.slice(0, i);\n    return !t || t === "start";\n  });\n}\n\nfunction onFunction(id, name, listener) {\n  var on0, on1, sit = start(name) ? init : schedule_set;\n  return function() {\n    var schedule = sit(this, id),\n        on = schedule.on;\n\n    // If this node shared a dispatch with the previous node,\n    // just assign the updated shared dispatch and we’re done!\n    // Otherwise, copy-on-write.\n    if (on !== on0) (on1 = (on0 = on).copy()).on(name, listener);\n\n    schedule.on = on1;\n  };\n}\n\n/* harmony default export */ function transition_on(name, listener) {\n  var id = this._id;\n\n  return arguments.length < 2\n      ? schedule_get(this.node(), id).on.on(name)\n      : this.each(onFunction(id, name, listener));\n}\n\n;// ./node_modules/d3-transition/src/transition/remove.js\nfunction removeFunction(id) {\n  return function() {\n    var parent = this.parentNode;\n    for (var i in this.__transition) if (+i !== id) return;\n    if (parent) parent.removeChild(this);\n  };\n}\n\n/* harmony default export */ function transition_remove() {\n  return this.on("end.remove", removeFunction(this._id));\n}\n\n;// ./node_modules/d3-transition/src/transition/select.js\n\n\n\n\n/* harmony default export */ function transition_select(select) {\n  var name = this._name,\n      id = this._id;\n\n  if (typeof select !== "function") select = selector(select);\n\n  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {\n    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {\n      if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {\n        if ("__data__" in node) subnode.__data__ = node.__data__;\n        subgroup[i] = subnode;\n        schedule(subgroup[i], name, id, i, subgroup, schedule_get(node, id));\n      }\n    }\n  }\n\n  return new Transition(subgroups, this._parents, name, id);\n}\n\n;// ./node_modules/d3-transition/src/transition/selectAll.js\n\n\n\n\n/* harmony default export */ function transition_selectAll(select) {\n  var name = this._name,\n      id = this._id;\n\n  if (typeof select !== "function") select = selectorAll(select);\n\n  for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {\n    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {\n      if (node = group[i]) {\n        for (var children = select.call(node, node.__data__, i, group), child, inherit = schedule_get(node, id), k = 0, l = children.length; k < l; ++k) {\n          if (child = children[k]) {\n            schedule(child, name, id, k, children, inherit);\n          }\n        }\n        subgroups.push(children);\n        parents.push(node);\n      }\n    }\n  }\n\n  return new Transition(subgroups, parents, name, id);\n}\n\n;// ./node_modules/d3-transition/src/transition/selection.js\n\n\nvar selection_Selection = src_selection.prototype.constructor;\n\n/* harmony default export */ function transition_selection() {\n  return new selection_Selection(this._groups, this._parents);\n}\n\n;// ./node_modules/d3-transition/src/transition/style.js\n\n\n\n\n\n\nfunction styleNull(name, interpolate) {\n  var string00,\n      string10,\n      interpolate0;\n  return function() {\n    var string0 = styleValue(this, name),\n        string1 = (this.style.removeProperty(name), styleValue(this, name));\n    return string0 === string1 ? null\n        : string0 === string00 && string1 === string10 ? interpolate0\n        : interpolate0 = interpolate(string00 = string0, string10 = string1);\n  };\n}\n\nfunction style_styleRemove(name) {\n  return function() {\n    this.style.removeProperty(name);\n  };\n}\n\nfunction style_styleConstant(name, interpolate, value1) {\n  var string00,\n      string1 = value1 + "",\n      interpolate0;\n  return function() {\n    var string0 = styleValue(this, name);\n    return string0 === string1 ? null\n        : string0 === string00 ? interpolate0\n        : interpolate0 = interpolate(string00 = string0, value1);\n  };\n}\n\nfunction style_styleFunction(name, interpolate, value) {\n  var string00,\n      string10,\n      interpolate0;\n  return function() {\n    var string0 = styleValue(this, name),\n        value1 = value(this),\n        string1 = value1 + "";\n    if (value1 == null) string1 = value1 = (this.style.removeProperty(name), styleValue(this, name));\n    return string0 === string1 ? null\n        : string0 === string00 && string1 === string10 ? interpolate0\n        : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));\n  };\n}\n\nfunction styleMaybeRemove(id, name) {\n  var on0, on1, listener0, key = "style." + name, event = "end." + key, remove;\n  return function() {\n    var schedule = schedule_set(this, id),\n        on = schedule.on,\n        listener = schedule.value[key] == null ? remove || (remove = style_styleRemove(name)) : undefined;\n\n    // If this node shared a dispatch with the previous node,\n    // just assign the updated shared dispatch and we’re done!\n    // Otherwise, copy-on-write.\n    if (on !== on0 || listener0 !== listener) (on1 = (on0 = on).copy()).on(event, listener0 = listener);\n\n    schedule.on = on1;\n  };\n}\n\n/* harmony default export */ function transition_style(name, value, priority) {\n  var i = (name += "") === "transform" ? interpolateTransformCss : transition_interpolate;\n  return value == null ? this\n      .styleTween(name, styleNull(name, i))\n      .on("end.style." + name, style_styleRemove(name))\n    : typeof value === "function" ? this\n      .styleTween(name, style_styleFunction(name, i, tweenValue(this, "style." + name, value)))\n      .each(styleMaybeRemove(this._id, name))\n    : this\n      .styleTween(name, style_styleConstant(name, i, value), priority)\n      .on("end.style." + name, null);\n}\n\n;// ./node_modules/d3-transition/src/transition/styleTween.js\nfunction styleInterpolate(name, i, priority) {\n  return function(t) {\n    this.style.setProperty(name, i.call(this, t), priority);\n  };\n}\n\nfunction styleTween(name, value, priority) {\n  var t, i0;\n  function tween() {\n    var i = value.apply(this, arguments);\n    if (i !== i0) t = (i0 = i) && styleInterpolate(name, i, priority);\n    return t;\n  }\n  tween._value = value;\n  return tween;\n}\n\n/* harmony default export */ function transition_styleTween(name, value, priority) {\n  var key = "style." + (name += "");\n  if (arguments.length < 2) return (key = this.tween(key)) && key._value;\n  if (value == null) return this.tween(key, null);\n  if (typeof value !== "function") throw new Error;\n  return this.tween(key, styleTween(name, value, priority == null ? "" : priority));\n}\n\n;// ./node_modules/d3-transition/src/transition/text.js\n\n\nfunction text_textConstant(value) {\n  return function() {\n    this.textContent = value;\n  };\n}\n\nfunction text_textFunction(value) {\n  return function() {\n    var value1 = value(this);\n    this.textContent = value1 == null ? "" : value1;\n  };\n}\n\n/* harmony default export */ function transition_text(value) {\n  return this.tween("text", typeof value === "function"\n      ? text_textFunction(tweenValue(this, "text", value))\n      : text_textConstant(value == null ? "" : value + ""));\n}\n\n;// ./node_modules/d3-transition/src/transition/textTween.js\nfunction textInterpolate(i) {\n  return function(t) {\n    this.textContent = i.call(this, t);\n  };\n}\n\nfunction textTween(value) {\n  var t0, i0;\n  function tween() {\n    var i = value.apply(this, arguments);\n    if (i !== i0) t0 = (i0 = i) && textInterpolate(i);\n    return t0;\n  }\n  tween._value = value;\n  return tween;\n}\n\n/* harmony default export */ function transition_textTween(value) {\n  var key = "text";\n  if (arguments.length < 1) return (key = this.tween(key)) && key._value;\n  if (value == null) return this.tween(key, null);\n  if (typeof value !== "function") throw new Error;\n  return this.tween(key, textTween(value));\n}\n\n;// ./node_modules/d3-transition/src/transition/transition.js\n\n\n\n/* harmony default export */ function transition() {\n  var name = this._name,\n      id0 = this._id,\n      id1 = newId();\n\n  for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {\n    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {\n      if (node = group[i]) {\n        var inherit = schedule_get(node, id0);\n        schedule(node, name, id1, i, group, {\n          time: inherit.time + inherit.delay + inherit.duration,\n          delay: 0,\n          duration: inherit.duration,\n          ease: inherit.ease\n        });\n      }\n    }\n  }\n\n  return new Transition(groups, this._parents, name, id1);\n}\n\n;// ./node_modules/d3-transition/src/transition/end.js\n\n\n/* harmony default export */ function end() {\n  var on0, on1, that = this, id = that._id, size = that.size();\n  return new Promise(function(resolve, reject) {\n    var cancel = {value: reject},\n        end = {value: function() { if (--size === 0) resolve(); }};\n\n    that.each(function() {\n      var schedule = schedule_set(this, id),\n          on = schedule.on;\n\n      // If this node shared a dispatch with the previous node,\n      // just assign the updated shared dispatch and we’re done!\n      // Otherwise, copy-on-write.\n      if (on !== on0) {\n        on1 = (on0 = on).copy();\n        on1._.cancel.push(cancel);\n        on1._.interrupt.push(cancel);\n        on1._.end.push(end);\n      }\n\n      schedule.on = on1;\n    });\n\n    // The selection was empty, resolve end immediately\n    if (size === 0) resolve();\n  });\n}\n\n;// ./node_modules/d3-transition/src/transition/index.js\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar id = 0;\n\nfunction Transition(groups, parents, name, id) {\n  this._groups = groups;\n  this._parents = parents;\n  this._name = name;\n  this._id = id;\n}\n\nfunction transition_transition(name) {\n  return src_selection().transition(name);\n}\n\nfunction newId() {\n  return ++id;\n}\n\nvar selection_prototype = src_selection.prototype;\n\nTransition.prototype = transition_transition.prototype = {\n  constructor: Transition,\n  select: transition_select,\n  selectAll: transition_selectAll,\n  selectChild: selection_prototype.selectChild,\n  selectChildren: selection_prototype.selectChildren,\n  filter: transition_filter,\n  merge: transition_merge,\n  selection: transition_selection,\n  transition: transition,\n  call: selection_prototype.call,\n  nodes: selection_prototype.nodes,\n  node: selection_prototype.node,\n  size: selection_prototype.size,\n  empty: selection_prototype.empty,\n  each: selection_prototype.each,\n  on: transition_on,\n  attr: transition_attr,\n  attrTween: transition_attrTween,\n  style: transition_style,\n  styleTween: transition_styleTween,\n  text: transition_text,\n  textTween: transition_textTween,\n  remove: transition_remove,\n  tween: tween,\n  delay: delay,\n  duration: duration,\n  ease: ease,\n  easeVarying: transition_easeVarying,\n  end: end,\n  [Symbol.iterator]: selection_prototype[Symbol.iterator]\n};\n\n;// ./node_modules/d3-ease/src/cubic.js\nfunction cubicIn(t) {\n  return t * t * t;\n}\n\nfunction cubicOut(t) {\n  return --t * t * t + 1;\n}\n\nfunction cubicInOut(t) {\n  return ((t *= 2) <= 1 ? t * t * t : (t -= 2) * t * t + 2) / 2;\n}\n\n;// ./node_modules/d3-transition/src/selection/transition.js\n\n\n\n\n\nvar defaultTiming = {\n  time: null, // Set on use.\n  delay: 0,\n  duration: 250,\n  ease: cubicInOut\n};\n\nfunction inherit(node, id) {\n  var timing;\n  while (!(timing = node.__transition) || !(timing = timing[id])) {\n    if (!(node = node.parentNode)) {\n      throw new Error(`transition ${id} not found`);\n    }\n  }\n  return timing;\n}\n\n/* harmony default export */ function selection_transition(name) {\n  var id,\n      timing;\n\n  if (name instanceof Transition) {\n    id = name._id, name = name._name;\n  } else {\n    id = newId(), (timing = defaultTiming).time = now(), name = name == null ? null : name + "";\n  }\n\n  for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {\n    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {\n      if (node = group[i]) {\n        schedule(node, name, id, i, group, timing || inherit(node, id));\n      }\n    }\n  }\n\n  return new Transition(groups, this._parents, name, id);\n}\n\n;// ./node_modules/d3-transition/src/selection/index.js\n\n\n\n\nsrc_selection.prototype.interrupt = selection_interrupt;\nsrc_selection.prototype.transition = selection_transition;\n\n;// ./node_modules/d3-transition/src/index.js\n\n\n\n\n\n;// ./node_modules/d3-brush/src/brush.js\n\n\n\n\n\n\n\n\n\nvar MODE_DRAG = {name: "drag"},\n    MODE_SPACE = {name: "space"},\n    MODE_HANDLE = {name: "handle"},\n    MODE_CENTER = {name: "center"};\n\nconst {abs, max: brush_max, min} = Math;\n\nfunction number1(e) {\n  return [+e[0], +e[1]];\n}\n\nfunction number2(e) {\n  return [number1(e[0]), number1(e[1])];\n}\n\nvar X = {\n  name: "x",\n  handles: ["w", "e"].map(type),\n  input: function(x, e) { return x == null ? null : [[+x[0], e[0][1]], [+x[1], e[1][1]]]; },\n  output: function(xy) { return xy && [xy[0][0], xy[1][0]]; }\n};\n\nvar Y = {\n  name: "y",\n  handles: ["n", "s"].map(type),\n  input: function(y, e) { return y == null ? null : [[e[0][0], +y[0]], [e[1][0], +y[1]]]; },\n  output: function(xy) { return xy && [xy[0][1], xy[1][1]]; }\n};\n\nvar XY = {\n  name: "xy",\n  handles: ["n", "w", "e", "s", "nw", "ne", "sw", "se"].map(type),\n  input: function(xy) { return xy == null ? null : number2(xy); },\n  output: function(xy) { return xy; }\n};\n\nvar cursors = {\n  overlay: "crosshair",\n  selection: "move",\n  n: "ns-resize",\n  e: "ew-resize",\n  s: "ns-resize",\n  w: "ew-resize",\n  nw: "nwse-resize",\n  ne: "nesw-resize",\n  se: "nwse-resize",\n  sw: "nesw-resize"\n};\n\nvar flipX = {\n  e: "w",\n  w: "e",\n  nw: "ne",\n  ne: "nw",\n  se: "sw",\n  sw: "se"\n};\n\nvar flipY = {\n  n: "s",\n  s: "n",\n  nw: "sw",\n  ne: "se",\n  se: "ne",\n  sw: "nw"\n};\n\nvar signsX = {\n  overlay: +1,\n  selection: +1,\n  n: null,\n  e: +1,\n  s: null,\n  w: -1,\n  nw: -1,\n  ne: +1,\n  se: +1,\n  sw: -1\n};\n\nvar signsY = {\n  overlay: +1,\n  selection: +1,\n  n: -1,\n  e: null,\n  s: +1,\n  w: null,\n  nw: -1,\n  ne: -1,\n  se: +1,\n  sw: +1\n};\n\nfunction type(t) {\n  return {type: t};\n}\n\n// Ignore right-click, since that should open the context menu.\nfunction defaultFilter(event) {\n  return !event.ctrlKey && !event.button;\n}\n\nfunction defaultExtent() {\n  var svg = this.ownerSVGElement || this;\n  if (svg.hasAttribute("viewBox")) {\n    svg = svg.viewBox.baseVal;\n    return [[svg.x, svg.y], [svg.x + svg.width, svg.y + svg.height]];\n  }\n  return [[0, 0], [svg.width.baseVal.value, svg.height.baseVal.value]];\n}\n\nfunction defaultTouchable() {\n  return navigator.maxTouchPoints || ("ontouchstart" in this);\n}\n\n// Like d3.local, but with the name “__brush” rather than auto-generated.\nfunction local(node) {\n  while (!node.__brush) if (!(node = node.parentNode)) return;\n  return node.__brush;\n}\n\nfunction brush_empty(extent) {\n  return extent[0][0] === extent[1][0]\n      || extent[0][1] === extent[1][1];\n}\n\nfunction brushSelection(node) {\n  var state = node.__brush;\n  return state ? state.dim.output(state.selection) : null;\n}\n\nfunction brushX() {\n  return brush_brush(X);\n}\n\nfunction brushY() {\n  return brush_brush(Y);\n}\n\n/* harmony default export */ function brush() {\n  return brush_brush(XY);\n}\n\nfunction brush_brush(dim) {\n  var extent = defaultExtent,\n      filter = defaultFilter,\n      touchable = defaultTouchable,\n      keys = true,\n      listeners = dispatch("start", "brush", "end"),\n      handleSize = 6,\n      touchending;\n\n  function brush(group) {\n    var overlay = group\n        .property("__brush", initialize)\n      .selectAll(".overlay")\n      .data([type("overlay")]);\n\n    overlay.enter().append("rect")\n        .attr("class", "overlay")\n        .attr("pointer-events", "all")\n        .attr("cursor", cursors.overlay)\n      .merge(overlay)\n        .each(function() {\n          var extent = local(this).extent;\n          select(this)\n              .attr("x", extent[0][0])\n              .attr("y", extent[0][1])\n              .attr("width", extent[1][0] - extent[0][0])\n              .attr("height", extent[1][1] - extent[0][1]);\n        });\n\n    group.selectAll(".selection")\n      .data([type("selection")])\n      .enter().append("rect")\n        .attr("class", "selection")\n        .attr("cursor", cursors.selection)\n        .attr("fill", "#777")\n        .attr("fill-opacity", 0.3)\n        .attr("stroke", "#fff")\n        .attr("shape-rendering", "crispEdges");\n\n    var handle = group.selectAll(".handle")\n      .data(dim.handles, function(d) { return d.type; });\n\n    handle.exit().remove();\n\n    handle.enter().append("rect")\n        .attr("class", function(d) { return "handle handle--" + d.type; })\n        .attr("cursor", function(d) { return cursors[d.type]; });\n\n    group\n        .each(redraw)\n        .attr("fill", "none")\n        .attr("pointer-events", "all")\n        .on("mousedown.brush", started)\n      .filter(touchable)\n        .on("touchstart.brush", started)\n        .on("touchmove.brush", touchmoved)\n        .on("touchend.brush touchcancel.brush", touchended)\n        .style("touch-action", "none")\n        .style("-webkit-tap-highlight-color", "rgba(0,0,0,0)");\n  }\n\n  brush.move = function(group, selection, event) {\n    if (group.tween) {\n      group\n          .on("start.brush", function(event) { emitter(this, arguments).beforestart().start(event); })\n          .on("interrupt.brush end.brush", function(event) { emitter(this, arguments).end(event); })\n          .tween("brush", function() {\n            var that = this,\n                state = that.__brush,\n                emit = emitter(that, arguments),\n                selection0 = state.selection,\n                selection1 = dim.input(typeof selection === "function" ? selection.apply(this, arguments) : selection, state.extent),\n                i = interpolate(selection0, selection1);\n\n            function tween(t) {\n              state.selection = t === 1 && selection1 === null ? null : i(t);\n              redraw.call(that);\n              emit.brush();\n            }\n\n            return selection0 !== null && selection1 !== null ? tween : tween(1);\n          });\n    } else {\n      group\n          .each(function() {\n            var that = this,\n                args = arguments,\n                state = that.__brush,\n                selection1 = dim.input(typeof selection === "function" ? selection.apply(that, args) : selection, state.extent),\n                emit = emitter(that, args).beforestart();\n\n            interrupt(that);\n            state.selection = selection1 === null ? null : selection1;\n            redraw.call(that);\n            emit.start(event).brush(event).end(event);\n          });\n    }\n  };\n\n  brush.clear = function(group, event) {\n    brush.move(group, null, event);\n  };\n\n  function redraw() {\n    var group = select(this),\n        selection = local(this).selection;\n\n    if (selection) {\n      group.selectAll(".selection")\n          .style("display", null)\n          .attr("x", selection[0][0])\n          .attr("y", selection[0][1])\n          .attr("width", selection[1][0] - selection[0][0])\n          .attr("height", selection[1][1] - selection[0][1]);\n\n      group.selectAll(".handle")\n          .style("display", null)\n          .attr("x", function(d) { return d.type[d.type.length - 1] === "e" ? selection[1][0] - handleSize / 2 : selection[0][0] - handleSize / 2; })\n          .attr("y", function(d) { return d.type[0] === "s" ? selection[1][1] - handleSize / 2 : selection[0][1] - handleSize / 2; })\n          .attr("width", function(d) { return d.type === "n" || d.type === "s" ? selection[1][0] - selection[0][0] + handleSize : handleSize; })\n          .attr("height", function(d) { return d.type === "e" || d.type === "w" ? selection[1][1] - selection[0][1] + handleSize : handleSize; });\n    }\n\n    else {\n      group.selectAll(".selection,.handle")\n          .style("display", "none")\n          .attr("x", null)\n          .attr("y", null)\n          .attr("width", null)\n          .attr("height", null);\n    }\n  }\n\n  function emitter(that, args, clean) {\n    var emit = that.__brush.emitter;\n    return emit && (!clean || !emit.clean) ? emit : new Emitter(that, args, clean);\n  }\n\n  function Emitter(that, args, clean) {\n    this.that = that;\n    this.args = args;\n    this.state = that.__brush;\n    this.active = 0;\n    this.clean = clean;\n  }\n\n  Emitter.prototype = {\n    beforestart: function() {\n      if (++this.active === 1) this.state.emitter = this, this.starting = true;\n      return this;\n    },\n    start: function(event, mode) {\n      if (this.starting) this.starting = false, this.emit("start", event, mode);\n      else this.emit("brush", event);\n      return this;\n    },\n    brush: function(event, mode) {\n      this.emit("brush", event, mode);\n      return this;\n    },\n    end: function(event, mode) {\n      if (--this.active === 0) delete this.state.emitter, this.emit("end", event, mode);\n      return this;\n    },\n    emit: function(type, event, mode) {\n      var d = select(this.that).datum();\n      listeners.call(\n        type,\n        this.that,\n        new BrushEvent(type, {\n          sourceEvent: event,\n          target: brush,\n          selection: dim.output(this.state.selection),\n          mode,\n          dispatch: listeners\n        }),\n        d\n      );\n    }\n  };\n\n  function started(event) {\n    if (touchending && !event.touches) return;\n    if (!filter.apply(this, arguments)) return;\n\n    var that = this,\n        type = event.target.__data__.type,\n        mode = (keys && event.metaKey ? type = "overlay" : type) === "selection" ? MODE_DRAG : (keys && event.altKey ? MODE_CENTER : MODE_HANDLE),\n        signX = dim === Y ? null : signsX[type],\n        signY = dim === X ? null : signsY[type],\n        state = local(that),\n        extent = state.extent,\n        selection = state.selection,\n        W = extent[0][0], w0, w1,\n        N = extent[0][1], n0, n1,\n        E = extent[1][0], e0, e1,\n        S = extent[1][1], s0, s1,\n        dx = 0,\n        dy = 0,\n        moving,\n        shifting = signX && signY && keys && event.shiftKey,\n        lockX,\n        lockY,\n        points = Array.from(event.touches || [event], t => {\n          const i = t.identifier;\n          t = pointer(t, that);\n          t.point0 = t.slice();\n          t.identifier = i;\n          return t;\n        });\n\n    interrupt(that);\n    var emit = emitter(that, arguments, true).beforestart();\n\n    if (type === "overlay") {\n      if (selection) moving = true;\n      const pts = [points[0], points[1] || points[0]];\n      state.selection = selection = [[\n          w0 = dim === Y ? W : min(pts[0][0], pts[1][0]),\n          n0 = dim === X ? N : min(pts[0][1], pts[1][1])\n        ], [\n          e0 = dim === Y ? E : brush_max(pts[0][0], pts[1][0]),\n          s0 = dim === X ? S : brush_max(pts[0][1], pts[1][1])\n        ]];\n      if (points.length > 1) move(event);\n    } else {\n      w0 = selection[0][0];\n      n0 = selection[0][1];\n      e0 = selection[1][0];\n      s0 = selection[1][1];\n    }\n\n    w1 = w0;\n    n1 = n0;\n    e1 = e0;\n    s1 = s0;\n\n    var group = select(that)\n        .attr("pointer-events", "none");\n\n    var overlay = group.selectAll(".overlay")\n        .attr("cursor", cursors[type]);\n\n    if (event.touches) {\n      emit.moved = moved;\n      emit.ended = ended;\n    } else {\n      var view = select(event.view)\n          .on("mousemove.brush", moved, true)\n          .on("mouseup.brush", ended, true);\n      if (keys) view\n          .on("keydown.brush", keydowned, true)\n          .on("keyup.brush", keyupped, true)\n\n      dragDisable(event.view);\n    }\n\n    redraw.call(that);\n    emit.start(event, mode.name);\n\n    function moved(event) {\n      for (const p of event.changedTouches || [event]) {\n        for (const d of points)\n          if (d.identifier === p.identifier) d.cur = pointer(p, that);\n      }\n      if (shifting && !lockX && !lockY && points.length === 1) {\n        const point = points[0];\n        if (abs(point.cur[0] - point[0]) > abs(point.cur[1] - point[1]))\n          lockY = true;\n        else\n          lockX = true;\n      }\n      for (const point of points)\n        if (point.cur) point[0] = point.cur[0], point[1] = point.cur[1];\n      moving = true;\n      noevent(event);\n      move(event);\n    }\n\n    function move(event) {\n      const point = points[0], point0 = point.point0;\n      var t;\n\n      dx = point[0] - point0[0];\n      dy = point[1] - point0[1];\n\n      switch (mode) {\n        case MODE_SPACE:\n        case MODE_DRAG: {\n          if (signX) dx = brush_max(W - w0, min(E - e0, dx)), w1 = w0 + dx, e1 = e0 + dx;\n          if (signY) dy = brush_max(N - n0, min(S - s0, dy)), n1 = n0 + dy, s1 = s0 + dy;\n          break;\n        }\n        case MODE_HANDLE: {\n          if (points[1]) {\n            if (signX) w1 = brush_max(W, min(E, points[0][0])), e1 = brush_max(W, min(E, points[1][0])), signX = 1;\n            if (signY) n1 = brush_max(N, min(S, points[0][1])), s1 = brush_max(N, min(S, points[1][1])), signY = 1;\n          } else {\n            if (signX < 0) dx = brush_max(W - w0, min(E - w0, dx)), w1 = w0 + dx, e1 = e0;\n            else if (signX > 0) dx = brush_max(W - e0, min(E - e0, dx)), w1 = w0, e1 = e0 + dx;\n            if (signY < 0) dy = brush_max(N - n0, min(S - n0, dy)), n1 = n0 + dy, s1 = s0;\n            else if (signY > 0) dy = brush_max(N - s0, min(S - s0, dy)), n1 = n0, s1 = s0 + dy;\n          }\n          break;\n        }\n        case MODE_CENTER: {\n          if (signX) w1 = brush_max(W, min(E, w0 - dx * signX)), e1 = brush_max(W, min(E, e0 + dx * signX));\n          if (signY) n1 = brush_max(N, min(S, n0 - dy * signY)), s1 = brush_max(N, min(S, s0 + dy * signY));\n          break;\n        }\n      }\n\n      if (e1 < w1) {\n        signX *= -1;\n        t = w0, w0 = e0, e0 = t;\n        t = w1, w1 = e1, e1 = t;\n        if (type in flipX) overlay.attr("cursor", cursors[type = flipX[type]]);\n      }\n\n      if (s1 < n1) {\n        signY *= -1;\n        t = n0, n0 = s0, s0 = t;\n        t = n1, n1 = s1, s1 = t;\n        if (type in flipY) overlay.attr("cursor", cursors[type = flipY[type]]);\n      }\n\n      if (state.selection) selection = state.selection; // May be set by brush.move!\n      if (lockX) w1 = selection[0][0], e1 = selection[1][0];\n      if (lockY) n1 = selection[0][1], s1 = selection[1][1];\n\n      if (selection[0][0] !== w1\n          || selection[0][1] !== n1\n          || selection[1][0] !== e1\n          || selection[1][1] !== s1) {\n        state.selection = [[w1, n1], [e1, s1]];\n        redraw.call(that);\n        emit.brush(event, mode.name);\n      }\n    }\n\n    function ended(event) {\n      nopropagation(event);\n      if (event.touches) {\n        if (event.touches.length) return;\n        if (touchending) clearTimeout(touchending);\n        touchending = setTimeout(function() { touchending = null; }, 500); // Ghost clicks are delayed!\n      } else {\n        dragEnable(event.view, moving);\n        view.on("keydown.brush keyup.brush mousemove.brush mouseup.brush", null);\n      }\n      group.attr("pointer-events", "all");\n      overlay.attr("cursor", cursors.overlay);\n      if (state.selection) selection = state.selection; // May be set by brush.move (on start)!\n      if (brush_empty(selection)) state.selection = null, redraw.call(that);\n      emit.end(event, mode.name);\n    }\n\n    function keydowned(event) {\n      switch (event.keyCode) {\n        case 16: { // SHIFT\n          shifting = signX && signY;\n          break;\n        }\n        case 18: { // ALT\n          if (mode === MODE_HANDLE) {\n            if (signX) e0 = e1 - dx * signX, w0 = w1 + dx * signX;\n            if (signY) s0 = s1 - dy * signY, n0 = n1 + dy * signY;\n            mode = MODE_CENTER;\n            move(event);\n          }\n          break;\n        }\n        case 32: { // SPACE; takes priority over ALT\n          if (mode === MODE_HANDLE || mode === MODE_CENTER) {\n            if (signX < 0) e0 = e1 - dx; else if (signX > 0) w0 = w1 - dx;\n            if (signY < 0) s0 = s1 - dy; else if (signY > 0) n0 = n1 - dy;\n            mode = MODE_SPACE;\n            overlay.attr("cursor", cursors.selection);\n            move(event);\n          }\n          break;\n        }\n        default: return;\n      }\n      noevent(event);\n    }\n\n    function keyupped(event) {\n      switch (event.keyCode) {\n        case 16: { // SHIFT\n          if (shifting) {\n            lockX = lockY = shifting = false;\n            move(event);\n          }\n          break;\n        }\n        case 18: { // ALT\n          if (mode === MODE_CENTER) {\n            if (signX < 0) e0 = e1; else if (signX > 0) w0 = w1;\n            if (signY < 0) s0 = s1; else if (signY > 0) n0 = n1;\n            mode = MODE_HANDLE;\n            move(event);\n          }\n          break;\n        }\n        case 32: { // SPACE\n          if (mode === MODE_SPACE) {\n            if (event.altKey) {\n              if (signX) e0 = e1 - dx * signX, w0 = w1 + dx * signX;\n              if (signY) s0 = s1 - dy * signY, n0 = n1 + dy * signY;\n              mode = MODE_CENTER;\n            } else {\n              if (signX < 0) e0 = e1; else if (signX > 0) w0 = w1;\n              if (signY < 0) s0 = s1; else if (signY > 0) n0 = n1;\n              mode = MODE_HANDLE;\n            }\n            overlay.attr("cursor", cursors[type]);\n            move(event);\n          }\n          break;\n        }\n        default: return;\n      }\n      noevent(event);\n    }\n  }\n\n  function touchmoved(event) {\n    emitter(this, arguments).moved(event);\n  }\n\n  function touchended(event) {\n    emitter(this, arguments).ended(event);\n  }\n\n  function initialize() {\n    var state = this.__brush || {selection: null};\n    state.extent = number2(extent.apply(this, arguments));\n    state.dim = dim;\n    return state;\n  }\n\n  brush.extent = function(_) {\n    return arguments.length ? (extent = typeof _ === "function" ? _ : constant(number2(_)), brush) : extent;\n  };\n\n  brush.filter = function(_) {\n    return arguments.length ? (filter = typeof _ === "function" ? _ : constant(!!_), brush) : filter;\n  };\n\n  brush.touchable = function(_) {\n    return arguments.length ? (touchable = typeof _ === "function" ? _ : constant(!!_), brush) : touchable;\n  };\n\n  brush.handleSize = function(_) {\n    return arguments.length ? (handleSize = +_, brush) : handleSize;\n  };\n\n  brush.keyModifiers = function(_) {\n    return arguments.length ? (keys = !!_, brush) : keys;\n  };\n\n  brush.on = function() {\n    var value = listeners.on.apply(listeners, arguments);\n    return value === listeners ? brush : value;\n  };\n\n  return brush;\n}\n\n;// ./node_modules/d3-brush/src/index.js\n\n\n;// ./node_modules/d3-array/src/range.js\nfunction range(start, stop, step) {\n  start = +start, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step;\n\n  var i = -1,\n      n = Math.max(0, Math.ceil((stop - start) / step)) | 0,\n      range = new Array(n);\n\n  while (++i < n) {\n    range[i] = start + i * step;\n  }\n\n  return range;\n}\n\n;// ./node_modules/d3-scale/src/init.js\nfunction initRange(domain, range) {\n  switch (arguments.length) {\n    case 0: break;\n    case 1: this.range(domain); break;\n    default: this.range(range).domain(domain); break;\n  }\n  return this;\n}\n\nfunction initInterpolator(domain, interpolator) {\n  switch (arguments.length) {\n    case 0: break;\n    case 1: {\n      if (typeof domain === "function") this.interpolator(domain);\n      else this.range(domain);\n      break;\n    }\n    default: {\n      this.domain(domain);\n      if (typeof interpolator === "function") this.interpolator(interpolator);\n      else this.range(interpolator);\n      break;\n    }\n  }\n  return this;\n}\n\n;// ./node_modules/internmap/src/index.js\nclass InternMap extends Map {\n  constructor(entries, key = keyof) {\n    super();\n    Object.defineProperties(this, {_intern: {value: new Map()}, _key: {value: key}});\n    if (entries != null) for (const [key, value] of entries) this.set(key, value);\n  }\n  get(key) {\n    return super.get(intern_get(this, key));\n  }\n  has(key) {\n    return super.has(intern_get(this, key));\n  }\n  set(key, value) {\n    return super.set(intern_set(this, key), value);\n  }\n  delete(key) {\n    return super.delete(intern_delete(this, key));\n  }\n}\n\nclass InternSet extends Set {\n  constructor(values, key = keyof) {\n    super();\n    Object.defineProperties(this, {_intern: {value: new Map()}, _key: {value: key}});\n    if (values != null) for (const value of values) this.add(value);\n  }\n  has(value) {\n    return super.has(intern_get(this, value));\n  }\n  add(value) {\n    return super.add(intern_set(this, value));\n  }\n  delete(value) {\n    return super.delete(intern_delete(this, value));\n  }\n}\n\nfunction intern_get({_intern, _key}, value) {\n  const key = _key(value);\n  return _intern.has(key) ? _intern.get(key) : value;\n}\n\nfunction intern_set({_intern, _key}, value) {\n  const key = _key(value);\n  if (_intern.has(key)) return _intern.get(key);\n  _intern.set(key, value);\n  return value;\n}\n\nfunction intern_delete({_intern, _key}, value) {\n  const key = _key(value);\n  if (_intern.has(key)) {\n    value = _intern.get(key);\n    _intern.delete(key);\n  }\n  return value;\n}\n\nfunction keyof(value) {\n  return value !== null && typeof value === "object" ? value.valueOf() : value;\n}\n\n;// ./node_modules/d3-scale/src/ordinal.js\n\n\n\nconst implicit = Symbol("implicit");\n\nfunction ordinal() {\n  var index = new InternMap(),\n      domain = [],\n      range = [],\n      unknown = implicit;\n\n  function scale(d) {\n    let i = index.get(d);\n    if (i === undefined) {\n      if (unknown !== implicit) return unknown;\n      index.set(d, i = domain.push(d) - 1);\n    }\n    return range[i % range.length];\n  }\n\n  scale.domain = function(_) {\n    if (!arguments.length) return domain.slice();\n    domain = [], index = new InternMap();\n    for (const value of _) {\n      if (index.has(value)) continue;\n      index.set(value, domain.push(value) - 1);\n    }\n    return scale;\n  };\n\n  scale.range = function(_) {\n    return arguments.length ? (range = Array.from(_), scale) : range.slice();\n  };\n\n  scale.unknown = function(_) {\n    return arguments.length ? (unknown = _, scale) : unknown;\n  };\n\n  scale.copy = function() {\n    return ordinal(domain, range).unknown(unknown);\n  };\n\n  initRange.apply(scale, arguments);\n\n  return scale;\n}\n\n;// ./node_modules/d3-scale/src/band.js\n\n\n\n\nfunction band() {\n  var scale = ordinal().unknown(undefined),\n      domain = scale.domain,\n      ordinalRange = scale.range,\n      r0 = 0,\n      r1 = 1,\n      step,\n      bandwidth,\n      round = false,\n      paddingInner = 0,\n      paddingOuter = 0,\n      align = 0.5;\n\n  delete scale.unknown;\n\n  function rescale() {\n    var n = domain().length,\n        reverse = r1 < r0,\n        start = reverse ? r1 : r0,\n        stop = reverse ? r0 : r1;\n    step = (stop - start) / Math.max(1, n - paddingInner + paddingOuter * 2);\n    if (round) step = Math.floor(step);\n    start += (stop - start - step * (n - paddingInner)) * align;\n    bandwidth = step * (1 - paddingInner);\n    if (round) start = Math.round(start), bandwidth = Math.round(bandwidth);\n    var values = range(n).map(function(i) { return start + step * i; });\n    return ordinalRange(reverse ? values.reverse() : values);\n  }\n\n  scale.domain = function(_) {\n    return arguments.length ? (domain(_), rescale()) : domain();\n  };\n\n  scale.range = function(_) {\n    return arguments.length ? ([r0, r1] = _, r0 = +r0, r1 = +r1, rescale()) : [r0, r1];\n  };\n\n  scale.rangeRound = function(_) {\n    return [r0, r1] = _, r0 = +r0, r1 = +r1, round = true, rescale();\n  };\n\n  scale.bandwidth = function() {\n    return bandwidth;\n  };\n\n  scale.step = function() {\n    return step;\n  };\n\n  scale.round = function(_) {\n    return arguments.length ? (round = !!_, rescale()) : round;\n  };\n\n  scale.padding = function(_) {\n    return arguments.length ? (paddingInner = Math.min(1, paddingOuter = +_), rescale()) : paddingInner;\n  };\n\n  scale.paddingInner = function(_) {\n    return arguments.length ? (paddingInner = Math.min(1, _), rescale()) : paddingInner;\n  };\n\n  scale.paddingOuter = function(_) {\n    return arguments.length ? (paddingOuter = +_, rescale()) : paddingOuter;\n  };\n\n  scale.align = function(_) {\n    return arguments.length ? (align = Math.max(0, Math.min(1, _)), rescale()) : align;\n  };\n\n  scale.copy = function() {\n    return band(domain(), [r0, r1])\n        .round(round)\n        .paddingInner(paddingInner)\n        .paddingOuter(paddingOuter)\n        .align(align);\n  };\n\n  return initRange.apply(rescale(), arguments);\n}\n\nfunction pointish(scale) {\n  var copy = scale.copy;\n\n  scale.padding = scale.paddingOuter;\n  delete scale.paddingInner;\n  delete scale.paddingOuter;\n\n  scale.copy = function() {\n    return pointish(copy());\n  };\n\n  return scale;\n}\n\nfunction point() {\n  return pointish(band.apply(null, arguments).paddingInner(1));\n}\n\n;// ./node_modules/d3-array/src/ticks.js\nconst e10 = Math.sqrt(50),\n    e5 = Math.sqrt(10),\n    e2 = Math.sqrt(2);\n\nfunction tickSpec(start, stop, count) {\n  const step = (stop - start) / Math.max(0, count),\n      power = Math.floor(Math.log10(step)),\n      error = step / Math.pow(10, power),\n      factor = error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1;\n  let i1, i2, inc;\n  if (power < 0) {\n    inc = Math.pow(10, -power) / factor;\n    i1 = Math.round(start * inc);\n    i2 = Math.round(stop * inc);\n    if (i1 / inc < start) ++i1;\n    if (i2 / inc > stop) --i2;\n    inc = -inc;\n  } else {\n    inc = Math.pow(10, power) * factor;\n    i1 = Math.round(start / inc);\n    i2 = Math.round(stop / inc);\n    if (i1 * inc < start) ++i1;\n    if (i2 * inc > stop) --i2;\n  }\n  if (i2 < i1 && 0.5 <= count && count < 2) return tickSpec(start, stop, count * 2);\n  return [i1, i2, inc];\n}\n\nfunction ticks(start, stop, count) {\n  stop = +stop, start = +start, count = +count;\n  if (!(count > 0)) return [];\n  if (start === stop) return [start];\n  const reverse = stop < start, [i1, i2, inc] = reverse ? tickSpec(stop, start, count) : tickSpec(start, stop, count);\n  if (!(i2 >= i1)) return [];\n  const n = i2 - i1 + 1, ticks = new Array(n);\n  if (reverse) {\n    if (inc < 0) for (let i = 0; i < n; ++i) ticks[i] = (i2 - i) / -inc;\n    else for (let i = 0; i < n; ++i) ticks[i] = (i2 - i) * inc;\n  } else {\n    if (inc < 0) for (let i = 0; i < n; ++i) ticks[i] = (i1 + i) / -inc;\n    else for (let i = 0; i < n; ++i) ticks[i] = (i1 + i) * inc;\n  }\n  return ticks;\n}\n\nfunction tickIncrement(start, stop, count) {\n  stop = +stop, start = +start, count = +count;\n  return tickSpec(start, stop, count)[2];\n}\n\nfunction tickStep(start, stop, count) {\n  stop = +stop, start = +start, count = +count;\n  const reverse = stop < start, inc = reverse ? tickIncrement(stop, start, count) : tickIncrement(start, stop, count);\n  return (reverse ? -1 : 1) * (inc < 0 ? 1 / -inc : inc);\n}\n\n;// ./node_modules/d3-array/src/ascending.js\nfunction ascending_ascending(a, b) {\n  return a == null || b == null ? NaN : a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;\n}\n\n;// ./node_modules/d3-array/src/descending.js\nfunction descending(a, b) {\n  return a == null || b == null ? NaN\n    : b < a ? -1\n    : b > a ? 1\n    : b >= a ? 0\n    : NaN;\n}\n\n;// ./node_modules/d3-array/src/bisector.js\n\n\n\nfunction bisector(f) {\n  let compare1, compare2, delta;\n\n  // If an accessor is specified, promote it to a comparator. In this case we\n  // can test whether the search value is (self-) comparable. We can’t do this\n  // for a comparator (except for specific, known comparators) because we can’t\n  // tell if the comparator is symmetric, and an asymmetric comparator can’t be\n  // used to test whether a single value is comparable.\n  if (f.length !== 2) {\n    compare1 = ascending_ascending;\n    compare2 = (d, x) => ascending_ascending(f(d), x);\n    delta = (d, x) => f(d) - x;\n  } else {\n    compare1 = f === ascending_ascending || f === descending ? f : bisector_zero;\n    compare2 = f;\n    delta = f;\n  }\n\n  function left(a, x, lo = 0, hi = a.length) {\n    if (lo < hi) {\n      if (compare1(x, x) !== 0) return hi;\n      do {\n        const mid = (lo + hi) >>> 1;\n        if (compare2(a[mid], x) < 0) lo = mid + 1;\n        else hi = mid;\n      } while (lo < hi);\n    }\n    return lo;\n  }\n\n  function right(a, x, lo = 0, hi = a.length) {\n    if (lo < hi) {\n      if (compare1(x, x) !== 0) return hi;\n      do {\n        const mid = (lo + hi) >>> 1;\n        if (compare2(a[mid], x) <= 0) lo = mid + 1;\n        else hi = mid;\n      } while (lo < hi);\n    }\n    return lo;\n  }\n\n  function center(a, x, lo = 0, hi = a.length) {\n    const i = left(a, x, lo, hi - 1);\n    return i > lo && delta(a[i - 1], x) > -delta(a[i], x) ? i - 1 : i;\n  }\n\n  return {left, center, right};\n}\n\nfunction bisector_zero() {\n  return 0;\n}\n\n;// ./node_modules/d3-array/src/number.js\nfunction number_number(x) {\n  return x === null ? NaN : +x;\n}\n\nfunction* number_numbers(values, valueof) {\n  if (valueof === undefined) {\n    for (let value of values) {\n      if (value != null && (value = +value) >= value) {\n        yield value;\n      }\n    }\n  } else {\n    let index = -1;\n    for (let value of values) {\n      if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {\n        yield value;\n      }\n    }\n  }\n}\n\n;// ./node_modules/d3-array/src/bisect.js\n\n\n\n\nconst ascendingBisect = bisector(ascending_ascending);\nconst bisectRight = ascendingBisect.right;\nconst bisectLeft = ascendingBisect.left;\nconst bisectCenter = bisector(number_number).center;\n/* harmony default export */ const bisect = (bisectRight);\n\n;// ./node_modules/d3-interpolate/src/array.js\n\n\n\n/* harmony default export */ function src_array(a, b) {\n  return (isNumberArray(b) ? numberArray : genericArray)(a, b);\n}\n\nfunction genericArray(a, b) {\n  var nb = b ? b.length : 0,\n      na = a ? Math.min(nb, a.length) : 0,\n      x = new Array(na),\n      c = new Array(nb),\n      i;\n\n  for (i = 0; i < na; ++i) x[i] = value(a[i], b[i]);\n  for (; i < nb; ++i) c[i] = b[i];\n\n  return function(t) {\n    for (i = 0; i < na; ++i) c[i] = x[i](t);\n    return c;\n  };\n}\n\n;// ./node_modules/d3-interpolate/src/date.js\n/* harmony default export */ function date(a, b) {\n  var d = new Date;\n  return a = +a, b = +b, function(t) {\n    return d.setTime(a * (1 - t) + b * t), d;\n  };\n}\n\n;// ./node_modules/d3-interpolate/src/object.js\n\n\n/* harmony default export */ function object(a, b) {\n  var i = {},\n      c = {},\n      k;\n\n  if (a === null || typeof a !== "object") a = {};\n  if (b === null || typeof b !== "object") b = {};\n\n  for (k in b) {\n    if (k in a) {\n      i[k] = value(a[k], b[k]);\n    } else {\n      c[k] = b[k];\n    }\n  }\n\n  return function(t) {\n    for (k in i) c[k] = i[k](t);\n    return c;\n  };\n}\n\n;// ./node_modules/d3-interpolate/src/numberArray.js\n/* harmony default export */ function src_numberArray(a, b) {\n  if (!b) b = [];\n  var n = a ? Math.min(b.length, a.length) : 0,\n      c = b.slice(),\n      i;\n  return function(t) {\n    for (i = 0; i < n; ++i) c[i] = a[i] * (1 - t) + b[i] * t;\n    return c;\n  };\n}\n\nfunction numberArray_isNumberArray(x) {\n  return ArrayBuffer.isView(x) && !(x instanceof DataView);\n}\n\n;// ./node_modules/d3-interpolate/src/value.js\n\n\n\n\n\n\n\n\n\n\n/* harmony default export */ function value(a, b) {\n  var t = typeof b, c;\n  return b == null || t === "boolean" ? d3_interpolate_src_constant(b)\n      : (t === "number" ? src_number\n      : t === "string" ? ((c = color(b)) ? (b = c, rgb) : string)\n      : b instanceof color ? rgb\n      : b instanceof Date ? date\n      : numberArray_isNumberArray(b) ? src_numberArray\n      : Array.isArray(b) ? genericArray\n      : typeof b.valueOf !== "function" && typeof b.toString !== "function" || isNaN(b) ? object\n      : src_number)(a, b);\n}\n\n;// ./node_modules/d3-interpolate/src/round.js\n/* harmony default export */ function round(a, b) {\n  return a = +a, b = +b, function(t) {\n    return Math.round(a * (1 - t) + b * t);\n  };\n}\n\n;// ./node_modules/d3-scale/src/constant.js\nfunction constants(x) {\n  return function() {\n    return x;\n  };\n}\n\n;// ./node_modules/d3-scale/src/number.js\nfunction src_number_number(x) {\n  return +x;\n}\n\n;// ./node_modules/d3-scale/src/continuous.js\n\n\n\n\n\nvar unit = [0, 1];\n\nfunction continuous_identity(x) {\n  return x;\n}\n\nfunction normalize(a, b) {\n  return (b -= (a = +a))\n      ? function(x) { return (x - a) / b; }\n      : constants(isNaN(b) ? NaN : 0.5);\n}\n\nfunction clamper(a, b) {\n  var t;\n  if (a > b) t = a, a = b, b = t;\n  return function(x) { return Math.max(a, Math.min(b, x)); };\n}\n\n// normalize(a, b)(x) takes a domain value x in [a,b] and returns the corresponding parameter t in [0,1].\n// interpolate(a, b)(t) takes a parameter t in [0,1] and returns the corresponding range value x in [a,b].\nfunction bimap(domain, range, interpolate) {\n  var d0 = domain[0], d1 = domain[1], r0 = range[0], r1 = range[1];\n  if (d1 < d0) d0 = normalize(d1, d0), r0 = interpolate(r1, r0);\n  else d0 = normalize(d0, d1), r0 = interpolate(r0, r1);\n  return function(x) { return r0(d0(x)); };\n}\n\nfunction polymap(domain, range, interpolate) {\n  var j = Math.min(domain.length, range.length) - 1,\n      d = new Array(j),\n      r = new Array(j),\n      i = -1;\n\n  // Reverse descending domains.\n  if (domain[j] < domain[0]) {\n    domain = domain.slice().reverse();\n    range = range.slice().reverse();\n  }\n\n  while (++i < j) {\n    d[i] = normalize(domain[i], domain[i + 1]);\n    r[i] = interpolate(range[i], range[i + 1]);\n  }\n\n  return function(x) {\n    var i = bisect(domain, x, 1, j) - 1;\n    return r[i](d[i](x));\n  };\n}\n\nfunction copy(source, target) {\n  return target\n      .domain(source.domain())\n      .range(source.range())\n      .interpolate(source.interpolate())\n      .clamp(source.clamp())\n      .unknown(source.unknown());\n}\n\nfunction transformer() {\n  var domain = unit,\n      range = unit,\n      interpolate = value,\n      transform,\n      untransform,\n      unknown,\n      clamp = continuous_identity,\n      piecewise,\n      output,\n      input;\n\n  function rescale() {\n    var n = Math.min(domain.length, range.length);\n    if (clamp !== continuous_identity) clamp = clamper(domain[0], domain[n - 1]);\n    piecewise = n > 2 ? polymap : bimap;\n    output = input = null;\n    return scale;\n  }\n\n  function scale(x) {\n    return x == null || isNaN(x = +x) ? unknown : (output || (output = piecewise(domain.map(transform), range, interpolate)))(transform(clamp(x)));\n  }\n\n  scale.invert = function(y) {\n    return clamp(untransform((input || (input = piecewise(range, domain.map(transform), src_number)))(y)));\n  };\n\n  scale.domain = function(_) {\n    return arguments.length ? (domain = Array.from(_, src_number_number), rescale()) : domain.slice();\n  };\n\n  scale.range = function(_) {\n    return arguments.length ? (range = Array.from(_), rescale()) : range.slice();\n  };\n\n  scale.rangeRound = function(_) {\n    return range = Array.from(_), interpolate = round, rescale();\n  };\n\n  scale.clamp = function(_) {\n    return arguments.length ? (clamp = _ ? true : continuous_identity, rescale()) : clamp !== continuous_identity;\n  };\n\n  scale.interpolate = function(_) {\n    return arguments.length ? (interpolate = _, rescale()) : interpolate;\n  };\n\n  scale.unknown = function(_) {\n    return arguments.length ? (unknown = _, scale) : unknown;\n  };\n\n  return function(t, u) {\n    transform = t, untransform = u;\n    return rescale();\n  };\n}\n\nfunction continuous() {\n  return transformer()(continuous_identity, continuous_identity);\n}\n\n;// ./node_modules/d3-format/src/formatSpecifier.js\n// [[fill]align][sign][symbol][0][width][,][.precision][~][type]\nvar re = /^(?:(.)?([<>=^]))?([+\\-( ])?([$#])?(0)?(\\d+)?(,)?(\\.\\d+)?(~)?([a-z%])?$/i;\n\nfunction formatSpecifier(specifier) {\n  if (!(match = re.exec(specifier))) throw new Error("invalid format: " + specifier);\n  var match;\n  return new FormatSpecifier({\n    fill: match[1],\n    align: match[2],\n    sign: match[3],\n    symbol: match[4],\n    zero: match[5],\n    width: match[6],\n    comma: match[7],\n    precision: match[8] && match[8].slice(1),\n    trim: match[9],\n    type: match[10]\n  });\n}\n\nformatSpecifier.prototype = FormatSpecifier.prototype; // instanceof\n\nfunction FormatSpecifier(specifier) {\n  this.fill = specifier.fill === undefined ? " " : specifier.fill + "";\n  this.align = specifier.align === undefined ? ">" : specifier.align + "";\n  this.sign = specifier.sign === undefined ? "-" : specifier.sign + "";\n  this.symbol = specifier.symbol === undefined ? "" : specifier.symbol + "";\n  this.zero = !!specifier.zero;\n  this.width = specifier.width === undefined ? undefined : +specifier.width;\n  this.comma = !!specifier.comma;\n  this.precision = specifier.precision === undefined ? undefined : +specifier.precision;\n  this.trim = !!specifier.trim;\n  this.type = specifier.type === undefined ? "" : specifier.type + "";\n}\n\nFormatSpecifier.prototype.toString = function() {\n  return this.fill\n      + this.align\n      + this.sign\n      + this.symbol\n      + (this.zero ? "0" : "")\n      + (this.width === undefined ? "" : Math.max(1, this.width | 0))\n      + (this.comma ? "," : "")\n      + (this.precision === undefined ? "" : "." + Math.max(0, this.precision | 0))\n      + (this.trim ? "~" : "")\n      + this.type;\n};\n\n;// ./node_modules/d3-format/src/formatDecimal.js\n/* harmony default export */ function formatDecimal(x) {\n  return Math.abs(x = Math.round(x)) >= 1e21\n      ? x.toLocaleString("en").replace(/,/g, "")\n      : x.toString(10);\n}\n\n// Computes the decimal coefficient and exponent of the specified number x with\n// significant digits p, where x is positive and p is in [1, 21] or undefined.\n// For example, formatDecimalParts(1.23) returns ["123", 0].\nfunction formatDecimalParts(x, p) {\n  if ((i = (x = p ? x.toExponential(p - 1) : x.toExponential()).indexOf("e")) < 0) return null; // NaN, ±Infinity\n  var i, coefficient = x.slice(0, i);\n\n  // The string returned by toExponential either has the form \\d\\.\\d+e[-+]\\d+\n  // (e.g., 1.2e+3) or the form \\de[-+]\\d+ (e.g., 1e+3).\n  return [\n    coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient,\n    +x.slice(i + 1)\n  ];\n}\n\n;// ./node_modules/d3-format/src/exponent.js\n\n\n/* harmony default export */ function exponent(x) {\n  return x = formatDecimalParts(Math.abs(x)), x ? x[1] : NaN;\n}\n\n;// ./node_modules/d3-format/src/precisionPrefix.js\n\n\n/* harmony default export */ function precisionPrefix(step, value) {\n  return Math.max(0, Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3 - exponent(Math.abs(step)));\n}\n\n;// ./node_modules/d3-format/src/formatGroup.js\n/* harmony default export */ function formatGroup(grouping, thousands) {\n  return function(value, width) {\n    var i = value.length,\n        t = [],\n        j = 0,\n        g = grouping[0],\n        length = 0;\n\n    while (i > 0 && g > 0) {\n      if (length + g + 1 > width) g = Math.max(1, width - length);\n      t.push(value.substring(i -= g, i + g));\n      if ((length += g + 1) > width) break;\n      g = grouping[j = (j + 1) % grouping.length];\n    }\n\n    return t.reverse().join(thousands);\n  };\n}\n\n;// ./node_modules/d3-format/src/formatNumerals.js\n/* harmony default export */ function formatNumerals(numerals) {\n  return function(value) {\n    return value.replace(/[0-9]/g, function(i) {\n      return numerals[+i];\n    });\n  };\n}\n\n;// ./node_modules/d3-format/src/formatTrim.js\n// Trims insignificant zeros, e.g., replaces 1.2000k with 1.2k.\n/* harmony default export */ function formatTrim(s) {\n  out: for (var n = s.length, i = 1, i0 = -1, i1; i < n; ++i) {\n    switch (s[i]) {\n      case ".": i0 = i1 = i; break;\n      case "0": if (i0 === 0) i0 = i; i1 = i; break;\n      default: if (!+s[i]) break out; if (i0 > 0) i0 = 0; break;\n    }\n  }\n  return i0 > 0 ? s.slice(0, i0) + s.slice(i1 + 1) : s;\n}\n\n;// ./node_modules/d3-format/src/formatPrefixAuto.js\n\n\nvar prefixExponent;\n\n/* harmony default export */ function formatPrefixAuto(x, p) {\n  var d = formatDecimalParts(x, p);\n  if (!d) return x + "";\n  var coefficient = d[0],\n      exponent = d[1],\n      i = exponent - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1,\n      n = coefficient.length;\n  return i === n ? coefficient\n      : i > n ? coefficient + new Array(i - n + 1).join("0")\n      : i > 0 ? coefficient.slice(0, i) + "." + coefficient.slice(i)\n      : "0." + new Array(1 - i).join("0") + formatDecimalParts(x, Math.max(0, p + i - 1))[0]; // less than 1y!\n}\n\n;// ./node_modules/d3-format/src/formatRounded.js\n\n\n/* harmony default export */ function formatRounded(x, p) {\n  var d = formatDecimalParts(x, p);\n  if (!d) return x + "";\n  var coefficient = d[0],\n      exponent = d[1];\n  return exponent < 0 ? "0." + new Array(-exponent).join("0") + coefficient\n      : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + "." + coefficient.slice(exponent + 1)\n      : coefficient + new Array(exponent - coefficient.length + 2).join("0");\n}\n\n;// ./node_modules/d3-format/src/formatTypes.js\n\n\n\n\n/* harmony default export */ const formatTypes = ({\n  "%": (x, p) => (x * 100).toFixed(p),\n  "b": (x) => Math.round(x).toString(2),\n  "c": (x) => x + "",\n  "d": formatDecimal,\n  "e": (x, p) => x.toExponential(p),\n  "f": (x, p) => x.toFixed(p),\n  "g": (x, p) => x.toPrecision(p),\n  "o": (x) => Math.round(x).toString(8),\n  "p": (x, p) => formatRounded(x * 100, p),\n  "r": formatRounded,\n  "s": formatPrefixAuto,\n  "X": (x) => Math.round(x).toString(16).toUpperCase(),\n  "x": (x) => Math.round(x).toString(16)\n});\n\n;// ./node_modules/d3-format/src/identity.js\n/* harmony default export */ function d3_format_src_identity(x) {\n  return x;\n}\n\n;// ./node_modules/d3-format/src/locale.js\n\n\n\n\n\n\n\n\n\nvar map = Array.prototype.map,\n    prefixes = ["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];\n\n/* harmony default export */ function locale(locale) {\n  var group = locale.grouping === undefined || locale.thousands === undefined ? d3_format_src_identity : formatGroup(map.call(locale.grouping, Number), locale.thousands + ""),\n      currencyPrefix = locale.currency === undefined ? "" : locale.currency[0] + "",\n      currencySuffix = locale.currency === undefined ? "" : locale.currency[1] + "",\n      decimal = locale.decimal === undefined ? "." : locale.decimal + "",\n      numerals = locale.numerals === undefined ? d3_format_src_identity : formatNumerals(map.call(locale.numerals, String)),\n      percent = locale.percent === undefined ? "%" : locale.percent + "",\n      minus = locale.minus === undefined ? "−" : locale.minus + "",\n      nan = locale.nan === undefined ? "NaN" : locale.nan + "";\n\n  function newFormat(specifier) {\n    specifier = formatSpecifier(specifier);\n\n    var fill = specifier.fill,\n        align = specifier.align,\n        sign = specifier.sign,\n        symbol = specifier.symbol,\n        zero = specifier.zero,\n        width = specifier.width,\n        comma = specifier.comma,\n        precision = specifier.precision,\n        trim = specifier.trim,\n        type = specifier.type;\n\n    // The "n" type is an alias for ",g".\n    if (type === "n") comma = true, type = "g";\n\n    // The "" type, and any invalid type, is an alias for ".12~g".\n    else if (!formatTypes[type]) precision === undefined && (precision = 12), trim = true, type = "g";\n\n    // If zero fill is specified, padding goes after sign and before digits.\n    if (zero || (fill === "0" && align === "=")) zero = true, fill = "0", align = "=";\n\n    // Compute the prefix and suffix.\n    // For SI-prefix, the suffix is lazily computed.\n    var prefix = symbol === "$" ? currencyPrefix : symbol === "#" && /[boxX]/.test(type) ? "0" + type.toLowerCase() : "",\n        suffix = symbol === "$" ? currencySuffix : /[%p]/.test(type) ? percent : "";\n\n    // What format function should we use?\n    // Is this an integer type?\n    // Can this type generate exponential notation?\n    var formatType = formatTypes[type],\n        maybeSuffix = /[defgprs%]/.test(type);\n\n    // Set the default precision if not specified,\n    // or clamp the specified precision to the supported range.\n    // For significant precision, it must be in [1, 21].\n    // For fixed precision, it must be in [0, 20].\n    precision = precision === undefined ? 6\n        : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision))\n        : Math.max(0, Math.min(20, precision));\n\n    function format(value) {\n      var valuePrefix = prefix,\n          valueSuffix = suffix,\n          i, n, c;\n\n      if (type === "c") {\n        valueSuffix = formatType(value) + valueSuffix;\n        value = "";\n      } else {\n        value = +value;\n\n        // Determine the sign. -0 is not less than 0, but 1 / -0 is!\n        var valueNegative = value < 0 || 1 / value < 0;\n\n        // Perform the initial formatting.\n        value = isNaN(value) ? nan : formatType(Math.abs(value), precision);\n\n        // Trim insignificant zeros.\n        if (trim) value = formatTrim(value);\n\n        // If a negative value rounds to zero after formatting, and no explicit positive sign is requested, hide the sign.\n        if (valueNegative && +value === 0 && sign !== "+") valueNegative = false;\n\n        // Compute the prefix and suffix.\n        valuePrefix = (valueNegative ? (sign === "(" ? sign : minus) : sign === "-" || sign === "(" ? "" : sign) + valuePrefix;\n        valueSuffix = (type === "s" ? prefixes[8 + prefixExponent / 3] : "") + valueSuffix + (valueNegative && sign === "(" ? ")" : "");\n\n        // Break the formatted value into the integer “value” part that can be\n        // grouped, and fractional or exponential “suffix” part that is not.\n        if (maybeSuffix) {\n          i = -1, n = value.length;\n          while (++i < n) {\n            if (c = value.charCodeAt(i), 48 > c || c > 57) {\n              valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;\n              value = value.slice(0, i);\n              break;\n            }\n          }\n        }\n      }\n\n      // If the fill character is not "0", grouping is applied before padding.\n      if (comma && !zero) value = group(value, Infinity);\n\n      // Compute the padding.\n      var length = valuePrefix.length + value.length + valueSuffix.length,\n          padding = length < width ? new Array(width - length + 1).join(fill) : "";\n\n      // If the fill character is "0", grouping is applied after padding.\n      if (comma && zero) value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = "";\n\n      // Reconstruct the final output based on the desired alignment.\n      switch (align) {\n        case "<": value = valuePrefix + value + valueSuffix + padding; break;\n        case "=": value = valuePrefix + padding + value + valueSuffix; break;\n        case "^": value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length); break;\n        default: value = padding + valuePrefix + value + valueSuffix; break;\n      }\n\n      return numerals(value);\n    }\n\n    format.toString = function() {\n      return specifier + "";\n    };\n\n    return format;\n  }\n\n  function formatPrefix(specifier, value) {\n    var f = newFormat((specifier = formatSpecifier(specifier), specifier.type = "f", specifier)),\n        e = Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3,\n        k = Math.pow(10, -e),\n        prefix = prefixes[8 + e / 3];\n    return function(value) {\n      return f(k * value) + prefix;\n    };\n  }\n\n  return {\n    format: newFormat,\n    formatPrefix: formatPrefix\n  };\n}\n\n;// ./node_modules/d3-format/src/defaultLocale.js\n\n\nvar defaultLocale_locale;\nvar format;\nvar formatPrefix;\n\ndefaultLocale({\n  thousands: ",",\n  grouping: [3],\n  currency: ["$", ""]\n});\n\nfunction defaultLocale(definition) {\n  defaultLocale_locale = locale(definition);\n  format = defaultLocale_locale.format;\n  formatPrefix = defaultLocale_locale.formatPrefix;\n  return defaultLocale_locale;\n}\n\n;// ./node_modules/d3-format/src/precisionRound.js\n\n\n/* harmony default export */ function precisionRound(step, max) {\n  step = Math.abs(step), max = Math.abs(max) - step;\n  return Math.max(0, exponent(max) - exponent(step)) + 1;\n}\n\n;// ./node_modules/d3-format/src/precisionFixed.js\n\n\n/* harmony default export */ function precisionFixed(step) {\n  return Math.max(0, -exponent(Math.abs(step)));\n}\n\n;// ./node_modules/d3-scale/src/tickFormat.js\n\n\n\nfunction tickFormat(start, stop, count, specifier) {\n  var step = tickStep(start, stop, count),\n      precision;\n  specifier = formatSpecifier(specifier == null ? ",f" : specifier);\n  switch (specifier.type) {\n    case "s": {\n      var value = Math.max(Math.abs(start), Math.abs(stop));\n      if (specifier.precision == null && !isNaN(precision = precisionPrefix(step, value))) specifier.precision = precision;\n      return formatPrefix(specifier, value);\n    }\n    case "":\n    case "e":\n    case "g":\n    case "p":\n    case "r": {\n      if (specifier.precision == null && !isNaN(precision = precisionRound(step, Math.max(Math.abs(start), Math.abs(stop))))) specifier.precision = precision - (specifier.type === "e");\n      break;\n    }\n    case "f":\n    case "%": {\n      if (specifier.precision == null && !isNaN(precision = precisionFixed(step))) specifier.precision = precision - (specifier.type === "%") * 2;\n      break;\n    }\n  }\n  return format(specifier);\n}\n\n;// ./node_modules/d3-scale/src/linear.js\n\n\n\n\n\nfunction linearish(scale) {\n  var domain = scale.domain;\n\n  scale.ticks = function(count) {\n    var d = domain();\n    return ticks(d[0], d[d.length - 1], count == null ? 10 : count);\n  };\n\n  scale.tickFormat = function(count, specifier) {\n    var d = domain();\n    return tickFormat(d[0], d[d.length - 1], count == null ? 10 : count, specifier);\n  };\n\n  scale.nice = function(count) {\n    if (count == null) count = 10;\n\n    var d = domain();\n    var i0 = 0;\n    var i1 = d.length - 1;\n    var start = d[i0];\n    var stop = d[i1];\n    var prestep;\n    var step;\n    var maxIter = 10;\n\n    if (stop < start) {\n      step = start, start = stop, stop = step;\n      step = i0, i0 = i1, i1 = step;\n    }\n    \n    while (maxIter-- > 0) {\n      step = tickIncrement(start, stop, count);\n      if (step === prestep) {\n        d[i0] = start\n        d[i1] = stop\n        return domain(d);\n      } else if (step > 0) {\n        start = Math.floor(start / step) * step;\n        stop = Math.ceil(stop / step) * step;\n      } else if (step < 0) {\n        start = Math.ceil(start * step) / step;\n        stop = Math.floor(stop * step) / step;\n      } else {\n        break;\n      }\n      prestep = step;\n    }\n\n    return scale;\n  };\n\n  return scale;\n}\n\nfunction linear_linear() {\n  var scale = continuous();\n\n  scale.copy = function() {\n    return copy(scale, linear_linear());\n  };\n\n  initRange.apply(scale, arguments);\n\n  return linearish(scale);\n}\n\n;// ./node_modules/d3-scale/src/index.js\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n;// ./node_modules/d3-selection/src/select.js\n\n\n/* harmony default export */ function src_select(selector) {\n  return typeof selector === "string"\n      ? new Selection([[document.querySelector(selector)]], [document.documentElement])\n      : new Selection([[selector]], root);\n}\n\n;// ./node_modules/d3-selection/src/index.js\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n;// ./node_modules/d3-zoom/src/transform.js\nfunction transform_Transform(k, x, y) {\n  this.k = k;\n  this.x = x;\n  this.y = y;\n}\n\ntransform_Transform.prototype = {\n  constructor: transform_Transform,\n  scale: function(k) {\n    return k === 1 ? this : new transform_Transform(this.k * k, this.x, this.y);\n  },\n  translate: function(x, y) {\n    return x === 0 & y === 0 ? this : new transform_Transform(this.k, this.x + this.k * x, this.y + this.k * y);\n  },\n  apply: function(point) {\n    return [point[0] * this.k + this.x, point[1] * this.k + this.y];\n  },\n  applyX: function(x) {\n    return x * this.k + this.x;\n  },\n  applyY: function(y) {\n    return y * this.k + this.y;\n  },\n  invert: function(location) {\n    return [(location[0] - this.x) / this.k, (location[1] - this.y) / this.k];\n  },\n  invertX: function(x) {\n    return (x - this.x) / this.k;\n  },\n  invertY: function(y) {\n    return (y - this.y) / this.k;\n  },\n  rescaleX: function(x) {\n    return x.copy().domain(x.range().map(this.invertX, this).map(x.invert, x));\n  },\n  rescaleY: function(y) {\n    return y.copy().domain(y.range().map(this.invertY, this).map(y.invert, y));\n  },\n  toString: function() {\n    return "translate(" + this.x + "," + this.y + ") scale(" + this.k + ")";\n  }\n};\n\nvar transform_identity = new transform_Transform(1, 0, 0);\n\ntransform.prototype = transform_Transform.prototype;\n\nfunction transform(node) {\n  while (!node.__zoom) if (!(node = node.parentNode)) return transform_identity;\n  return node.__zoom;\n}\n\n;// ./node_modules/d3-zoom/src/zoom.js\n\n\n\n\n\n\n\n\n\n\n// Ignore right-click, since that should open the context menu.\n// except for pinch-to-zoom, which is sent as a wheel+ctrlKey event\nfunction zoom_defaultFilter(event) {\n  return (!event.ctrlKey || event.type === \'wheel\') && !event.button;\n}\n\nfunction zoom_defaultExtent() {\n  var e = this;\n  if (e instanceof SVGElement) {\n    e = e.ownerSVGElement || e;\n    if (e.hasAttribute("viewBox")) {\n      e = e.viewBox.baseVal;\n      return [[e.x, e.y], [e.x + e.width, e.y + e.height]];\n    }\n    return [[0, 0], [e.width.baseVal.value, e.height.baseVal.value]];\n  }\n  return [[0, 0], [e.clientWidth, e.clientHeight]];\n}\n\nfunction defaultTransform() {\n  return this.__zoom || identity;\n}\n\nfunction defaultWheelDelta(event) {\n  return -event.deltaY * (event.deltaMode === 1 ? 0.05 : event.deltaMode ? 1 : 0.002) * (event.ctrlKey ? 10 : 1);\n}\n\nfunction zoom_defaultTouchable() {\n  return navigator.maxTouchPoints || ("ontouchstart" in this);\n}\n\nfunction defaultConstrain(transform, extent, translateExtent) {\n  var dx0 = transform.invertX(extent[0][0]) - translateExtent[0][0],\n      dx1 = transform.invertX(extent[1][0]) - translateExtent[1][0],\n      dy0 = transform.invertY(extent[0][1]) - translateExtent[0][1],\n      dy1 = transform.invertY(extent[1][1]) - translateExtent[1][1];\n  return transform.translate(\n    dx1 > dx0 ? (dx0 + dx1) / 2 : Math.min(0, dx0) || Math.max(0, dx1),\n    dy1 > dy0 ? (dy0 + dy1) / 2 : Math.min(0, dy0) || Math.max(0, dy1)\n  );\n}\n\n/* harmony default export */ function zoom() {\n  var filter = zoom_defaultFilter,\n      extent = zoom_defaultExtent,\n      constrain = defaultConstrain,\n      wheelDelta = defaultWheelDelta,\n      touchable = zoom_defaultTouchable,\n      scaleExtent = [0, Infinity],\n      translateExtent = [[-Infinity, -Infinity], [Infinity, Infinity]],\n      duration = 250,\n      interpolate = interpolateZoom,\n      listeners = dispatch("start", "zoom", "end"),\n      touchstarting,\n      touchfirst,\n      touchending,\n      touchDelay = 500,\n      wheelDelay = 150,\n      clickDistance2 = 0,\n      tapDistance = 10;\n\n  function zoom(selection) {\n    selection\n        .property("__zoom", defaultTransform)\n        .on("wheel.zoom", wheeled, {passive: false})\n        .on("mousedown.zoom", mousedowned)\n        .on("dblclick.zoom", dblclicked)\n      .filter(touchable)\n        .on("touchstart.zoom", touchstarted)\n        .on("touchmove.zoom", touchmoved)\n        .on("touchend.zoom touchcancel.zoom", touchended)\n        .style("-webkit-tap-highlight-color", "rgba(0,0,0,0)");\n  }\n\n  zoom.transform = function(collection, transform, point, event) {\n    var selection = collection.selection ? collection.selection() : collection;\n    selection.property("__zoom", defaultTransform);\n    if (collection !== selection) {\n      schedule(collection, transform, point, event);\n    } else {\n      selection.interrupt().each(function() {\n        gesture(this, arguments)\n          .event(event)\n          .start()\n          .zoom(null, typeof transform === "function" ? transform.apply(this, arguments) : transform)\n          .end();\n      });\n    }\n  };\n\n  zoom.scaleBy = function(selection, k, p, event) {\n    zoom.scaleTo(selection, function() {\n      var k0 = this.__zoom.k,\n          k1 = typeof k === "function" ? k.apply(this, arguments) : k;\n      return k0 * k1;\n    }, p, event);\n  };\n\n  zoom.scaleTo = function(selection, k, p, event) {\n    zoom.transform(selection, function() {\n      var e = extent.apply(this, arguments),\n          t0 = this.__zoom,\n          p0 = p == null ? centroid(e) : typeof p === "function" ? p.apply(this, arguments) : p,\n          p1 = t0.invert(p0),\n          k1 = typeof k === "function" ? k.apply(this, arguments) : k;\n      return constrain(translate(scale(t0, k1), p0, p1), e, translateExtent);\n    }, p, event);\n  };\n\n  zoom.translateBy = function(selection, x, y, event) {\n    zoom.transform(selection, function() {\n      return constrain(this.__zoom.translate(\n        typeof x === "function" ? x.apply(this, arguments) : x,\n        typeof y === "function" ? y.apply(this, arguments) : y\n      ), extent.apply(this, arguments), translateExtent);\n    }, null, event);\n  };\n\n  zoom.translateTo = function(selection, x, y, p, event) {\n    zoom.transform(selection, function() {\n      var e = extent.apply(this, arguments),\n          t = this.__zoom,\n          p0 = p == null ? centroid(e) : typeof p === "function" ? p.apply(this, arguments) : p;\n      return constrain(identity.translate(p0[0], p0[1]).scale(t.k).translate(\n        typeof x === "function" ? -x.apply(this, arguments) : -x,\n        typeof y === "function" ? -y.apply(this, arguments) : -y\n      ), e, translateExtent);\n    }, p, event);\n  };\n\n  function scale(transform, k) {\n    k = Math.max(scaleExtent[0], Math.min(scaleExtent[1], k));\n    return k === transform.k ? transform : new Transform(k, transform.x, transform.y);\n  }\n\n  function translate(transform, p0, p1) {\n    var x = p0[0] - p1[0] * transform.k, y = p0[1] - p1[1] * transform.k;\n    return x === transform.x && y === transform.y ? transform : new Transform(transform.k, x, y);\n  }\n\n  function centroid(extent) {\n    return [(+extent[0][0] + +extent[1][0]) / 2, (+extent[0][1] + +extent[1][1]) / 2];\n  }\n\n  function schedule(transition, transform, point, event) {\n    transition\n        .on("start.zoom", function() { gesture(this, arguments).event(event).start(); })\n        .on("interrupt.zoom end.zoom", function() { gesture(this, arguments).event(event).end(); })\n        .tween("zoom", function() {\n          var that = this,\n              args = arguments,\n              g = gesture(that, args).event(event),\n              e = extent.apply(that, args),\n              p = point == null ? centroid(e) : typeof point === "function" ? point.apply(that, args) : point,\n              w = Math.max(e[1][0] - e[0][0], e[1][1] - e[0][1]),\n              a = that.__zoom,\n              b = typeof transform === "function" ? transform.apply(that, args) : transform,\n              i = interpolate(a.invert(p).concat(w / a.k), b.invert(p).concat(w / b.k));\n          return function(t) {\n            if (t === 1) t = b; // Avoid rounding error on end.\n            else { var l = i(t), k = w / l[2]; t = new Transform(k, p[0] - l[0] * k, p[1] - l[1] * k); }\n            g.zoom(null, t);\n          };\n        });\n  }\n\n  function gesture(that, args, clean) {\n    return (!clean && that.__zooming) || new Gesture(that, args);\n  }\n\n  function Gesture(that, args) {\n    this.that = that;\n    this.args = args;\n    this.active = 0;\n    this.sourceEvent = null;\n    this.extent = extent.apply(that, args);\n    this.taps = 0;\n  }\n\n  Gesture.prototype = {\n    event: function(event) {\n      if (event) this.sourceEvent = event;\n      return this;\n    },\n    start: function() {\n      if (++this.active === 1) {\n        this.that.__zooming = this;\n        this.emit("start");\n      }\n      return this;\n    },\n    zoom: function(key, transform) {\n      if (this.mouse && key !== "mouse") this.mouse[1] = transform.invert(this.mouse[0]);\n      if (this.touch0 && key !== "touch") this.touch0[1] = transform.invert(this.touch0[0]);\n      if (this.touch1 && key !== "touch") this.touch1[1] = transform.invert(this.touch1[0]);\n      this.that.__zoom = transform;\n      this.emit("zoom");\n      return this;\n    },\n    end: function() {\n      if (--this.active === 0) {\n        delete this.that.__zooming;\n        this.emit("end");\n      }\n      return this;\n    },\n    emit: function(type) {\n      var d = select(this.that).datum();\n      listeners.call(\n        type,\n        this.that,\n        new ZoomEvent(type, {\n          sourceEvent: this.sourceEvent,\n          target: zoom,\n          type,\n          transform: this.that.__zoom,\n          dispatch: listeners\n        }),\n        d\n      );\n    }\n  };\n\n  function wheeled(event, ...args) {\n    if (!filter.apply(this, arguments)) return;\n    var g = gesture(this, args).event(event),\n        t = this.__zoom,\n        k = Math.max(scaleExtent[0], Math.min(scaleExtent[1], t.k * Math.pow(2, wheelDelta.apply(this, arguments)))),\n        p = pointer(event);\n\n    // If the mouse is in the same location as before, reuse it.\n    // If there were recent wheel events, reset the wheel idle timeout.\n    if (g.wheel) {\n      if (g.mouse[0][0] !== p[0] || g.mouse[0][1] !== p[1]) {\n        g.mouse[1] = t.invert(g.mouse[0] = p);\n      }\n      clearTimeout(g.wheel);\n    }\n\n    // If this wheel event won’t trigger a transform change, ignore it.\n    else if (t.k === k) return;\n\n    // Otherwise, capture the mouse point and location at the start.\n    else {\n      g.mouse = [p, t.invert(p)];\n      interrupt(this);\n      g.start();\n    }\n\n    noevent(event);\n    g.wheel = setTimeout(wheelidled, wheelDelay);\n    g.zoom("mouse", constrain(translate(scale(t, k), g.mouse[0], g.mouse[1]), g.extent, translateExtent));\n\n    function wheelidled() {\n      g.wheel = null;\n      g.end();\n    }\n  }\n\n  function mousedowned(event, ...args) {\n    if (touchending || !filter.apply(this, arguments)) return;\n    var currentTarget = event.currentTarget,\n        g = gesture(this, args, true).event(event),\n        v = select(event.view).on("mousemove.zoom", mousemoved, true).on("mouseup.zoom", mouseupped, true),\n        p = pointer(event, currentTarget),\n        x0 = event.clientX,\n        y0 = event.clientY;\n\n    dragDisable(event.view);\n    nopropagation(event);\n    g.mouse = [p, this.__zoom.invert(p)];\n    interrupt(this);\n    g.start();\n\n    function mousemoved(event) {\n      noevent(event);\n      if (!g.moved) {\n        var dx = event.clientX - x0, dy = event.clientY - y0;\n        g.moved = dx * dx + dy * dy > clickDistance2;\n      }\n      g.event(event)\n       .zoom("mouse", constrain(translate(g.that.__zoom, g.mouse[0] = pointer(event, currentTarget), g.mouse[1]), g.extent, translateExtent));\n    }\n\n    function mouseupped(event) {\n      v.on("mousemove.zoom mouseup.zoom", null);\n      dragEnable(event.view, g.moved);\n      noevent(event);\n      g.event(event).end();\n    }\n  }\n\n  function dblclicked(event, ...args) {\n    if (!filter.apply(this, arguments)) return;\n    var t0 = this.__zoom,\n        p0 = pointer(event.changedTouches ? event.changedTouches[0] : event, this),\n        p1 = t0.invert(p0),\n        k1 = t0.k * (event.shiftKey ? 0.5 : 2),\n        t1 = constrain(translate(scale(t0, k1), p0, p1), extent.apply(this, args), translateExtent);\n\n    noevent(event);\n    if (duration > 0) select(this).transition().duration(duration).call(schedule, t1, p0, event);\n    else select(this).call(zoom.transform, t1, p0, event);\n  }\n\n  function touchstarted(event, ...args) {\n    if (!filter.apply(this, arguments)) return;\n    var touches = event.touches,\n        n = touches.length,\n        g = gesture(this, args, event.changedTouches.length === n).event(event),\n        started, i, t, p;\n\n    nopropagation(event);\n    for (i = 0; i < n; ++i) {\n      t = touches[i], p = pointer(t, this);\n      p = [p, this.__zoom.invert(p), t.identifier];\n      if (!g.touch0) g.touch0 = p, started = true, g.taps = 1 + !!touchstarting;\n      else if (!g.touch1 && g.touch0[2] !== p[2]) g.touch1 = p, g.taps = 0;\n    }\n\n    if (touchstarting) touchstarting = clearTimeout(touchstarting);\n\n    if (started) {\n      if (g.taps < 2) touchfirst = p[0], touchstarting = setTimeout(function() { touchstarting = null; }, touchDelay);\n      interrupt(this);\n      g.start();\n    }\n  }\n\n  function touchmoved(event, ...args) {\n    if (!this.__zooming) return;\n    var g = gesture(this, args).event(event),\n        touches = event.changedTouches,\n        n = touches.length, i, t, p, l;\n\n    noevent(event);\n    for (i = 0; i < n; ++i) {\n      t = touches[i], p = pointer(t, this);\n      if (g.touch0 && g.touch0[2] === t.identifier) g.touch0[0] = p;\n      else if (g.touch1 && g.touch1[2] === t.identifier) g.touch1[0] = p;\n    }\n    t = g.that.__zoom;\n    if (g.touch1) {\n      var p0 = g.touch0[0], l0 = g.touch0[1],\n          p1 = g.touch1[0], l1 = g.touch1[1],\n          dp = (dp = p1[0] - p0[0]) * dp + (dp = p1[1] - p0[1]) * dp,\n          dl = (dl = l1[0] - l0[0]) * dl + (dl = l1[1] - l0[1]) * dl;\n      t = scale(t, Math.sqrt(dp / dl));\n      p = [(p0[0] + p1[0]) / 2, (p0[1] + p1[1]) / 2];\n      l = [(l0[0] + l1[0]) / 2, (l0[1] + l1[1]) / 2];\n    }\n    else if (g.touch0) p = g.touch0[0], l = g.touch0[1];\n    else return;\n\n    g.zoom("touch", constrain(translate(t, p, l), g.extent, translateExtent));\n  }\n\n  function touchended(event, ...args) {\n    if (!this.__zooming) return;\n    var g = gesture(this, args).event(event),\n        touches = event.changedTouches,\n        n = touches.length, i, t;\n\n    nopropagation(event);\n    if (touchending) clearTimeout(touchending);\n    touchending = setTimeout(function() { touchending = null; }, touchDelay);\n    for (i = 0; i < n; ++i) {\n      t = touches[i];\n      if (g.touch0 && g.touch0[2] === t.identifier) delete g.touch0;\n      else if (g.touch1 && g.touch1[2] === t.identifier) delete g.touch1;\n    }\n    if (g.touch1 && !g.touch0) g.touch0 = g.touch1, delete g.touch1;\n    if (g.touch0) g.touch0[1] = this.__zoom.invert(g.touch0[0]);\n    else {\n      g.end();\n      // If this was a dbltap, reroute to the (optional) dblclick.zoom handler.\n      if (g.taps === 2) {\n        t = pointer(t, this);\n        if (Math.hypot(touchfirst[0] - t[0], touchfirst[1] - t[1]) < tapDistance) {\n          var p = select(this).on("dblclick.zoom");\n          if (p) p.apply(this, arguments);\n        }\n      }\n    }\n  }\n\n  zoom.wheelDelta = function(_) {\n    return arguments.length ? (wheelDelta = typeof _ === "function" ? _ : constant(+_), zoom) : wheelDelta;\n  };\n\n  zoom.filter = function(_) {\n    return arguments.length ? (filter = typeof _ === "function" ? _ : constant(!!_), zoom) : filter;\n  };\n\n  zoom.touchable = function(_) {\n    return arguments.length ? (touchable = typeof _ === "function" ? _ : constant(!!_), zoom) : touchable;\n  };\n\n  zoom.extent = function(_) {\n    return arguments.length ? (extent = typeof _ === "function" ? _ : constant([[+_[0][0], +_[0][1]], [+_[1][0], +_[1][1]]]), zoom) : extent;\n  };\n\n  zoom.scaleExtent = function(_) {\n    return arguments.length ? (scaleExtent[0] = +_[0], scaleExtent[1] = +_[1], zoom) : [scaleExtent[0], scaleExtent[1]];\n  };\n\n  zoom.translateExtent = function(_) {\n    return arguments.length ? (translateExtent[0][0] = +_[0][0], translateExtent[1][0] = +_[1][0], translateExtent[0][1] = +_[0][1], translateExtent[1][1] = +_[1][1], zoom) : [[translateExtent[0][0], translateExtent[0][1]], [translateExtent[1][0], translateExtent[1][1]]];\n  };\n\n  zoom.constrain = function(_) {\n    return arguments.length ? (constrain = _, zoom) : constrain;\n  };\n\n  zoom.duration = function(_) {\n    return arguments.length ? (duration = +_, zoom) : duration;\n  };\n\n  zoom.interpolate = function(_) {\n    return arguments.length ? (interpolate = _, zoom) : interpolate;\n  };\n\n  zoom.on = function() {\n    var value = listeners.on.apply(listeners, arguments);\n    return value === listeners ? zoom : value;\n  };\n\n  zoom.clickDistance = function(_) {\n    return arguments.length ? (clickDistance2 = (_ = +_) * _, zoom) : Math.sqrt(clickDistance2);\n  };\n\n  zoom.tapDistance = function(_) {\n    return arguments.length ? (tapDistance = +_, zoom) : tapDistance;\n  };\n\n  return zoom;\n}\n\n;// ./node_modules/d3-zoom/src/index.js\n\n\n\n;// ./node_modules/d3/src/index.js\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n;// ./public/js/propertyclass.js\nvar propertyClassQuery = "\\nSELECT ?property (count(DISTINCT ?item) as ?count) WHERE {\\n    {\\n        ?item wdt:P1963 [].\\n    }\\n    UNION\\n    {\\n        ?property a wikibase:Property;\\n                  (wdt:P31|wdt:P279) ?item.\\n    }\\n}\\nGROUP by ?property\\nORDER BY DESC(?count)\\nLIMIT 20\\n";\n;// ./public/js/wikiproject.js\nvar projectQuery = "\\n        SELECT ?projectLabel (COUNT(DISTINCT ?property) AS ?count) WHERE {\\n            ?property rdf:type wikibase:Property;\\n              wdt:P5008 ?project.\\n            SERVICE wikibase:label { bd:serviceParam wikibase:language \\"[AUTO_LANGUAGE],mul,en\\". }\\n        }\\n        GROUP BY ?projectLabel\\n        ORDER BY DESC (?count)\\n        LIMIT 20\\n    ";\n;// ./public/js/datatype.js\nvar datatypeQuery = "\\nPREFIX wikibase: <http://wikiba.se/ontology#>\\nSELECT DISTINCT ?datatype (count(DISTINCT ?item) as ?count)\\nWHERE\\n{\\n    ?item wikibase:propertyType ?datatype.\\n}\\nGROUP by ?datatype\\n";\n;// ./public/js/language.js\nvar languageQuery = "\\nSELECT ?language (COUNT(DISTINCT ?property) AS ?count) WHERE {\\n    ?property rdf:type wikibase:Property;\\n      rdfs:label ?label.\\n    BIND(LANG(?label) AS ?language)\\n  }\\n  GROUP BY ?language\\n  ORDER BY DESC (?count)\\n  LIMIT 10\\n";\n;// ./public/js/property.js\nvar propertyStatementQuery = "\\nSELECT ?property ?statementCount WHERE {\\n    ?property rdf:type wikibase:Property;\\n      wikibase:statements ?statementCount.\\n  }\\n  ORDER BY DESC (?statementCount)\\n  LIMIT 15\\n";\n;// ./public/js/main.js\nfunction _regenerator() { /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */ var e, t, r = "function" == typeof Symbol ? Symbol : {}, n = r.iterator || "@@iterator", o = r.toStringTag || "@@toStringTag"; function i(r, n, o, i) { var c = n && n.prototype instanceof Generator ? n : Generator, u = Object.create(c.prototype); return _regeneratorDefine2(u, "_invoke", function (r, n, o) { var i, c, u, f = 0, p = o || [], y = !1, G = { p: 0, n: 0, v: e, a: d, f: d.bind(e, 4), d: function d(t, r) { return i = t, c = 0, u = e, G.n = r, a; } }; function d(r, n) { for (c = r, u = n, t = 0; !y && f && !o && t < p.length; t++) { var o, i = p[t], d = G.p, l = i[2]; r > 3 ? (o = l === n) && (u = i[(c = i[4]) ? 5 : (c = 3, 3)], i[4] = i[5] = e) : i[0] <= d && ((o = r < 2 && d < i[1]) ? (c = 0, G.v = n, G.n = i[1]) : d < l && (o = r < 3 || i[0] > n || n > l) && (i[4] = r, i[5] = n, G.n = l, c = 0)); } if (o || r > 1) return a; throw y = !0, n; } return function (o, p, l) { if (f > 1) throw TypeError("Generator is already running"); for (y && 1 === p && d(p, l), c = p, u = l; (t = c < 2 ? e : u) || !y;) { i || (c ? c < 3 ? (c > 1 && (G.n = -1), d(c, u)) : G.n = u : G.v = u); try { if (f = 2, i) { if (c || (o = "next"), t = i[o]) { if (!(t = t.call(i, u))) throw TypeError("iterator result is not an object"); if (!t.done) return t; u = t.value, c < 2 && (c = 0); } else 1 === c && (t = i["return"]) && t.call(i), c < 2 && (u = TypeError("The iterator does not provide a \'" + o + "\' method"), c = 1); i = e; } else if ((t = (y = G.n < 0) ? u : r.call(n, G)) !== a) break; } catch (t) { i = e, c = 1, u = t; } finally { f = 1; } } return { value: t, done: y }; }; }(r, o, i), !0), u; } var a = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} t = Object.getPrototypeOf; var c = [][n] ? t(t([][n]())) : (_regeneratorDefine2(t = {}, n, function () { return this; }), t), u = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(c); function f(e) { return Object.setPrototypeOf ? Object.setPrototypeOf(e, GeneratorFunctionPrototype) : (e.__proto__ = GeneratorFunctionPrototype, _regeneratorDefine2(e, o, "GeneratorFunction")), e.prototype = Object.create(u), e; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, _regeneratorDefine2(u, "constructor", GeneratorFunctionPrototype), _regeneratorDefine2(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = "GeneratorFunction", _regeneratorDefine2(GeneratorFunctionPrototype, o, "GeneratorFunction"), _regeneratorDefine2(u), _regeneratorDefine2(u, o, "Generator"), _regeneratorDefine2(u, n, function () { return this; }), _regeneratorDefine2(u, "toString", function () { return "[object Generator]"; }), (_regenerator = function _regenerator() { return { w: i, m: f }; })(); }\nfunction _regeneratorDefine2(e, r, n, t) { var i = Object.defineProperty; try { i({}, "", {}); } catch (e) { i = 0; } _regeneratorDefine2 = function _regeneratorDefine(e, r, n, t) { if (r) i ? i(e, r, { value: n, enumerable: !t, configurable: !t, writable: !t }) : e[r] = n;else { var o = function o(r, n) { _regeneratorDefine2(e, r, function (e) { return this._invoke(r, n, e); }); }; o("next", 0), o("throw", 1), o("return", 2); } }, _regeneratorDefine2(e, r, n, t); }\nfunction asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }\n// public/js/main.js\n\n// Import D3.js\n\n\n\n\n\n\nvar ENDPOINT_URL = \'https://query.wikidata.org/sparql\';\nvar HEADERS = {\n  \'Accept\': \'application/sparql-results+json\',\n  \'Content-Type\': \'application/x-www-form-urlencoded; charset=UTF-8\'\n};\n\n/**\n * Generic fetcher for SPARQL queries.\n * @param {string} query - The SPARQL query string.\n * @param {Function} mapFn - Function to map each result row to {label, value}.\n * @param {string} errorMessage - Custom error message for logging.\n * @returns {Promise<Array<{label: string, value: number}>>}\n */\nfunction fetchSPARQLData(_x, _x2, _x3) {\n  return _fetchSPARQLData.apply(this, arguments);\n}\n/**\n * Utility to extract the last part of a URI.\n * @param {string} uri \n * @returns {string}\n */\nfunction _fetchSPARQLData() {\n  _fetchSPARQLData = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee(query, mapFn, errorMessage) {\n    var response, data, _t;\n    return _regenerator().w(function (_context) {\n      while (1) switch (_context.p = _context.n) {\n        case 0:\n          _context.p = 0;\n          _context.n = 1;\n          return fetch(ENDPOINT_URL, {\n            method: \'POST\',\n            headers: HEADERS,\n            body: "query=".concat(encodeURIComponent(query))\n          });\n        case 1:\n          response = _context.v;\n          if (response.ok) {\n            _context.n = 2;\n            break;\n          }\n          throw new Error("HTTP error! status: ".concat(response.status));\n        case 2:\n          _context.n = 3;\n          return response.json();\n        case 3:\n          data = _context.v;\n          return _context.a(2, data.results.bindings.map(mapFn));\n        case 4:\n          _context.p = 4;\n          _t = _context.v;\n          console.error(errorMessage, _t);\n          return _context.a(2, []);\n      }\n    }, _callee, null, [[0, 4]]);\n  }));\n  return _fetchSPARQLData.apply(this, arguments);\n}\nvar extractFragment = function extractFragment(uri) {\n  return (uri === null || uri === void 0 ? void 0 : uri.split(\'/\').pop()) || "None";\n};\n\n/** --- Specific data fetchers below --- **/\n\nfunction fetchDatatypeData() {\n  return fetchSPARQLData(datatypeQuery, function (d) {\n    return {\n      label: extractFragment(d.datatype.value),\n      value: +d.count.value\n    };\n  }, "Error fetching datatype data:");\n}\nfunction fetchPropertyData() {\n  return fetchSPARQLData(propertyClassQuery, function (d) {\n    var _d$property;\n    return {\n      label: extractFragment((_d$property = d.property) === null || _d$property === void 0 ? void 0 : _d$property.value),\n      value: +d.count.value\n    };\n  }, "Error fetching property data:");\n}\nfunction fetchProjectPropertyData() {\n  return fetchSPARQLData(projectQuery, function (d) {\n    return {\n      label: d.projectLabel.value,\n      value: +d.count.value\n    };\n  }, "Error fetching project property data:");\n}\nfunction fetchLanguageData() {\n  return fetchSPARQLData(languageQuery, function (d) {\n    return {\n      label: d.language.value,\n      value: +d.count.value\n    };\n  }, "Error fetching language data:");\n}\nfunction fetchPropertyStatementData() {\n  return fetchSPARQLData(propertyStatementQuery, function (d) {\n    var _d$property2;\n    return {\n      label: extractFragment((_d$property2 = d.property) === null || _d$property2 === void 0 ? void 0 : _d$property2.value),\n      value: +d.statementCount.value\n    };\n  }, "Error fetching property statement data:");\n}\n\n/**\n * Renders an animated, responsive D3.js bar chart.\n * @param {string} containerId The ID of the container element (e.g., \'d3-chart\').\n * @param {Array<Object>} data Array of objects with \'label\' and \'value\' keys.\n * @param {string} chartTitle Chart heading.\n */\nfunction renderBarChart(_x4, _x5, _x6) {\n  return _renderBarChart.apply(this, arguments);\n}\nfunction _renderBarChart() {\n  _renderBarChart = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee2(containerId, data, chartTitle) {\n    var container, containerNode, containerWidth, margin, width, height, svg, x, y, tooltip, debounce, oldListener, newListener;\n    return _regenerator().w(function (_context2) {\n      while (1) switch (_context2.n) {\n        case 0:\n          debounce = function _debounce(fn, delay) {\n            var timeout;\n            return function () {\n              for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n                args[_key] = arguments[_key];\n              }\n              clearTimeout(timeout);\n              timeout = setTimeout(function () {\n                return fn.apply(void 0, args);\n              }, delay);\n            };\n          };\n          container = src_select("#".concat(containerId));\n          containerNode = container.node();\n          if (containerNode) {\n            _context2.n = 1;\n            break;\n          }\n          console.error("Container with ID #".concat(containerId, " not found."));\n          return _context2.a(2);\n        case 1:\n          if (!(data.length === 0)) {\n            _context2.n = 2;\n            break;\n          }\n          container.html("<p class=\\"text-red-600 font-semibold\\">\\uD83D\\uDEAB No data available for \\"".concat(chartTitle, "\\".</p>"));\n          return _context2.a(2);\n        case 2:\n          // Sort data descending\n          data.sort(function (a, b) {\n            return b.value - a.value;\n          });\n          containerWidth = containerNode.getBoundingClientRect().width;\n          margin = {\n            top: 50,\n            right: 30,\n            bottom: 140,\n            left: 60\n          };\n          width = containerWidth - margin.left - margin.right;\n          height = 500 - margin.top - margin.bottom; // Clear previous chart\n          container.select("svg").remove();\n          svg = container.append("svg").attr("viewBox", "0 0 ".concat(width + margin.left + margin.right, " ").concat(height + margin.top + margin.bottom)).attr("preserveAspectRatio", "xMidYMid meet").style("width", "100%").style("height", "auto").style("background-color", "#F3F4F6") // uniform light background\n          .append("g").attr("transform", "translate(".concat(margin.left, ",").concat(margin.top, ")")); // Title\n          svg.append("text").attr("x", width / 2).attr("y", -20).attr("text-anchor", "middle").style("font-size", "1.5rem").style("font-weight", "bold").style("fill", "#1F2937").style("opacity", 0).transition().duration(800).style("opacity", 1).text(chartTitle);\n          x = band().range([0, width]).padding(0.2).domain(data.map(function (d) {\n            return d.label;\n          }));\n          y = linear_linear().range([height, 0]).domain([0, max(data, function (d) {\n            return d.value;\n          })]);\n          svg.append("g").attr("transform", "translate(0,".concat(height, ")")).call(axisBottom(x)).selectAll("text").attr("transform", "rotate(-45)").style("text-anchor", "end").style("font-size", "0.75rem").style("fill", "#4B5563");\n          svg.append("g").call(axisLeft(y).ticks(5)).selectAll("text").style("font-size", "0.75rem").style("fill", "#4B5563");\n\n          // Tooltip\n          tooltip = src_select("body").select(".tooltip");\n          if (tooltip.empty()) {\n            tooltip = src_select("body").append("div").attr("class", "tooltip").style("position", "absolute").style("background", "rgba(31, 41, 55, 0.9)").style("color", "#fff").style("padding", "0.5rem 0.75rem").style("border-radius", "0.375rem").style("pointer-events", "none").style("font-size", "0.875rem").style("opacity", 0);\n          }\n\n          // Bars with animation\n          svg.selectAll(".bar").data(data).enter().append("rect").attr("class", "bar").attr("x", function (d) {\n            return x(d.label);\n          }).attr("width", x.bandwidth()).attr("y", height).attr("height", 0).style("fill", "#3B82F6").on("mouseover", function (event, d) {\n            src_select(event.currentTarget).style("fill", "#2563EB");\n            tooltip.transition().duration(200).style("opacity", 0.95);\n            tooltip.html("<strong>".concat(d.label, "</strong><br/>Value: ").concat(d.value)).style("left", "".concat(event.pageX + 10, "px")).style("top", "".concat(event.pageY - 30, "px"));\n          }).on("mouseout", function (event) {\n            src_select(event.currentTarget).style("fill", "#3B82F6");\n            tooltip.transition().duration(400).style("opacity", 0);\n          }).transition().duration(800).delay(function (_, i) {\n            return i * 50;\n          }).attr("y", function (d) {\n            return y(d.value);\n          }).attr("height", function (d) {\n            return height - y(d.value);\n          });\n\n          // Labels on bars\n          svg.selectAll(".bar-label").data(data).enter().append("text").attr("x", function (d) {\n            return x(d.label) + x.bandwidth() / 2;\n          }).attr("y", function (d) {\n            return y(d.value) - 8;\n          }).attr("text-anchor", "middle").style("font-size", "0.75rem").style("font-weight", "600").style("fill", "#111827").style("opacity", 0).text(function (d) {\n            return d.value;\n          }).transition().duration(800).delay(function (_, i) {\n            return i * 50;\n          }).style("opacity", 1);\n\n          // Debounced resize handler\n\n          // Resize listener per chart\n          if (!window._chartResizeListeners) {\n            window._chartResizeListeners = new Map();\n          }\n          oldListener = window._chartResizeListeners.get(containerId);\n          if (oldListener) {\n            window.removeEventListener(\'resize\', oldListener);\n          }\n          newListener = debounce(function () {\n            return renderBarChart(containerId, data, chartTitle);\n          }, 200);\n          window._chartResizeListeners.set(containerId, newListener);\n          window.addEventListener(\'resize\', newListener);\n        case 3:\n          return _context2.a(2);\n      }\n    }, _callee2);\n  }));\n  return _renderBarChart.apply(this, arguments);\n}\n;// ./wbprop.js\nfunction wbprop_regenerator() { /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */ var e, t, r = "function" == typeof Symbol ? Symbol : {}, n = r.iterator || "@@iterator", o = r.toStringTag || "@@toStringTag"; function i(r, n, o, i) { var c = n && n.prototype instanceof Generator ? n : Generator, u = Object.create(c.prototype); return wbprop_regeneratorDefine2(u, "_invoke", function (r, n, o) { var i, c, u, f = 0, p = o || [], y = !1, G = { p: 0, n: 0, v: e, a: d, f: d.bind(e, 4), d: function d(t, r) { return i = t, c = 0, u = e, G.n = r, a; } }; function d(r, n) { for (c = r, u = n, t = 0; !y && f && !o && t < p.length; t++) { var o, i = p[t], d = G.p, l = i[2]; r > 3 ? (o = l === n) && (u = i[(c = i[4]) ? 5 : (c = 3, 3)], i[4] = i[5] = e) : i[0] <= d && ((o = r < 2 && d < i[1]) ? (c = 0, G.v = n, G.n = i[1]) : d < l && (o = r < 3 || i[0] > n || n > l) && (i[4] = r, i[5] = n, G.n = l, c = 0)); } if (o || r > 1) return a; throw y = !0, n; } return function (o, p, l) { if (f > 1) throw TypeError("Generator is already running"); for (y && 1 === p && d(p, l), c = p, u = l; (t = c < 2 ? e : u) || !y;) { i || (c ? c < 3 ? (c > 1 && (G.n = -1), d(c, u)) : G.n = u : G.v = u); try { if (f = 2, i) { if (c || (o = "next"), t = i[o]) { if (!(t = t.call(i, u))) throw TypeError("iterator result is not an object"); if (!t.done) return t; u = t.value, c < 2 && (c = 0); } else 1 === c && (t = i["return"]) && t.call(i), c < 2 && (u = TypeError("The iterator does not provide a \'" + o + "\' method"), c = 1); i = e; } else if ((t = (y = G.n < 0) ? u : r.call(n, G)) !== a) break; } catch (t) { i = e, c = 1, u = t; } finally { f = 1; } } return { value: t, done: y }; }; }(r, o, i), !0), u; } var a = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} t = Object.getPrototypeOf; var c = [][n] ? t(t([][n]())) : (wbprop_regeneratorDefine2(t = {}, n, function () { return this; }), t), u = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(c); function f(e) { return Object.setPrototypeOf ? Object.setPrototypeOf(e, GeneratorFunctionPrototype) : (e.__proto__ = GeneratorFunctionPrototype, wbprop_regeneratorDefine2(e, o, "GeneratorFunction")), e.prototype = Object.create(u), e; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, wbprop_regeneratorDefine2(u, "constructor", GeneratorFunctionPrototype), wbprop_regeneratorDefine2(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = "GeneratorFunction", wbprop_regeneratorDefine2(GeneratorFunctionPrototype, o, "GeneratorFunction"), wbprop_regeneratorDefine2(u), wbprop_regeneratorDefine2(u, o, "Generator"), wbprop_regeneratorDefine2(u, n, function () { return this; }), wbprop_regeneratorDefine2(u, "toString", function () { return "[object Generator]"; }), (wbprop_regenerator = function _regenerator() { return { w: i, m: f }; })(); }\nfunction wbprop_regeneratorDefine2(e, r, n, t) { var i = Object.defineProperty; try { i({}, "", {}); } catch (e) { i = 0; } wbprop_regeneratorDefine2 = function _regeneratorDefine(e, r, n, t) { if (r) i ? i(e, r, { value: n, enumerable: !t, configurable: !t, writable: !t }) : e[r] = n;else { var o = function o(r, n) { wbprop_regeneratorDefine2(e, r, function (e) { return this._invoke(r, n, e); }); }; o("next", 0), o("throw", 1), o("return", 2); } }, wbprop_regeneratorDefine2(e, r, n, t); }\nfunction wbprop_asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction wbprop_asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { wbprop_asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { wbprop_asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }\nconsole.log("WBProp: Hello!");\n\n\nvar drawer = MDCDrawer.attachTo(document.querySelector(\'.mdc-drawer\'));\nvar topAppBar = MDCTopAppBar.attachTo(document.getElementById(\'app-bar\'));\ntopAppBar.setScrollTarget(document.getElementById(\'main-content\'));\ntopAppBar.listen(\'MDCTopAppBar:nav\', function () {\n  drawer.open = !drawer.open;\n});\n\n// Import the renderChart function from main.js\n\ndocument.addEventListener(\'DOMContentLoaded\', /*#__PURE__*/wbprop_asyncToGenerator(/*#__PURE__*/wbprop_regenerator().m(function _callee() {\n  var datatypeData, propertyData, projectData, propertyStatementsData, languageData;\n  return wbprop_regenerator().w(function (_context) {\n    while (1) switch (_context.n) {\n      case 0:\n        _context.n = 1;\n        return fetchDatatypeData();\n      case 1:\n        datatypeData = _context.v;\n        renderBarChart(\'d3-chart-datatypes\', datatypeData, \'Datatypes by Property Count\');\n\n        // Calls renderBarChart for the Properties chart\n        _context.n = 2;\n        return fetchPropertyData();\n      case 2:\n        propertyData = _context.v;\n        renderBarChart(\'d3-chart-properties\', propertyData, \'Properties by Property Classes Count\');\n        _context.n = 3;\n        return fetchProjectPropertyData();\n      case 3:\n        projectData = _context.v;\n        renderBarChart(\'d3-chart-projects\', projectData, \'WikiProjects by Property Count\');\n        _context.n = 4;\n        return fetchPropertyStatementData();\n      case 4:\n        propertyStatementsData = _context.v;\n        renderBarChart(\'d3-chart-statements\', propertyStatementsData, \'Property Statements Count\');\n        _context.n = 5;\n        return fetchLanguageData();\n      case 5:\n        languageData = _context.v;\n        renderBarChart(\'d3-chart-languages\', languageData, \'Property Translation Count\');\n      case 6:\n        return _context.a(2);\n    }\n  }, _callee);\n})));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///57\n\n}')},72:module=>{eval('{\n\nvar stylesInDOM = [];\nfunction getIndexByIdentifier(identifier) {\n  var result = -1;\n  for (var i = 0; i < stylesInDOM.length; i++) {\n    if (stylesInDOM[i].identifier === identifier) {\n      result = i;\n      break;\n    }\n  }\n  return result;\n}\nfunction modulesToDom(list, options) {\n  var idCountMap = {};\n  var identifiers = [];\n  for (var i = 0; i < list.length; i++) {\n    var item = list[i];\n    var id = options.base ? item[0] + options.base : item[0];\n    var count = idCountMap[id] || 0;\n    var identifier = "".concat(id, " ").concat(count);\n    idCountMap[id] = count + 1;\n    var indexByIdentifier = getIndexByIdentifier(identifier);\n    var obj = {\n      css: item[1],\n      media: item[2],\n      sourceMap: item[3],\n      supports: item[4],\n      layer: item[5]\n    };\n    if (indexByIdentifier !== -1) {\n      stylesInDOM[indexByIdentifier].references++;\n      stylesInDOM[indexByIdentifier].updater(obj);\n    } else {\n      var updater = addElementStyle(obj, options);\n      options.byIndex = i;\n      stylesInDOM.splice(i, 0, {\n        identifier: identifier,\n        updater: updater,\n        references: 1\n      });\n    }\n    identifiers.push(identifier);\n  }\n  return identifiers;\n}\nfunction addElementStyle(obj, options) {\n  var api = options.domAPI(options);\n  api.update(obj);\n  var updater = function updater(newObj) {\n    if (newObj) {\n      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap && newObj.supports === obj.supports && newObj.layer === obj.layer) {\n        return;\n      }\n      api.update(obj = newObj);\n    } else {\n      api.remove();\n    }\n  };\n  return updater;\n}\nmodule.exports = function (list, options) {\n  options = options || {};\n  list = list || [];\n  var lastIdentifiers = modulesToDom(list, options);\n  return function update(newList) {\n    newList = newList || [];\n    for (var i = 0; i < lastIdentifiers.length; i++) {\n      var identifier = lastIdentifiers[i];\n      var index = getIndexByIdentifier(identifier);\n      stylesInDOM[index].references--;\n    }\n    var newLastIdentifiers = modulesToDom(newList, options);\n    for (var _i = 0; _i < lastIdentifiers.length; _i++) {\n      var _identifier = lastIdentifiers[_i];\n      var _index = getIndexByIdentifier(_identifier);\n      if (stylesInDOM[_index].references === 0) {\n        stylesInDOM[_index].updater();\n        stylesInDOM.splice(_index, 1);\n      }\n    }\n    lastIdentifiers = newLastIdentifiers;\n  };\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzIuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLHdCQUF3QjtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixpQkFBaUI7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQiw0QkFBNEI7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQiw2QkFBNkI7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93YnByb3AvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanM/MmRiYSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxudmFyIHN0eWxlc0luRE9NID0gW107XG5mdW5jdGlvbiBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKSB7XG4gIHZhciByZXN1bHQgPSAtMTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXNJbkRPTS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChzdHlsZXNJbkRPTVtpXS5pZGVudGlmaWVyID09PSBpZGVudGlmaWVyKSB7XG4gICAgICByZXN1bHQgPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucykge1xuICB2YXIgaWRDb3VudE1hcCA9IHt9O1xuICB2YXIgaWRlbnRpZmllcnMgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBsaXN0W2ldO1xuICAgIHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuICAgIHZhciBjb3VudCA9IGlkQ291bnRNYXBbaWRdIHx8IDA7XG4gICAgdmFyIGlkZW50aWZpZXIgPSBcIlwiLmNvbmNhdChpZCwgXCIgXCIpLmNvbmNhdChjb3VudCk7XG4gICAgaWRDb3VudE1hcFtpZF0gPSBjb3VudCArIDE7XG4gICAgdmFyIGluZGV4QnlJZGVudGlmaWVyID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgdmFyIG9iaiA9IHtcbiAgICAgIGNzczogaXRlbVsxXSxcbiAgICAgIG1lZGlhOiBpdGVtWzJdLFxuICAgICAgc291cmNlTWFwOiBpdGVtWzNdLFxuICAgICAgc3VwcG9ydHM6IGl0ZW1bNF0sXG4gICAgICBsYXllcjogaXRlbVs1XVxuICAgIH07XG4gICAgaWYgKGluZGV4QnlJZGVudGlmaWVyICE9PSAtMSkge1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnJlZmVyZW5jZXMrKztcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4QnlJZGVudGlmaWVyXS51cGRhdGVyKG9iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciB1cGRhdGVyID0gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucyk7XG4gICAgICBvcHRpb25zLmJ5SW5kZXggPSBpO1xuICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKGksIDAsIHtcbiAgICAgICAgaWRlbnRpZmllcjogaWRlbnRpZmllcixcbiAgICAgICAgdXBkYXRlcjogdXBkYXRlcixcbiAgICAgICAgcmVmZXJlbmNlczogMVxuICAgICAgfSk7XG4gICAgfVxuICAgIGlkZW50aWZpZXJzLnB1c2goaWRlbnRpZmllcik7XG4gIH1cbiAgcmV0dXJuIGlkZW50aWZpZXJzO1xufVxuZnVuY3Rpb24gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucykge1xuICB2YXIgYXBpID0gb3B0aW9ucy5kb21BUEkob3B0aW9ucyk7XG4gIGFwaS51cGRhdGUob2JqKTtcbiAgdmFyIHVwZGF0ZXIgPSBmdW5jdGlvbiB1cGRhdGVyKG5ld09iaikge1xuICAgIGlmIChuZXdPYmopIHtcbiAgICAgIGlmIChuZXdPYmouY3NzID09PSBvYmouY3NzICYmIG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmIG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXAgJiYgbmV3T2JqLnN1cHBvcnRzID09PSBvYmouc3VwcG9ydHMgJiYgbmV3T2JqLmxheWVyID09PSBvYmoubGF5ZXIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgYXBpLnVwZGF0ZShvYmogPSBuZXdPYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVtb3ZlKCk7XG4gICAgfVxuICB9O1xuICByZXR1cm4gdXBkYXRlcjtcbn1cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGxpc3QsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIGxpc3QgPSBsaXN0IHx8IFtdO1xuICB2YXIgbGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlKG5ld0xpc3QpIHtcbiAgICBuZXdMaXN0ID0gbmV3TGlzdCB8fCBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGlkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbaV07XG4gICAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4XS5yZWZlcmVuY2VzLS07XG4gICAgfVxuICAgIHZhciBuZXdMYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obmV3TGlzdCwgb3B0aW9ucyk7XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBfaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tfaV07XG4gICAgICB2YXIgX2luZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoX2lkZW50aWZpZXIpO1xuICAgICAgaWYgKHN0eWxlc0luRE9NW19pbmRleF0ucmVmZXJlbmNlcyA9PT0gMCkge1xuICAgICAgICBzdHlsZXNJbkRPTVtfaW5kZXhdLnVwZGF0ZXIoKTtcbiAgICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKF9pbmRleCwgMSk7XG4gICAgICB9XG4gICAgfVxuICAgIGxhc3RJZGVudGlmaWVycyA9IG5ld0xhc3RJZGVudGlmaWVycztcbiAgfTtcbn07Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///72\n\n}')},113:module=>{eval("{\n\n/* istanbul ignore next  */\nfunction styleTagTransform(css, styleElement) {\n  if (styleElement.styleSheet) {\n    styleElement.styleSheet.cssText = css;\n  } else {\n    while (styleElement.firstChild) {\n      styleElement.removeChild(styleElement.firstChild);\n    }\n    styleElement.appendChild(document.createTextNode(css));\n  }\n}\nmodule.exports = styleTagTransform;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTEzLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2Jwcm9wLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanM/MWRkZSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCkge1xuICBpZiAoc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZUVsZW1lbnQuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCkge1xuICAgICAgc3R5bGVFbGVtZW50LnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKTtcbiAgICB9XG4gICAgc3R5bGVFbGVtZW50LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IHN0eWxlVGFnVHJhbnNmb3JtOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///113\n\n}")},233:(t,n,c)=>{t.exports=c.p+"fonts/MaterialIcons-Regular.ttf"},272:(__unused_webpack_module,__unused_webpack___webpack_exports__,__webpack_require__)=>{eval('{/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(72);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(825);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(659);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(56);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(540);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(113);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var _node_modules_css_loader_dist_cjs_js_node_modules_postcss_loader_dist_cjs_js_ruleSet_1_rules_0_use_2_node_modules_sass_loader_dist_cjs_js_ruleSet_1_rules_0_use_3_wbprop_scss__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(805);\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = (_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());\noptions.setAttributes = (_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());\noptions.insert = _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, "head");\noptions.domAPI = (_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());\noptions.insertStyleElement = (_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());\n\nvar update = _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_css_loader_dist_cjs_js_node_modules_postcss_loader_dist_cjs_js_ruleSet_1_rules_0_use_2_node_modules_sass_loader_dist_cjs_js_ruleSet_1_rules_0_use_3_wbprop_scss__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .A, options);\n\n\n\n\n       /* unused harmony default export */ var __WEBPACK_DEFAULT_EXPORT__ = (_node_modules_css_loader_dist_cjs_js_node_modules_postcss_loader_dist_cjs_js_ruleSet_1_rules_0_use_2_node_modules_sass_loader_dist_cjs_js_ruleSet_1_rules_0_use_3_wbprop_scss__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .A && _node_modules_css_loader_dist_cjs_js_node_modules_postcss_loader_dist_cjs_js_ruleSet_1_rules_0_use_2_node_modules_sass_loader_dist_cjs_js_ruleSet_1_rules_0_use_3_wbprop_scss__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .A.locals ? _node_modules_css_loader_dist_cjs_js_node_modules_postcss_loader_dist_cjs_js_ruleSet_1_rules_0_use_2_node_modules_sass_loader_dist_cjs_js_ruleSet_1_rules_0_use_3_wbprop_scss__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .A.locals : undefined);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjcyLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0FBQ0EsTUFBOEY7QUFDOUYsTUFBb0Y7QUFDcEYsTUFBMkY7QUFDM0YsTUFBOEc7QUFDOUcsTUFBdUc7QUFDdkcsTUFBdUc7QUFDdkcsTUFBNk87QUFDN087QUFDQTs7QUFFQTs7QUFFQSw0QkFBNEIscUdBQW1CO0FBQy9DLHdCQUF3QixrSEFBYTtBQUNyQyxpQkFBaUIsdUdBQWE7QUFDOUIsaUJBQWlCLCtGQUFNO0FBQ3ZCLDZCQUE2QixzR0FBa0I7O0FBRS9DLGFBQWEsMEdBQUcsQ0FBQyw4TkFBTzs7OztBQUl1TDtBQUMvTSxPQUFPLHNFQUFlLDhOQUFPLElBQUksOE5BQU8sVUFBVSw4TkFBTyxtQkFBbUIsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL3dicHJvcC8uL3dicHJvcC5zY3NzP2Q1YmEiXSwic291cmNlc0NvbnRlbnQiOlsiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzBdLnVzZVsyXSEuL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1swXS51c2VbM10hLi93YnByb3Auc2Nzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xub3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzBdLnVzZVsyXSEuL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1swXS51c2VbM10hLi93YnByb3Auc2Nzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///272\n\n}')},314:module=>{eval('{\n\n/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n*/\nmodule.exports = function (cssWithMappingToString) {\n  var list = [];\n\n  // return the list of modules as css string\n  list.toString = function toString() {\n    return this.map(function (item) {\n      var content = "";\n      var needLayer = typeof item[5] !== "undefined";\n      if (item[4]) {\n        content += "@supports (".concat(item[4], ") {");\n      }\n      if (item[2]) {\n        content += "@media ".concat(item[2], " {");\n      }\n      if (needLayer) {\n        content += "@layer".concat(item[5].length > 0 ? " ".concat(item[5]) : "", " {");\n      }\n      content += cssWithMappingToString(item);\n      if (needLayer) {\n        content += "}";\n      }\n      if (item[2]) {\n        content += "}";\n      }\n      if (item[4]) {\n        content += "}";\n      }\n      return content;\n    }).join("");\n  };\n\n  // import a list of modules into the list\n  list.i = function i(modules, media, dedupe, supports, layer) {\n    if (typeof modules === "string") {\n      modules = [[null, modules, undefined]];\n    }\n    var alreadyImportedModules = {};\n    if (dedupe) {\n      for (var k = 0; k < this.length; k++) {\n        var id = this[k][0];\n        if (id != null) {\n          alreadyImportedModules[id] = true;\n        }\n      }\n    }\n    for (var _k = 0; _k < modules.length; _k++) {\n      var item = [].concat(modules[_k]);\n      if (dedupe && alreadyImportedModules[item[0]]) {\n        continue;\n      }\n      if (typeof layer !== "undefined") {\n        if (typeof item[5] === "undefined") {\n          item[5] = layer;\n        } else {\n          item[1] = "@layer".concat(item[5].length > 0 ? " ".concat(item[5]) : "", " {").concat(item[1], "}");\n          item[5] = layer;\n        }\n      }\n      if (media) {\n        if (!item[2]) {\n          item[2] = media;\n        } else {\n          item[1] = "@media ".concat(item[2], " {").concat(item[1], "}");\n          item[2] = media;\n        }\n      }\n      if (supports) {\n        if (!item[4]) {\n          item[4] = "".concat(supports);\n        } else {\n          item[1] = "@supports (".concat(item[4], ") {").concat(item[1], "}");\n          item[4] = supports;\n        }\n      }\n      list.push(item);\n    }\n  };\n  return list;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzE0LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxREFBcUQ7QUFDckQ7QUFDQTtBQUNBLGdEQUFnRDtBQUNoRDtBQUNBO0FBQ0EscUZBQXFGO0FBQ3JGO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixpQkFBaUI7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLHFCQUFxQjtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVixzRkFBc0YscUJBQXFCO0FBQzNHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVixpREFBaUQscUJBQXFCO0FBQ3RFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVixzREFBc0QscUJBQXFCO0FBQzNFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93YnByb3AvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzPzI0ZmIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gIEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKSB7XG4gIHZhciBsaXN0ID0gW107XG5cbiAgLy8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuICBsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICB2YXIgY29udGVudCA9IFwiXCI7XG4gICAgICB2YXIgbmVlZExheWVyID0gdHlwZW9mIGl0ZW1bNV0gIT09IFwidW5kZWZpbmVkXCI7XG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIik7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpO1xuICAgICAgfVxuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIik7XG4gICAgICB9XG4gICAgICBjb250ZW50ICs9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSk7XG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjb250ZW50O1xuICAgIH0pLmpvaW4oXCJcIik7XG4gIH07XG5cbiAgLy8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcbiAgbGlzdC5pID0gZnVuY3Rpb24gaShtb2R1bGVzLCBtZWRpYSwgZGVkdXBlLCBzdXBwb3J0cywgbGF5ZXIpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZXMgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsIHVuZGVmaW5lZF1dO1xuICAgIH1cbiAgICB2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuICAgIGlmIChkZWR1cGUpIHtcbiAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgdGhpcy5sZW5ndGg7IGsrKykge1xuICAgICAgICB2YXIgaWQgPSB0aGlzW2tdWzBdO1xuICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKHZhciBfayA9IDA7IF9rIDwgbW9kdWxlcy5sZW5ndGg7IF9rKyspIHtcbiAgICAgIHZhciBpdGVtID0gW10uY29uY2F0KG1vZHVsZXNbX2tdKTtcbiAgICAgIGlmIChkZWR1cGUgJiYgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgbGF5ZXIgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBpdGVtWzVdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAobWVkaWEpIHtcbiAgICAgICAgaWYgKCFpdGVtWzJdKSB7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHN1cHBvcnRzKSB7XG4gICAgICAgIGlmICghaXRlbVs0XSkge1xuICAgICAgICAgIGl0ZW1bNF0gPSBcIlwiLmNvbmNhdChzdXBwb3J0cyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzRdID0gc3VwcG9ydHM7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGxpc3QucHVzaChpdGVtKTtcbiAgICB9XG4gIH07XG4gIHJldHVybiBsaXN0O1xufTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///314\n\n}')},354:module=>{eval('{\n\nmodule.exports = function (item) {\n  var content = item[1];\n  var cssMapping = item[3];\n  if (!cssMapping) {\n    return content;\n  }\n  if (typeof btoa === "function") {\n    var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(cssMapping))));\n    var data = "sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(base64);\n    var sourceMapping = "/*# ".concat(data, " */");\n    return [content].concat([sourceMapping]).join("\\n");\n  }\n  return [content].join("\\n");\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzU0LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1REFBdUQsY0FBYztBQUNyRTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2Jwcm9wLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanM/YWYxMiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlbSkge1xuICB2YXIgY29udGVudCA9IGl0ZW1bMV07XG4gIHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcbiAgaWYgKCFjc3NNYXBwaW5nKSB7XG4gICAgcmV0dXJuIGNvbnRlbnQ7XG4gIH1cbiAgaWYgKHR5cGVvZiBidG9hID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICB2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoY3NzTWFwcGluZykpKSk7XG4gICAgdmFyIGRhdGEgPSBcInNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LFwiLmNvbmNhdChiYXNlNjQpO1xuICAgIHZhciBzb3VyY2VNYXBwaW5nID0gXCIvKiMgXCIuY29uY2F0KGRhdGEsIFwiICovXCIpO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbihcIlxcblwiKTtcbiAgfVxuICByZXR1cm4gW2NvbnRlbnRdLmpvaW4oXCJcXG5cIik7XG59OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///354\n\n}')},417:module=>{eval('{\n\nmodule.exports = function (url, options) {\n  if (!options) {\n    options = {};\n  }\n  if (!url) {\n    return url;\n  }\n  url = String(url.__esModule ? url.default : url);\n\n  // If url is already wrapped in quotes, remove them\n  if (/^[\'"].*[\'"]$/.test(url)) {\n    url = url.slice(1, -1);\n  }\n  if (options.hash) {\n    url += options.hash;\n  }\n\n  // Should url be wrapped?\n  // See https://drafts.csswg.org/css-values-3/#urls\n  if (/["\'() \\t\\n]|(%20)/.test(url) || options.needQuotes) {\n    return "\\"".concat(url.replace(/"/g, \'\\\\"\').replace(/\\n/g, "\\\\n"), "\\"");\n  }\n  return url;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDE3LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93YnByb3AvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvZ2V0VXJsLmpzPzFkZTUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHVybCwgb3B0aW9ucykge1xuICBpZiAoIW9wdGlvbnMpIHtcbiAgICBvcHRpb25zID0ge307XG4gIH1cbiAgaWYgKCF1cmwpIHtcbiAgICByZXR1cm4gdXJsO1xuICB9XG4gIHVybCA9IFN0cmluZyh1cmwuX19lc01vZHVsZSA/IHVybC5kZWZhdWx0IDogdXJsKTtcblxuICAvLyBJZiB1cmwgaXMgYWxyZWFkeSB3cmFwcGVkIGluIHF1b3RlcywgcmVtb3ZlIHRoZW1cbiAgaWYgKC9eWydcIl0uKlsnXCJdJC8udGVzdCh1cmwpKSB7XG4gICAgdXJsID0gdXJsLnNsaWNlKDEsIC0xKTtcbiAgfVxuICBpZiAob3B0aW9ucy5oYXNoKSB7XG4gICAgdXJsICs9IG9wdGlvbnMuaGFzaDtcbiAgfVxuXG4gIC8vIFNob3VsZCB1cmwgYmUgd3JhcHBlZD9cbiAgLy8gU2VlIGh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3MtdmFsdWVzLTMvI3VybHNcbiAgaWYgKC9bXCInKCkgXFx0XFxuXXwoJTIwKS8udGVzdCh1cmwpIHx8IG9wdGlvbnMubmVlZFF1b3Rlcykge1xuICAgIHJldHVybiBcIlxcXCJcIi5jb25jYXQodXJsLnJlcGxhY2UoL1wiL2csICdcXFxcXCInKS5yZXBsYWNlKC9cXG4vZywgXCJcXFxcblwiKSwgXCJcXFwiXCIpO1xuICB9XG4gIHJldHVybiB1cmw7XG59OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///417\n\n}')},540:module=>{eval('{\n\n/* istanbul ignore next  */\nfunction insertStyleElement(options) {\n  var element = document.createElement("style");\n  options.setAttributes(element, options.attributes);\n  options.insert(element, options.options);\n  return element;\n}\nmodule.exports = insertStyleElement;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTQwLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93YnByb3AvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanM/ZGU2YyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykge1xuICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcbiAgb3B0aW9ucy5zZXRBdHRyaWJ1dGVzKGVsZW1lbnQsIG9wdGlvbnMuYXR0cmlidXRlcyk7XG4gIG9wdGlvbnMuaW5zZXJ0KGVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG4gIHJldHVybiBlbGVtZW50O1xufVxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///540\n\n}')},583:(t,n,c)=>{t.exports=c.p+"fonts/MaterialIcons-Regular.eot"},622:(module,__webpack_exports__,__webpack_require__)=>{eval("{/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(354);\n/* harmony import */ var _css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(314);\n/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(417);\n/* harmony import */ var _css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2__);\n// Imports\n\n\n\nvar ___CSS_LOADER_URL_IMPORT_0___ = new URL(/* asset import */ __webpack_require__(583), __webpack_require__.b);\nvar ___CSS_LOADER_URL_IMPORT_1___ = new URL(/* asset import */ __webpack_require__(695), __webpack_require__.b);\nvar ___CSS_LOADER_URL_IMPORT_2___ = new URL(/* asset import */ __webpack_require__(943), __webpack_require__.b);\nvar ___CSS_LOADER_URL_IMPORT_3___ = new URL(/* asset import */ __webpack_require__(233), __webpack_require__.b);\nvar ___CSS_LOADER_EXPORT___ = _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\nvar ___CSS_LOADER_URL_REPLACEMENT_0___ = _css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_0___);\nvar ___CSS_LOADER_URL_REPLACEMENT_1___ = _css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_1___);\nvar ___CSS_LOADER_URL_REPLACEMENT_2___ = _css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_2___);\nvar ___CSS_LOADER_URL_REPLACEMENT_3___ = _css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_3___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `@font-face {\n  font-family: 'Material Icons';\n  font-style: normal;\n  font-weight: 400;\n  src: url(${___CSS_LOADER_URL_REPLACEMENT_0___}); /* For IE6-8 */\n  src: local('Material Icons'),\n       local('MaterialIcons-Regular'),\n       url(${___CSS_LOADER_URL_REPLACEMENT_1___}) format('woff2'),\n       url(${___CSS_LOADER_URL_REPLACEMENT_2___}) format('woff'),\n       url(${___CSS_LOADER_URL_REPLACEMENT_3___}) format('truetype');\n}\n\n.material-icons {\n  font-family: 'Material Icons';\n  font-weight: normal;\n  font-style: normal;\n  font-size: 24px;  /* Preferred icon size */\n  display: inline-block;\n  line-height: 1;\n  text-transform: none;\n  letter-spacing: normal;\n  word-wrap: normal;\n  white-space: nowrap;\n  direction: ltr;\n\n  /* Support for all WebKit browsers. */\n  -webkit-font-smoothing: antialiased;\n  /* Support for Safari and Chrome. */\n  text-rendering: optimizeLegibility;\n\n  /* Support for Firefox. */\n  -moz-osx-font-smoothing: grayscale;\n\n  /* Support for IE. */\n  font-feature-settings: 'liga';\n}\n`, \"\",{\"version\":3,\"sources\":[\"webpack://./node_modules/material-design-icons/iconfont/material-icons.css\"],\"names\":[],\"mappings\":\"AAAA;EACE,6BAA6B;EAC7B,kBAAkB;EAClB,gBAAgB;EAChB,4CAAmC,EAAE,cAAc;EACnD;;;;iEAIsD;AACxD;;AAEA;EACE,6BAA6B;EAC7B,mBAAmB;EACnB,kBAAkB;EAClB,eAAe,GAAG,wBAAwB;EAC1C,qBAAqB;EACrB,cAAc;EACd,oBAAoB;EACpB,sBAAsB;EACtB,iBAAiB;EACjB,mBAAmB;EACnB,cAAc;;EAEd,qCAAqC;EACrC,mCAAmC;EACnC,mCAAmC;EACnC,kCAAkC;;EAElC,yBAAyB;EACzB,kCAAkC;;EAElC,oBAAoB;EACpB,6BAA6B;AAC/B\",\"sourcesContent\":[\"@font-face {\\n  font-family: 'Material Icons';\\n  font-style: normal;\\n  font-weight: 400;\\n  src: url(MaterialIcons-Regular.eot); /* For IE6-8 */\\n  src: local('Material Icons'),\\n       local('MaterialIcons-Regular'),\\n       url(MaterialIcons-Regular.woff2) format('woff2'),\\n       url(MaterialIcons-Regular.woff) format('woff'),\\n       url(MaterialIcons-Regular.ttf) format('truetype');\\n}\\n\\n.material-icons {\\n  font-family: 'Material Icons';\\n  font-weight: normal;\\n  font-style: normal;\\n  font-size: 24px;  /* Preferred icon size */\\n  display: inline-block;\\n  line-height: 1;\\n  text-transform: none;\\n  letter-spacing: normal;\\n  word-wrap: normal;\\n  white-space: nowrap;\\n  direction: ltr;\\n\\n  /* Support for all WebKit browsers. */\\n  -webkit-font-smoothing: antialiased;\\n  /* Support for Safari and Chrome. */\\n  text-rendering: optimizeLegibility;\\n\\n  /* Support for Firefox. */\\n  -moz-osx-font-smoothing: grayscale;\\n\\n  /* Support for IE. */\\n  font-feature-settings: 'liga';\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjIyLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBO0FBQ2dHO0FBQ2pCO0FBQ087QUFDdEYsNENBQTRDLGtFQUE0QztBQUN4Riw0Q0FBNEMsa0VBQThDO0FBQzFGLDRDQUE0QyxrRUFBNkM7QUFDekYsNENBQTRDLGtFQUE0QztBQUN4Riw4QkFBOEIsc0VBQTJCLENBQUMsK0VBQXFDO0FBQy9GLHlDQUF5Qyx5RUFBK0I7QUFDeEUseUNBQXlDLHlFQUErQjtBQUN4RSx5Q0FBeUMseUVBQStCO0FBQ3hFLHlDQUF5Qyx5RUFBK0I7QUFDeEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsbUNBQW1DLEdBQUc7QUFDbkQ7QUFDQTtBQUNBLGFBQWEsbUNBQW1DO0FBQ2hELGFBQWEsbUNBQW1DO0FBQ2hELGFBQWEsbUNBQW1DO0FBQ2hEOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsT0FBTyxpSUFBaUksWUFBWSxhQUFhLGFBQWEsdUJBQXVCLFNBQVMsT0FBTyxPQUFPLEtBQUssWUFBWSxhQUFhLGFBQWEsdUJBQXVCLGFBQWEsV0FBVyxZQUFZLGFBQWEsYUFBYSxhQUFhLFlBQVksWUFBWSxhQUFhLGFBQWEsY0FBYyxhQUFhLGNBQWMsYUFBYSxhQUFhLHNDQUFzQyxrQ0FBa0MsdUJBQXVCLHFCQUFxQix5Q0FBeUMscVFBQXFRLEdBQUcscUJBQXFCLGtDQUFrQyx3QkFBd0IsdUJBQXVCLHNCQUFzQixtREFBbUQsbUJBQW1CLHlCQUF5QiwyQkFBMkIsc0JBQXNCLHdCQUF3QixtQkFBbUIsb0ZBQW9GLCtFQUErRSx1RUFBdUUsNkRBQTZELEdBQUcscUJBQXFCO0FBQ3ovQztBQUNBLGlFQUFlLHVCQUF1QixFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2Jwcm9wLy4vbm9kZV9tb2R1bGVzL21hdGVyaWFsLWRlc2lnbi1pY29ucy9pY29uZm9udC9tYXRlcmlhbC1pY29ucy5jc3M/YmNkYSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvZ2V0VXJsLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzBfX18gPSBuZXcgVVJMKFwiTWF0ZXJpYWxJY29ucy1SZWd1bGFyLmVvdFwiLCBpbXBvcnQubWV0YS51cmwpO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8xX19fID0gbmV3IFVSTChcIk1hdGVyaWFsSWNvbnMtUmVndWxhci53b2ZmMlwiLCBpbXBvcnQubWV0YS51cmwpO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8yX19fID0gbmV3IFVSTChcIk1hdGVyaWFsSWNvbnMtUmVndWxhci53b2ZmXCIsIGltcG9ydC5tZXRhLnVybCk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzNfX18gPSBuZXcgVVJMKFwiTWF0ZXJpYWxJY29ucy1SZWd1bGFyLnR0ZlwiLCBpbXBvcnQubWV0YS51cmwpO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzBfX18gPSBfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8wX19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8xX19fID0gX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMV9fXyk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMl9fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzJfX18pO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzNfX18gPSBfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8zX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBgQGZvbnQtZmFjZSB7XG4gIGZvbnQtZmFtaWx5OiAnTWF0ZXJpYWwgSWNvbnMnO1xuICBmb250LXN0eWxlOiBub3JtYWw7XG4gIGZvbnQtd2VpZ2h0OiA0MDA7XG4gIHNyYzogdXJsKCR7X19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMF9fX30pOyAvKiBGb3IgSUU2LTggKi9cbiAgc3JjOiBsb2NhbCgnTWF0ZXJpYWwgSWNvbnMnKSxcbiAgICAgICBsb2NhbCgnTWF0ZXJpYWxJY29ucy1SZWd1bGFyJyksXG4gICAgICAgdXJsKCR7X19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMV9fX30pIGZvcm1hdCgnd29mZjInKSxcbiAgICAgICB1cmwoJHtfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8yX19ffSkgZm9ybWF0KCd3b2ZmJyksXG4gICAgICAgdXJsKCR7X19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfM19fX30pIGZvcm1hdCgndHJ1ZXR5cGUnKTtcbn1cblxuLm1hdGVyaWFsLWljb25zIHtcbiAgZm9udC1mYW1pbHk6ICdNYXRlcmlhbCBJY29ucyc7XG4gIGZvbnQtd2VpZ2h0OiBub3JtYWw7XG4gIGZvbnQtc3R5bGU6IG5vcm1hbDtcbiAgZm9udC1zaXplOiAyNHB4OyAgLyogUHJlZmVycmVkIGljb24gc2l6ZSAqL1xuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gIGxpbmUtaGVpZ2h0OiAxO1xuICB0ZXh0LXRyYW5zZm9ybTogbm9uZTtcbiAgbGV0dGVyLXNwYWNpbmc6IG5vcm1hbDtcbiAgd29yZC13cmFwOiBub3JtYWw7XG4gIHdoaXRlLXNwYWNlOiBub3dyYXA7XG4gIGRpcmVjdGlvbjogbHRyO1xuXG4gIC8qIFN1cHBvcnQgZm9yIGFsbCBXZWJLaXQgYnJvd3NlcnMuICovXG4gIC13ZWJraXQtZm9udC1zbW9vdGhpbmc6IGFudGlhbGlhc2VkO1xuICAvKiBTdXBwb3J0IGZvciBTYWZhcmkgYW5kIENocm9tZS4gKi9cbiAgdGV4dC1yZW5kZXJpbmc6IG9wdGltaXplTGVnaWJpbGl0eTtcblxuICAvKiBTdXBwb3J0IGZvciBGaXJlZm94LiAqL1xuICAtbW96LW9zeC1mb250LXNtb290aGluZzogZ3JheXNjYWxlO1xuXG4gIC8qIFN1cHBvcnQgZm9yIElFLiAqL1xuICBmb250LWZlYXR1cmUtc2V0dGluZ3M6ICdsaWdhJztcbn1cbmAsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vbm9kZV9tb2R1bGVzL21hdGVyaWFsLWRlc2lnbi1pY29ucy9pY29uZm9udC9tYXRlcmlhbC1pY29ucy5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7RUFDRSw2QkFBNkI7RUFDN0Isa0JBQWtCO0VBQ2xCLGdCQUFnQjtFQUNoQiw0Q0FBbUMsRUFBRSxjQUFjO0VBQ25EOzs7O2lFQUlzRDtBQUN4RDs7QUFFQTtFQUNFLDZCQUE2QjtFQUM3QixtQkFBbUI7RUFDbkIsa0JBQWtCO0VBQ2xCLGVBQWUsR0FBRyx3QkFBd0I7RUFDMUMscUJBQXFCO0VBQ3JCLGNBQWM7RUFDZCxvQkFBb0I7RUFDcEIsc0JBQXNCO0VBQ3RCLGlCQUFpQjtFQUNqQixtQkFBbUI7RUFDbkIsY0FBYzs7RUFFZCxxQ0FBcUM7RUFDckMsbUNBQW1DO0VBQ25DLG1DQUFtQztFQUNuQyxrQ0FBa0M7O0VBRWxDLHlCQUF5QjtFQUN6QixrQ0FBa0M7O0VBRWxDLG9CQUFvQjtFQUNwQiw2QkFBNkI7QUFDL0JcIixcInNvdXJjZXNDb250ZW50XCI6W1wiQGZvbnQtZmFjZSB7XFxuICBmb250LWZhbWlseTogJ01hdGVyaWFsIEljb25zJztcXG4gIGZvbnQtc3R5bGU6IG5vcm1hbDtcXG4gIGZvbnQtd2VpZ2h0OiA0MDA7XFxuICBzcmM6IHVybChNYXRlcmlhbEljb25zLVJlZ3VsYXIuZW90KTsgLyogRm9yIElFNi04ICovXFxuICBzcmM6IGxvY2FsKCdNYXRlcmlhbCBJY29ucycpLFxcbiAgICAgICBsb2NhbCgnTWF0ZXJpYWxJY29ucy1SZWd1bGFyJyksXFxuICAgICAgIHVybChNYXRlcmlhbEljb25zLVJlZ3VsYXIud29mZjIpIGZvcm1hdCgnd29mZjInKSxcXG4gICAgICAgdXJsKE1hdGVyaWFsSWNvbnMtUmVndWxhci53b2ZmKSBmb3JtYXQoJ3dvZmYnKSxcXG4gICAgICAgdXJsKE1hdGVyaWFsSWNvbnMtUmVndWxhci50dGYpIGZvcm1hdCgndHJ1ZXR5cGUnKTtcXG59XFxuXFxuLm1hdGVyaWFsLWljb25zIHtcXG4gIGZvbnQtZmFtaWx5OiAnTWF0ZXJpYWwgSWNvbnMnO1xcbiAgZm9udC13ZWlnaHQ6IG5vcm1hbDtcXG4gIGZvbnQtc3R5bGU6IG5vcm1hbDtcXG4gIGZvbnQtc2l6ZTogMjRweDsgIC8qIFByZWZlcnJlZCBpY29uIHNpemUgKi9cXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIGxpbmUtaGVpZ2h0OiAxO1xcbiAgdGV4dC10cmFuc2Zvcm06IG5vbmU7XFxuICBsZXR0ZXItc3BhY2luZzogbm9ybWFsO1xcbiAgd29yZC13cmFwOiBub3JtYWw7XFxuICB3aGl0ZS1zcGFjZTogbm93cmFwO1xcbiAgZGlyZWN0aW9uOiBsdHI7XFxuXFxuICAvKiBTdXBwb3J0IGZvciBhbGwgV2ViS2l0IGJyb3dzZXJzLiAqL1xcbiAgLXdlYmtpdC1mb250LXNtb290aGluZzogYW50aWFsaWFzZWQ7XFxuICAvKiBTdXBwb3J0IGZvciBTYWZhcmkgYW5kIENocm9tZS4gKi9cXG4gIHRleHQtcmVuZGVyaW5nOiBvcHRpbWl6ZUxlZ2liaWxpdHk7XFxuXFxuICAvKiBTdXBwb3J0IGZvciBGaXJlZm94LiAqL1xcbiAgLW1vei1vc3gtZm9udC1zbW9vdGhpbmc6IGdyYXlzY2FsZTtcXG5cXG4gIC8qIFN1cHBvcnQgZm9yIElFLiAqL1xcbiAgZm9udC1mZWF0dXJlLXNldHRpbmdzOiAnbGlnYSc7XFxufVxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///622\n\n}")},659:module=>{eval('{\n\nvar memo = {};\n\n/* istanbul ignore next  */\nfunction getTarget(target) {\n  if (typeof memo[target] === "undefined") {\n    var styleTarget = document.querySelector(target);\n\n    // Special case to return head of iframe instead of iframe itself\n    if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {\n      try {\n        // This will throw an exception if access to iframe is blocked\n        // due to cross-origin restrictions\n        styleTarget = styleTarget.contentDocument.head;\n      } catch (e) {\n        // istanbul ignore next\n        styleTarget = null;\n      }\n    }\n    memo[target] = styleTarget;\n  }\n  return memo[target];\n}\n\n/* istanbul ignore next  */\nfunction insertBySelector(insert, style) {\n  var target = getTarget(insert);\n  if (!target) {\n    throw new Error("Couldn\'t find a style target. This probably means that the value for the \'insert\' parameter is invalid.");\n  }\n  target.appendChild(style);\n}\nmodule.exports = insertBySelector;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjU5LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3dicHJvcC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanM/YjIxNCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxudmFyIG1lbW8gPSB7fTtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBnZXRUYXJnZXQodGFyZ2V0KSB7XG4gIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgdmFyIHN0eWxlVGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpO1xuXG4gICAgLy8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcbiAgICBpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG4gICAgICB0cnkge1xuICAgICAgICAvLyBUaGlzIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFjY2VzcyB0byBpZnJhbWUgaXMgYmxvY2tlZFxuICAgICAgICAvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuICAgICAgICBzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxuICAgICAgICBzdHlsZVRhcmdldCA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuICAgIG1lbW9bdGFyZ2V0XSA9IHN0eWxlVGFyZ2V0O1xuICB9XG4gIHJldHVybiBtZW1vW3RhcmdldF07XG59XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gaW5zZXJ0QnlTZWxlY3RvcihpbnNlcnQsIHN0eWxlKSB7XG4gIHZhciB0YXJnZXQgPSBnZXRUYXJnZXQoaW5zZXJ0KTtcbiAgaWYgKCF0YXJnZXQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydCcgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuICB9XG4gIHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydEJ5U2VsZWN0b3I7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///659\n\n}')},695:(t,n,c)=>{t.exports=c.p+"fonts/MaterialIcons-Regular.woff2"},805:(module,__webpack_exports__,__webpack_require__)=>{eval('{/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(354);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(314);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _node_modules_css_loader_dist_cjs_js_node_modules_material_design_icons_iconfont_material_icons_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(622);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(417);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_3__);\n// Imports\n\n\n\n\nvar ___CSS_LOADER_URL_IMPORT_0___ = new URL(/* asset import */ __webpack_require__(695), __webpack_require__.b);\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n___CSS_LOADER_EXPORT___.i(_node_modules_css_loader_dist_cjs_js_node_modules_material_design_icons_iconfont_material_icons_css__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .A);\nvar ___CSS_LOADER_URL_REPLACEMENT_0___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_3___default()(___CSS_LOADER_URL_IMPORT_0___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `.mdc-top-app-bar{background-color:#fff;background-color:var(--mdc-theme-primary, #FFFFFF);color:rgba(0,0,0,.87);display:flex;position:fixed;flex-direction:column;justify-content:space-between;box-sizing:border-box;width:100%;z-index:4}.mdc-top-app-bar .mdc-top-app-bar__action-item,.mdc-top-app-bar .mdc-top-app-bar__navigation-icon{color:#000;color:var(--mdc-theme-on-primary, #000)}.mdc-top-app-bar .mdc-top-app-bar__action-item::before,.mdc-top-app-bar .mdc-top-app-bar__action-item::after,.mdc-top-app-bar .mdc-top-app-bar__navigation-icon::before,.mdc-top-app-bar .mdc-top-app-bar__navigation-icon::after{background-color:#000;background-color:var(--mdc-theme-on-primary, #000)}.mdc-top-app-bar .mdc-top-app-bar__action-item:hover::before,.mdc-top-app-bar .mdc-top-app-bar__navigation-icon:hover::before{opacity:.04}.mdc-top-app-bar .mdc-top-app-bar__action-item.mdc-ripple-upgraded--background-focused::before,.mdc-top-app-bar .mdc-top-app-bar__action-item:not(.mdc-ripple-upgraded):focus::before,.mdc-top-app-bar .mdc-top-app-bar__navigation-icon.mdc-ripple-upgraded--background-focused::before,.mdc-top-app-bar .mdc-top-app-bar__navigation-icon:not(.mdc-ripple-upgraded):focus::before{transition-duration:75ms;opacity:.12}.mdc-top-app-bar .mdc-top-app-bar__action-item:not(.mdc-ripple-upgraded)::after,.mdc-top-app-bar .mdc-top-app-bar__navigation-icon:not(.mdc-ripple-upgraded)::after{transition:opacity 150ms linear}.mdc-top-app-bar .mdc-top-app-bar__action-item:not(.mdc-ripple-upgraded):active::after,.mdc-top-app-bar .mdc-top-app-bar__navigation-icon:not(.mdc-ripple-upgraded):active::after{transition-duration:75ms;opacity:.12}.mdc-top-app-bar .mdc-top-app-bar__action-item.mdc-ripple-upgraded,.mdc-top-app-bar .mdc-top-app-bar__navigation-icon.mdc-ripple-upgraded{--mdc-ripple-fg-opacity: 0.12}.mdc-top-app-bar__row{display:flex;position:relative;box-sizing:border-box;width:100%;height:64px}.mdc-top-app-bar__section{display:inline-flex;flex:1 1 auto;align-items:center;min-width:0;padding:8px 12px;z-index:1}.mdc-top-app-bar__section--align-start{justify-content:flex-start;order:-1}.mdc-top-app-bar__section--align-end{justify-content:flex-end;order:1}.mdc-top-app-bar__title{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;font-family:Roboto, sans-serif;font-family:var(--mdc-typography-headline6-font-family, var(--mdc-typography-font-family, Roboto, sans-serif));font-size:1.25rem;font-size:var(--mdc-typography-headline6-font-size, 1.25rem);line-height:2rem;line-height:var(--mdc-typography-headline6-line-height, 2rem);font-weight:500;font-weight:var(--mdc-typography-headline6-font-weight, 500);letter-spacing:.0125em;letter-spacing:var(--mdc-typography-headline6-letter-spacing, 0.0125em);text-decoration:inherit;-webkit-text-decoration:var(--mdc-typography-headline6-text-decoration, inherit);text-decoration:var(--mdc-typography-headline6-text-decoration, inherit);text-transform:inherit;text-transform:var(--mdc-typography-headline6-text-transform, inherit);padding-left:20px;padding-right:0;text-overflow:ellipsis;white-space:nowrap;overflow:hidden;z-index:1}[dir=rtl] .mdc-top-app-bar__title,.mdc-top-app-bar__title[dir=rtl]{padding-left:0;padding-right:20px}.mdc-top-app-bar--short-collapsed{border-radius:0 0 24px 0}[dir=rtl] .mdc-top-app-bar--short-collapsed,.mdc-top-app-bar--short-collapsed[dir=rtl]{border-radius:0 0 0 24px}.mdc-top-app-bar--short{top:0;right:auto;left:0;width:100%;transition:width 250ms cubic-bezier(0.4, 0, 0.2, 1)}[dir=rtl] .mdc-top-app-bar--short,.mdc-top-app-bar--short[dir=rtl]{right:0;left:auto}.mdc-top-app-bar--short .mdc-top-app-bar__row{height:56px}.mdc-top-app-bar--short .mdc-top-app-bar__section{padding:4px}.mdc-top-app-bar--short .mdc-top-app-bar__title{transition:opacity 200ms cubic-bezier(0.4, 0, 0.2, 1);opacity:1}.mdc-top-app-bar--short-collapsed{box-shadow:0px 2px 4px -1px rgba(0, 0, 0, 0.2),0px 4px 5px 0px rgba(0, 0, 0, 0.14),0px 1px 10px 0px rgba(0,0,0,.12);width:56px;transition:width 300ms cubic-bezier(0.4, 0, 0.2, 1)}.mdc-top-app-bar--short-collapsed .mdc-top-app-bar__title{display:none}.mdc-top-app-bar--short-collapsed .mdc-top-app-bar__action-item{transition:padding 150ms cubic-bezier(0.4, 0, 0.2, 1)}.mdc-top-app-bar--short-collapsed.mdc-top-app-bar--short-has-action-item{width:112px}.mdc-top-app-bar--short-collapsed.mdc-top-app-bar--short-has-action-item .mdc-top-app-bar__section--align-end{padding-left:0;padding-right:12px}[dir=rtl] .mdc-top-app-bar--short-collapsed.mdc-top-app-bar--short-has-action-item .mdc-top-app-bar__section--align-end,.mdc-top-app-bar--short-collapsed.mdc-top-app-bar--short-has-action-item .mdc-top-app-bar__section--align-end[dir=rtl]{padding-left:12px;padding-right:0}.mdc-top-app-bar--dense .mdc-top-app-bar__row{height:48px}.mdc-top-app-bar--dense .mdc-top-app-bar__section{padding:0 4px}.mdc-top-app-bar--dense .mdc-top-app-bar__title{padding-left:12px;padding-right:0}[dir=rtl] .mdc-top-app-bar--dense .mdc-top-app-bar__title,.mdc-top-app-bar--dense .mdc-top-app-bar__title[dir=rtl]{padding-left:0;padding-right:12px}.mdc-top-app-bar--prominent .mdc-top-app-bar__row{height:128px}.mdc-top-app-bar--prominent .mdc-top-app-bar__title{align-self:flex-end;padding-bottom:2px}.mdc-top-app-bar--prominent .mdc-top-app-bar__action-item,.mdc-top-app-bar--prominent .mdc-top-app-bar__navigation-icon{align-self:flex-start}.mdc-top-app-bar--fixed{transition:box-shadow 200ms linear}.mdc-top-app-bar--fixed-scrolled{box-shadow:0px 2px 4px -1px rgba(0, 0, 0, 0.2),0px 4px 5px 0px rgba(0, 0, 0, 0.14),0px 1px 10px 0px rgba(0,0,0,.12);transition:box-shadow 200ms linear}.mdc-top-app-bar--dense.mdc-top-app-bar--prominent .mdc-top-app-bar__row{height:96px}.mdc-top-app-bar--dense.mdc-top-app-bar--prominent .mdc-top-app-bar__section{padding:0 12px}.mdc-top-app-bar--dense.mdc-top-app-bar--prominent .mdc-top-app-bar__title{padding-left:20px;padding-right:0;padding-bottom:9px}[dir=rtl] .mdc-top-app-bar--dense.mdc-top-app-bar--prominent .mdc-top-app-bar__title,.mdc-top-app-bar--dense.mdc-top-app-bar--prominent .mdc-top-app-bar__title[dir=rtl]{padding-left:0;padding-right:20px}.mdc-top-app-bar--fixed-adjust{padding-top:64px}.mdc-top-app-bar--dense-fixed-adjust{padding-top:48px}.mdc-top-app-bar--short-fixed-adjust{padding-top:56px}.mdc-top-app-bar--prominent-fixed-adjust{padding-top:128px}.mdc-top-app-bar--dense-prominent-fixed-adjust{padding-top:96px}@media(max-width: 599px){.mdc-top-app-bar__row{height:56px}.mdc-top-app-bar__section{padding:4px}.mdc-top-app-bar--short{transition:width 200ms cubic-bezier(0.4, 0, 0.2, 1)}.mdc-top-app-bar--short-collapsed{transition:width 250ms cubic-bezier(0.4, 0, 0.2, 1)}.mdc-top-app-bar--short-collapsed .mdc-top-app-bar__section--align-end{padding-left:0;padding-right:12px}[dir=rtl] .mdc-top-app-bar--short-collapsed .mdc-top-app-bar__section--align-end,.mdc-top-app-bar--short-collapsed .mdc-top-app-bar__section--align-end[dir=rtl]{padding-left:12px;padding-right:0}.mdc-top-app-bar--prominent .mdc-top-app-bar__title{padding-bottom:6px}.mdc-top-app-bar--fixed-adjust{padding-top:56px}}.mdc-icon-button{display:inline-block;position:relative;box-sizing:border-box;border:none;outline:none;background-color:rgba(0,0,0,0);fill:currentColor;color:inherit;font-size:24px;text-decoration:none;cursor:pointer;-webkit-user-select:none;-moz-user-select:none;user-select:none;width:48px;height:48px;padding:12px}.mdc-icon-button svg,.mdc-icon-button img{width:24px;height:24px}.mdc-icon-button:disabled{color:rgba(0,0,0,.38);color:var(--mdc-theme-text-disabled-on-light, rgba(0, 0, 0, 0.38))}.mdc-icon-button:disabled{cursor:default;pointer-events:none}.mdc-icon-button__icon{display:inline-block}.mdc-icon-button__icon.mdc-icon-button__icon--on{display:none}.mdc-icon-button--on .mdc-icon-button__icon{display:none}.mdc-icon-button--on .mdc-icon-button__icon.mdc-icon-button__icon--on{display:inline-block}@keyframes mdc-ripple-fg-radius-in{from{animation-timing-function:cubic-bezier(0.4, 0, 0.2, 1);transform:translate(var(--mdc-ripple-fg-translate-start, 0)) scale(1)}to{transform:translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1))}}@keyframes mdc-ripple-fg-opacity-in{from{animation-timing-function:linear;opacity:0}to{opacity:var(--mdc-ripple-fg-opacity, 0)}}@keyframes mdc-ripple-fg-opacity-out{from{animation-timing-function:linear;opacity:var(--mdc-ripple-fg-opacity, 0)}to{opacity:0}}.mdc-icon-button{--mdc-ripple-fg-size: 0;--mdc-ripple-left: 0;--mdc-ripple-top: 0;--mdc-ripple-fg-scale: 1;--mdc-ripple-fg-translate-end: 0;--mdc-ripple-fg-translate-start: 0;-webkit-tap-highlight-color:rgba(0,0,0,0)}.mdc-icon-button::before,.mdc-icon-button::after{position:absolute;border-radius:50%;opacity:0;pointer-events:none;content:""}.mdc-icon-button::before{transition:opacity 15ms linear,background-color 15ms linear;z-index:1}.mdc-icon-button.mdc-ripple-upgraded::before{transform:scale(var(--mdc-ripple-fg-scale, 1))}.mdc-icon-button.mdc-ripple-upgraded::after{top:0;left:0;transform:scale(0);transform-origin:center center}.mdc-icon-button.mdc-ripple-upgraded--unbounded::after{top:var(--mdc-ripple-top, 0);left:var(--mdc-ripple-left, 0)}.mdc-icon-button.mdc-ripple-upgraded--foreground-activation::after{animation:mdc-ripple-fg-radius-in 225ms forwards,mdc-ripple-fg-opacity-in 75ms forwards}.mdc-icon-button.mdc-ripple-upgraded--foreground-deactivation::after{animation:mdc-ripple-fg-opacity-out 150ms;transform:translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1))}.mdc-icon-button::before,.mdc-icon-button::after{top:calc(50% - 50%);left:calc(50% - 50%);width:100%;height:100%}.mdc-icon-button.mdc-ripple-upgraded::before,.mdc-icon-button.mdc-ripple-upgraded::after{top:var(--mdc-ripple-top, calc(50% - 50%));left:var(--mdc-ripple-left, calc(50% - 50%));width:var(--mdc-ripple-fg-size, 100%);height:var(--mdc-ripple-fg-size, 100%)}.mdc-icon-button.mdc-ripple-upgraded::after{width:var(--mdc-ripple-fg-size, 100%);height:var(--mdc-ripple-fg-size, 100%)}.mdc-icon-button::before,.mdc-icon-button::after{background-color:#000}.mdc-icon-button:hover::before{opacity:.04}.mdc-icon-button.mdc-ripple-upgraded--background-focused::before,.mdc-icon-button:not(.mdc-ripple-upgraded):focus::before{transition-duration:75ms;opacity:.12}.mdc-icon-button:not(.mdc-ripple-upgraded)::after{transition:opacity 150ms linear}.mdc-icon-button:not(.mdc-ripple-upgraded):active::after{transition-duration:75ms;opacity:.12}.mdc-icon-button.mdc-ripple-upgraded{--mdc-ripple-fg-opacity: 0.12}.mdc-list{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;font-family:Roboto, sans-serif;font-family:var(--mdc-typography-subtitle1-font-family, var(--mdc-typography-font-family, Roboto, sans-serif));font-size:1rem;font-size:var(--mdc-typography-subtitle1-font-size, 1rem);line-height:1.75rem;line-height:var(--mdc-typography-subtitle1-line-height, 1.75rem);font-weight:400;font-weight:var(--mdc-typography-subtitle1-font-weight, 400);letter-spacing:.009375em;letter-spacing:var(--mdc-typography-subtitle1-letter-spacing, 0.009375em);text-decoration:inherit;-webkit-text-decoration:var(--mdc-typography-subtitle1-text-decoration, inherit);text-decoration:var(--mdc-typography-subtitle1-text-decoration, inherit);text-transform:inherit;text-transform:var(--mdc-typography-subtitle1-text-transform, inherit);line-height:1.5rem;margin:0;padding:8px 0;list-style-type:none;color:#fff;color:var(--mdc-theme-text-primary-on-background, white)}.mdc-list:focus{outline:none}.mdc-list-item{height:48px}.mdc-list-item__secondary-text{color:hsla(0,0%,100%,.7);color:var(--mdc-theme-text-secondary-on-background, rgba(255, 255, 255, 0.7))}.mdc-list-item__graphic{background-color:rgba(0,0,0,0)}.mdc-list-item__graphic{color:hsla(0,0%,100%,.5);color:var(--mdc-theme-text-icon-on-background, rgba(255, 255, 255, 0.5))}.mdc-list-item__meta{color:hsla(0,0%,100%,.5);color:var(--mdc-theme-text-hint-on-background, rgba(255, 255, 255, 0.5))}.mdc-list-group__subheader{color:#fff;color:var(--mdc-theme-text-primary-on-background, white)}.mdc-list-item--disabled .mdc-list-item__text{opacity:.38}.mdc-list-item--disabled .mdc-list-item__text,.mdc-list-item--disabled .mdc-list-item__primary-text,.mdc-list-item--disabled .mdc-list-item__secondary-text{color:#000;color:var(--mdc-theme-on-surface, #000)}.mdc-list--dense{padding-top:4px;padding-bottom:4px;font-size:.812rem}.mdc-list-item{display:flex;position:relative;align-items:center;justify-content:flex-start;padding:0 16px;overflow:hidden}.mdc-list-item:focus{outline:none}.mdc-list-item--selected,.mdc-list-item--activated{color:#fff;color:var(--mdc-theme-primary, #FFFFFF)}.mdc-list-item--selected .mdc-list-item__graphic,.mdc-list-item--activated .mdc-list-item__graphic{color:#fff;color:var(--mdc-theme-primary, #FFFFFF)}.mdc-list-item__graphic{margin-left:0;margin-right:32px;width:24px;height:24px;flex-shrink:0;align-items:center;justify-content:center;fill:currentColor}.mdc-list-item[dir=rtl] .mdc-list-item__graphic,[dir=rtl] .mdc-list-item .mdc-list-item__graphic{margin-left:32px;margin-right:0}.mdc-list .mdc-list-item__graphic{display:inline-flex}.mdc-list-item__meta{margin-left:auto;margin-right:0}.mdc-list-item__meta:not(.material-icons){-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;font-family:Roboto, sans-serif;font-family:var(--mdc-typography-caption-font-family, var(--mdc-typography-font-family, Roboto, sans-serif));font-size:.75rem;font-size:var(--mdc-typography-caption-font-size, 0.75rem);line-height:1.25rem;line-height:var(--mdc-typography-caption-line-height, 1.25rem);font-weight:400;font-weight:var(--mdc-typography-caption-font-weight, 400);letter-spacing:.0333333333em;letter-spacing:var(--mdc-typography-caption-letter-spacing, 0.0333333333em);text-decoration:inherit;-webkit-text-decoration:var(--mdc-typography-caption-text-decoration, inherit);text-decoration:var(--mdc-typography-caption-text-decoration, inherit);text-transform:inherit;text-transform:var(--mdc-typography-caption-text-transform, inherit)}.mdc-list-item[dir=rtl] .mdc-list-item__meta,[dir=rtl] .mdc-list-item .mdc-list-item__meta{margin-left:0;margin-right:auto}.mdc-list-item__text{text-overflow:ellipsis;white-space:nowrap;overflow:hidden}.mdc-list-item__text[for]{pointer-events:none}.mdc-list-item__primary-text{text-overflow:ellipsis;white-space:nowrap;overflow:hidden;display:block;margin-top:0;line-height:normal;margin-bottom:-20px;display:block}.mdc-list-item__primary-text::before{display:inline-block;width:0;height:32px;content:"";vertical-align:0}.mdc-list-item__primary-text::after{display:inline-block;width:0;height:20px;content:"";vertical-align:-20px}.mdc-list--dense .mdc-list-item__primary-text{display:block;margin-top:0;line-height:normal;margin-bottom:-20px}.mdc-list--dense .mdc-list-item__primary-text::before{display:inline-block;width:0;height:24px;content:"";vertical-align:0}.mdc-list--dense .mdc-list-item__primary-text::after{display:inline-block;width:0;height:20px;content:"";vertical-align:-20px}.mdc-list-item__secondary-text{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;font-family:Roboto, sans-serif;font-family:var(--mdc-typography-body2-font-family, var(--mdc-typography-font-family, Roboto, sans-serif));font-size:.875rem;font-size:var(--mdc-typography-body2-font-size, 0.875rem);line-height:1.25rem;line-height:var(--mdc-typography-body2-line-height, 1.25rem);font-weight:400;font-weight:var(--mdc-typography-body2-font-weight, 400);letter-spacing:.0178571429em;letter-spacing:var(--mdc-typography-body2-letter-spacing, 0.0178571429em);text-decoration:inherit;-webkit-text-decoration:var(--mdc-typography-body2-text-decoration, inherit);text-decoration:var(--mdc-typography-body2-text-decoration, inherit);text-transform:inherit;text-transform:var(--mdc-typography-body2-text-transform, inherit);text-overflow:ellipsis;white-space:nowrap;overflow:hidden;display:block;margin-top:0;line-height:normal;display:block}.mdc-list-item__secondary-text::before{display:inline-block;width:0;height:20px;content:"";vertical-align:0}.mdc-list--dense .mdc-list-item__secondary-text{display:block;margin-top:0;line-height:normal;font-size:inherit}.mdc-list--dense .mdc-list-item__secondary-text::before{display:inline-block;width:0;height:20px;content:"";vertical-align:0}.mdc-list--dense .mdc-list-item{height:40px}.mdc-list--dense .mdc-list-item__graphic{margin-left:0;margin-right:36px;width:20px;height:20px}.mdc-list-item[dir=rtl] .mdc-list--dense .mdc-list-item__graphic,[dir=rtl] .mdc-list-item .mdc-list--dense .mdc-list-item__graphic{margin-left:36px;margin-right:0}.mdc-list--avatar-list .mdc-list-item{height:56px}.mdc-list--avatar-list .mdc-list-item__graphic{margin-left:0;margin-right:16px;width:40px;height:40px;border-radius:50%}.mdc-list-item[dir=rtl] .mdc-list--avatar-list .mdc-list-item__graphic,[dir=rtl] .mdc-list-item .mdc-list--avatar-list .mdc-list-item__graphic{margin-left:16px;margin-right:0}.mdc-list--two-line .mdc-list-item__text{align-self:flex-start}.mdc-list--two-line .mdc-list-item{height:72px}.mdc-list--two-line.mdc-list--dense .mdc-list-item,.mdc-list--avatar-list.mdc-list--dense .mdc-list-item{height:60px}.mdc-list--avatar-list.mdc-list--dense .mdc-list-item__graphic{margin-left:0;margin-right:20px;width:36px;height:36px}.mdc-list-item[dir=rtl] .mdc-list--avatar-list.mdc-list--dense .mdc-list-item__graphic,[dir=rtl] .mdc-list-item .mdc-list--avatar-list.mdc-list--dense .mdc-list-item__graphic{margin-left:20px;margin-right:0}:not(.mdc-list--non-interactive)>:not(.mdc-list-item--disabled).mdc-list-item{cursor:pointer}a.mdc-list-item{color:inherit;text-decoration:none}.mdc-list-divider{height:0;margin:0;border:none;border-bottom-width:1px;border-bottom-style:solid}.mdc-list-divider{border-bottom-color:hsla(0,0%,100%,.2)}.mdc-list-divider--padded{margin:0 16px}.mdc-list-divider--inset{margin-left:72px;margin-right:0;width:calc(100% - 72px)}.mdc-list-group[dir=rtl] .mdc-list-divider--inset,[dir=rtl] .mdc-list-group .mdc-list-divider--inset{margin-left:0;margin-right:72px}.mdc-list-divider--inset.mdc-list-divider--padded{width:calc(100% - 72px - 16px)}.mdc-list-group .mdc-list{padding:0}.mdc-list-group__subheader{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;font-family:Roboto, sans-serif;font-family:var(--mdc-typography-subtitle1-font-family, var(--mdc-typography-font-family, Roboto, sans-serif));font-size:1rem;font-size:var(--mdc-typography-subtitle1-font-size, 1rem);line-height:1.75rem;line-height:var(--mdc-typography-subtitle1-line-height, 1.75rem);font-weight:400;font-weight:var(--mdc-typography-subtitle1-font-weight, 400);letter-spacing:.009375em;letter-spacing:var(--mdc-typography-subtitle1-letter-spacing, 0.009375em);text-decoration:inherit;-webkit-text-decoration:var(--mdc-typography-subtitle1-text-decoration, inherit);text-decoration:var(--mdc-typography-subtitle1-text-decoration, inherit);text-transform:inherit;text-transform:var(--mdc-typography-subtitle1-text-transform, inherit);margin:calc((3rem - 1.5rem)/2) 16px}:not(.mdc-list--non-interactive)>:not(.mdc-list-item--disabled).mdc-list-item{--mdc-ripple-fg-size: 0;--mdc-ripple-left: 0;--mdc-ripple-top: 0;--mdc-ripple-fg-scale: 1;--mdc-ripple-fg-translate-end: 0;--mdc-ripple-fg-translate-start: 0;-webkit-tap-highlight-color:rgba(0,0,0,0)}:not(.mdc-list--non-interactive)>:not(.mdc-list-item--disabled).mdc-list-item::before,:not(.mdc-list--non-interactive)>:not(.mdc-list-item--disabled).mdc-list-item::after{position:absolute;border-radius:50%;opacity:0;pointer-events:none;content:""}:not(.mdc-list--non-interactive)>:not(.mdc-list-item--disabled).mdc-list-item::before{transition:opacity 15ms linear,background-color 15ms linear;z-index:1}:not(.mdc-list--non-interactive)>:not(.mdc-list-item--disabled).mdc-list-item.mdc-ripple-upgraded::before{transform:scale(var(--mdc-ripple-fg-scale, 1))}:not(.mdc-list--non-interactive)>:not(.mdc-list-item--disabled).mdc-list-item.mdc-ripple-upgraded::after{top:0;left:0;transform:scale(0);transform-origin:center center}:not(.mdc-list--non-interactive)>:not(.mdc-list-item--disabled).mdc-list-item.mdc-ripple-upgraded--unbounded::after{top:var(--mdc-ripple-top, 0);left:var(--mdc-ripple-left, 0)}:not(.mdc-list--non-interactive)>:not(.mdc-list-item--disabled).mdc-list-item.mdc-ripple-upgraded--foreground-activation::after{animation:mdc-ripple-fg-radius-in 225ms forwards,mdc-ripple-fg-opacity-in 75ms forwards}:not(.mdc-list--non-interactive)>:not(.mdc-list-item--disabled).mdc-list-item.mdc-ripple-upgraded--foreground-deactivation::after{animation:mdc-ripple-fg-opacity-out 150ms;transform:translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1))}:not(.mdc-list--non-interactive)>:not(.mdc-list-item--disabled).mdc-list-item::before,:not(.mdc-list--non-interactive)>:not(.mdc-list-item--disabled).mdc-list-item::after{top:calc(50% - 100%);left:calc(50% - 100%);width:200%;height:200%}:not(.mdc-list--non-interactive)>:not(.mdc-list-item--disabled).mdc-list-item.mdc-ripple-upgraded::after{width:var(--mdc-ripple-fg-size, 100%);height:var(--mdc-ripple-fg-size, 100%)}:not(.mdc-list--non-interactive)>:not(.mdc-list-item--disabled).mdc-list-item::before,:not(.mdc-list--non-interactive)>:not(.mdc-list-item--disabled).mdc-list-item::after{background-color:#000}:not(.mdc-list--non-interactive)>:not(.mdc-list-item--disabled).mdc-list-item:hover::before{opacity:.04}:not(.mdc-list--non-interactive)>:not(.mdc-list-item--disabled).mdc-list-item.mdc-ripple-upgraded--background-focused::before,:not(.mdc-list--non-interactive)>:not(.mdc-list-item--disabled).mdc-list-item:not(.mdc-ripple-upgraded):focus::before{transition-duration:75ms;opacity:.12}:not(.mdc-list--non-interactive)>:not(.mdc-list-item--disabled).mdc-list-item:not(.mdc-ripple-upgraded)::after{transition:opacity 150ms linear}:not(.mdc-list--non-interactive)>:not(.mdc-list-item--disabled).mdc-list-item:not(.mdc-ripple-upgraded):active::after{transition-duration:75ms;opacity:.12}:not(.mdc-list--non-interactive)>:not(.mdc-list-item--disabled).mdc-list-item.mdc-ripple-upgraded{--mdc-ripple-fg-opacity: 0.12}:not(.mdc-list--non-interactive)>:not(.mdc-list-item--disabled).mdc-list-item--activated::before{opacity:.24}:not(.mdc-list--non-interactive)>:not(.mdc-list-item--disabled).mdc-list-item--activated::before,:not(.mdc-list--non-interactive)>:not(.mdc-list-item--disabled).mdc-list-item--activated::after{background-color:#fff;background-color:var(--mdc-theme-primary, #FFFFFF)}:not(.mdc-list--non-interactive)>:not(.mdc-list-item--disabled).mdc-list-item--activated:hover::before{opacity:.32}:not(.mdc-list--non-interactive)>:not(.mdc-list-item--disabled).mdc-list-item--activated.mdc-ripple-upgraded--background-focused::before,:not(.mdc-list--non-interactive)>:not(.mdc-list-item--disabled).mdc-list-item--activated:not(.mdc-ripple-upgraded):focus::before{transition-duration:75ms;opacity:.48}:not(.mdc-list--non-interactive)>:not(.mdc-list-item--disabled).mdc-list-item--activated:not(.mdc-ripple-upgraded)::after{transition:opacity 150ms linear}:not(.mdc-list--non-interactive)>:not(.mdc-list-item--disabled).mdc-list-item--activated:not(.mdc-ripple-upgraded):active::after{transition-duration:75ms;opacity:.48}:not(.mdc-list--non-interactive)>:not(.mdc-list-item--disabled).mdc-list-item--activated.mdc-ripple-upgraded{--mdc-ripple-fg-opacity: 0.48}:not(.mdc-list--non-interactive)>:not(.mdc-list-item--disabled).mdc-list-item--selected::before{opacity:.16}:not(.mdc-list--non-interactive)>:not(.mdc-list-item--disabled).mdc-list-item--selected::before,:not(.mdc-list--non-interactive)>:not(.mdc-list-item--disabled).mdc-list-item--selected::after{background-color:#fff;background-color:var(--mdc-theme-primary, #FFFFFF)}:not(.mdc-list--non-interactive)>:not(.mdc-list-item--disabled).mdc-list-item--selected:hover::before{opacity:.24}:not(.mdc-list--non-interactive)>:not(.mdc-list-item--disabled).mdc-list-item--selected.mdc-ripple-upgraded--background-focused::before,:not(.mdc-list--non-interactive)>:not(.mdc-list-item--disabled).mdc-list-item--selected:not(.mdc-ripple-upgraded):focus::before{transition-duration:75ms;opacity:.4}:not(.mdc-list--non-interactive)>:not(.mdc-list-item--disabled).mdc-list-item--selected:not(.mdc-ripple-upgraded)::after{transition:opacity 150ms linear}:not(.mdc-list--non-interactive)>:not(.mdc-list-item--disabled).mdc-list-item--selected:not(.mdc-ripple-upgraded):active::after{transition-duration:75ms;opacity:.4}:not(.mdc-list--non-interactive)>:not(.mdc-list-item--disabled).mdc-list-item--selected.mdc-ripple-upgraded{--mdc-ripple-fg-opacity: 0.4}:not(.mdc-list--non-interactive)>.mdc-list-item--disabled{--mdc-ripple-fg-size: 0;--mdc-ripple-left: 0;--mdc-ripple-top: 0;--mdc-ripple-fg-scale: 1;--mdc-ripple-fg-translate-end: 0;--mdc-ripple-fg-translate-start: 0;-webkit-tap-highlight-color:rgba(0,0,0,0)}:not(.mdc-list--non-interactive)>.mdc-list-item--disabled::before,:not(.mdc-list--non-interactive)>.mdc-list-item--disabled::after{position:absolute;border-radius:50%;opacity:0;pointer-events:none;content:""}:not(.mdc-list--non-interactive)>.mdc-list-item--disabled::before{transition:opacity 15ms linear,background-color 15ms linear;z-index:1}:not(.mdc-list--non-interactive)>.mdc-list-item--disabled.mdc-ripple-upgraded::before{transform:scale(var(--mdc-ripple-fg-scale, 1))}:not(.mdc-list--non-interactive)>.mdc-list-item--disabled.mdc-ripple-upgraded::after{top:0;left:0;transform:scale(0);transform-origin:center center}:not(.mdc-list--non-interactive)>.mdc-list-item--disabled.mdc-ripple-upgraded--unbounded::after{top:var(--mdc-ripple-top, 0);left:var(--mdc-ripple-left, 0)}:not(.mdc-list--non-interactive)>.mdc-list-item--disabled.mdc-ripple-upgraded--foreground-activation::after{animation:mdc-ripple-fg-radius-in 225ms forwards,mdc-ripple-fg-opacity-in 75ms forwards}:not(.mdc-list--non-interactive)>.mdc-list-item--disabled.mdc-ripple-upgraded--foreground-deactivation::after{animation:mdc-ripple-fg-opacity-out 150ms;transform:translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1))}:not(.mdc-list--non-interactive)>.mdc-list-item--disabled::before,:not(.mdc-list--non-interactive)>.mdc-list-item--disabled::after{top:calc(50% - 100%);left:calc(50% - 100%);width:200%;height:200%}:not(.mdc-list--non-interactive)>.mdc-list-item--disabled.mdc-ripple-upgraded::after{width:var(--mdc-ripple-fg-size, 100%);height:var(--mdc-ripple-fg-size, 100%)}:not(.mdc-list--non-interactive)>.mdc-list-item--disabled::before,:not(.mdc-list--non-interactive)>.mdc-list-item--disabled::after{background-color:#000}:not(.mdc-list--non-interactive)>.mdc-list-item--disabled.mdc-ripple-upgraded--background-focused::before,:not(.mdc-list--non-interactive)>.mdc-list-item--disabled:not(.mdc-ripple-upgraded):focus::before{transition-duration:75ms;opacity:.24}.mdc-menu-surface{display:none;position:absolute;box-sizing:border-box;max-width:calc(100vw - 32px);max-height:calc(100vh - 32px);margin:0;padding:0;transform:scale(1);transform-origin:top left;opacity:0;overflow:auto;will-change:transform,opacity;z-index:8;transition:opacity .03s linear,transform .12s cubic-bezier(0, 0, 0.2, 1);box-shadow:0px 5px 5px -3px rgba(0, 0, 0, 0.2),0px 8px 10px 1px rgba(0, 0, 0, 0.14),0px 3px 14px 2px rgba(0,0,0,.12);background-color:#fff;background-color:var(--mdc-theme-surface, #fff);color:#000;color:var(--mdc-theme-on-surface, #000);border-radius:4px;transform-origin-left:top left;transform-origin-right:top right}.mdc-menu-surface:focus{outline:none}.mdc-menu-surface--open{display:inline-block;transform:scale(1);opacity:1}.mdc-menu-surface--animating-open{display:inline-block;transform:scale(0.8);opacity:0}.mdc-menu-surface--animating-closed{display:inline-block;opacity:0;transition:opacity .075s linear}[dir=rtl] .mdc-menu-surface,.mdc-menu-surface[dir=rtl]{transform-origin-left:top right;transform-origin-right:top left}.mdc-menu-surface--anchor{position:relative;overflow:visible}.mdc-menu-surface--fixed{position:fixed}.mdc-elevation-overlay{position:absolute;border-radius:inherit;opacity:0;pointer-events:none;transition:opacity 280ms cubic-bezier(0.4, 0, 0.2, 1);background-color:#fff}.mdc-menu{min-width:112px}.mdc-menu .mdc-list-item__meta{color:rgba(0,0,0,.87)}.mdc-menu .mdc-list-item__graphic{color:rgba(0,0,0,.87)}.mdc-menu .mdc-list{color:rgba(0,0,0,.87);position:relative}.mdc-menu .mdc-list .mdc-elevation-overlay{width:100%;height:100%;top:0;left:0}.mdc-menu .mdc-list-divider{margin:8px 0}.mdc-menu .mdc-list-item{-webkit-user-select:none;-moz-user-select:none;user-select:none}.mdc-menu .mdc-list-item--disabled{cursor:auto}.mdc-menu a.mdc-list-item .mdc-list-item__text,.mdc-menu a.mdc-list-item .mdc-list-item__graphic{pointer-events:none}.mdc-menu__selection-group{padding:0;fill:currentColor}.mdc-menu__selection-group .mdc-list-item{padding-left:56px;padding-right:16px}[dir=rtl] .mdc-menu__selection-group .mdc-list-item,.mdc-menu__selection-group .mdc-list-item[dir=rtl]{padding-left:16px;padding-right:56px}.mdc-menu__selection-group .mdc-menu__selection-group-icon{left:16px;right:initial;display:none;position:absolute;top:50%;transform:translateY(-50%)}[dir=rtl] .mdc-menu__selection-group .mdc-menu__selection-group-icon,.mdc-menu__selection-group .mdc-menu__selection-group-icon[dir=rtl]{left:initial;right:16px}.mdc-menu-item--selected .mdc-menu__selection-group-icon{display:inline}.mdc-drawer{border-color:rgba(0,0,0,.12);background-color:#fff;border-radius:0 0 0 0;z-index:6;width:256px;display:flex;flex-direction:column;flex-shrink:0;box-sizing:border-box;height:100%;border-right-width:1px;border-right-style:solid;overflow:hidden;transition-property:transform;transition-timing-function:cubic-bezier(0.4, 0, 0.2, 1)}.mdc-drawer .mdc-drawer__title{color:rgba(0,0,0,.87)}.mdc-drawer .mdc-list-group__subheader{color:rgba(0,0,0,.6)}.mdc-drawer .mdc-drawer__subtitle{color:rgba(0,0,0,.6)}.mdc-drawer .mdc-list-item__graphic{color:rgba(0,0,0,.6)}.mdc-drawer .mdc-list-item{color:rgba(0,0,0,.87)}.mdc-drawer .mdc-list-item--activated .mdc-list-item__graphic{color:#fff}.mdc-drawer .mdc-list-item--activated{color:hsla(0,0%,100%,.87)}[dir=rtl] .mdc-drawer,.mdc-drawer[dir=rtl]{border-radius:0 0 0 0}.mdc-drawer .mdc-list-item{border-radius:4px}.mdc-drawer.mdc-drawer--open:not(.mdc-drawer--closing)+.mdc-drawer-app-content{margin-left:256px;margin-right:0}[dir=rtl] .mdc-drawer.mdc-drawer--open:not(.mdc-drawer--closing)+.mdc-drawer-app-content,.mdc-drawer.mdc-drawer--open:not(.mdc-drawer--closing)+.mdc-drawer-app-content[dir=rtl]{margin-left:0;margin-right:256px}[dir=rtl] .mdc-drawer,.mdc-drawer[dir=rtl]{border-right-width:0;border-left-width:1px;border-right-style:none;border-left-style:solid}.mdc-drawer .mdc-list-item{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;font-family:Roboto, sans-serif;font-family:var(--mdc-typography-subtitle2-font-family, var(--mdc-typography-font-family, Roboto, sans-serif));font-size:.875rem;font-size:var(--mdc-typography-subtitle2-font-size, 0.875rem);line-height:1.375rem;line-height:var(--mdc-typography-subtitle2-line-height, 1.375rem);font-weight:500;font-weight:var(--mdc-typography-subtitle2-font-weight, 500);letter-spacing:.0071428571em;letter-spacing:var(--mdc-typography-subtitle2-letter-spacing, 0.0071428571em);text-decoration:inherit;-webkit-text-decoration:var(--mdc-typography-subtitle2-text-decoration, inherit);text-decoration:var(--mdc-typography-subtitle2-text-decoration, inherit);text-transform:inherit;text-transform:var(--mdc-typography-subtitle2-text-transform, inherit);height:calc(48px - 2*4px);margin:8px 8px;padding:0 8px}.mdc-drawer .mdc-list-item:nth-child(1){margin-top:2px}.mdc-drawer .mdc-list-item:nth-last-child(1){margin-bottom:0}.mdc-drawer .mdc-list-group__subheader{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;font-family:Roboto, sans-serif;font-family:var(--mdc-typography-body2-font-family, var(--mdc-typography-font-family, Roboto, sans-serif));font-size:.875rem;font-size:var(--mdc-typography-body2-font-size, 0.875rem);line-height:1.25rem;line-height:var(--mdc-typography-body2-line-height, 1.25rem);font-weight:400;font-weight:var(--mdc-typography-body2-font-weight, 400);letter-spacing:.0178571429em;letter-spacing:var(--mdc-typography-body2-letter-spacing, 0.0178571429em);text-decoration:inherit;-webkit-text-decoration:var(--mdc-typography-body2-text-decoration, inherit);text-decoration:var(--mdc-typography-body2-text-decoration, inherit);text-transform:inherit;text-transform:var(--mdc-typography-body2-text-transform, inherit);display:block;margin-top:0;line-height:normal;margin:0;padding:0 16px}.mdc-drawer .mdc-list-group__subheader::before{display:inline-block;width:0;height:24px;content:"";vertical-align:0}.mdc-drawer .mdc-list-divider{margin:3px 0 4px}.mdc-drawer .mdc-list-item__text,.mdc-drawer .mdc-list-item__graphic{pointer-events:none}.mdc-drawer--animate{transform:translateX(-100%)}[dir=rtl] .mdc-drawer--animate,.mdc-drawer--animate[dir=rtl]{transform:translateX(100%)}.mdc-drawer--opening{transform:translateX(0);transition-duration:250ms}[dir=rtl] .mdc-drawer--opening,.mdc-drawer--opening[dir=rtl]{transform:translateX(0)}.mdc-drawer--closing{transform:translateX(-100%);transition-duration:200ms}[dir=rtl] .mdc-drawer--closing,.mdc-drawer--closing[dir=rtl]{transform:translateX(100%)}.mdc-drawer__header{flex-shrink:0;box-sizing:border-box;min-height:64px;padding:0 16px 4px}.mdc-drawer__title{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;font-family:Roboto, sans-serif;font-family:var(--mdc-typography-headline6-font-family, var(--mdc-typography-font-family, Roboto, sans-serif));font-size:1.25rem;font-size:var(--mdc-typography-headline6-font-size, 1.25rem);line-height:2rem;line-height:var(--mdc-typography-headline6-line-height, 2rem);font-weight:500;font-weight:var(--mdc-typography-headline6-font-weight, 500);letter-spacing:.0125em;letter-spacing:var(--mdc-typography-headline6-letter-spacing, 0.0125em);text-decoration:inherit;-webkit-text-decoration:var(--mdc-typography-headline6-text-decoration, inherit);text-decoration:var(--mdc-typography-headline6-text-decoration, inherit);text-transform:inherit;text-transform:var(--mdc-typography-headline6-text-transform, inherit);display:block;margin-top:0;line-height:normal;margin-bottom:-20px}.mdc-drawer__title::before{display:inline-block;width:0;height:36px;content:"";vertical-align:0}.mdc-drawer__title::after{display:inline-block;width:0;height:20px;content:"";vertical-align:-20px}.mdc-drawer__subtitle{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;font-family:Roboto, sans-serif;font-family:var(--mdc-typography-body2-font-family, var(--mdc-typography-font-family, Roboto, sans-serif));font-size:.875rem;font-size:var(--mdc-typography-body2-font-size, 0.875rem);line-height:1.25rem;line-height:var(--mdc-typography-body2-line-height, 1.25rem);font-weight:400;font-weight:var(--mdc-typography-body2-font-weight, 400);letter-spacing:.0178571429em;letter-spacing:var(--mdc-typography-body2-letter-spacing, 0.0178571429em);text-decoration:inherit;-webkit-text-decoration:var(--mdc-typography-body2-text-decoration, inherit);text-decoration:var(--mdc-typography-body2-text-decoration, inherit);text-transform:inherit;text-transform:var(--mdc-typography-body2-text-transform, inherit);display:block;margin-top:0;line-height:normal;margin-bottom:0}.mdc-drawer__subtitle::before{display:inline-block;width:0;height:20px;content:"";vertical-align:0}.mdc-drawer__content{height:100%;overflow-y:auto;-webkit-overflow-scrolling:touch}.mdc-drawer--dismissible{left:0;right:initial;display:none;position:absolute}[dir=rtl] .mdc-drawer--dismissible,.mdc-drawer--dismissible[dir=rtl]{left:initial;right:0}.mdc-drawer--dismissible.mdc-drawer--open{display:flex}.mdc-drawer-app-content{margin-left:0;margin-right:0;position:relative}[dir=rtl] .mdc-drawer-app-content,.mdc-drawer-app-content[dir=rtl]{margin-left:0;margin-right:0}.mdc-drawer--modal{box-shadow:0px 8px 10px -5px rgba(0, 0, 0, 0.2),0px 16px 24px 2px rgba(0, 0, 0, 0.14),0px 6px 30px 5px rgba(0,0,0,.12);left:0;right:initial;display:none;position:fixed}.mdc-drawer--modal+.mdc-drawer-scrim{background-color:rgba(0,0,0,.32)}[dir=rtl] .mdc-drawer--modal,.mdc-drawer--modal[dir=rtl]{left:initial;right:0}.mdc-drawer--modal.mdc-drawer--open{display:flex}.mdc-drawer-scrim{display:none;position:fixed;top:0;left:0;width:100%;height:100%;z-index:5;transition-property:opacity;transition-timing-function:cubic-bezier(0.4, 0, 0.2, 1)}.mdc-drawer--open+.mdc-drawer-scrim{display:block}.mdc-drawer--animate+.mdc-drawer-scrim{opacity:0}.mdc-drawer--opening+.mdc-drawer-scrim{transition-duration:250ms;opacity:1}.mdc-drawer--closing+.mdc-drawer-scrim{transition-duration:200ms;opacity:0}:root{--mdc-layout-grid-margin-desktop: 24px;--mdc-layout-grid-gutter-desktop: 24px;--mdc-layout-grid-column-width-desktop: 72px;--mdc-layout-grid-margin-tablet: 16px;--mdc-layout-grid-gutter-tablet: 16px;--mdc-layout-grid-column-width-tablet: 72px;--mdc-layout-grid-margin-phone: 16px;--mdc-layout-grid-gutter-phone: 16px;--mdc-layout-grid-column-width-phone: 72px}@media(min-width: 840px){.mdc-layout-grid{box-sizing:border-box;margin:0 auto;padding:24px;padding:var(--mdc-layout-grid-margin-desktop, 24px)}}@media(min-width: 600px)and (max-width: 839px){.mdc-layout-grid{box-sizing:border-box;margin:0 auto;padding:16px;padding:var(--mdc-layout-grid-margin-tablet, 16px)}}@media(max-width: 599px){.mdc-layout-grid{box-sizing:border-box;margin:0 auto;padding:16px;padding:var(--mdc-layout-grid-margin-phone, 16px)}}@media(min-width: 840px){.mdc-layout-grid__inner{display:flex;flex-flow:row wrap;align-items:stretch;margin:-12px;margin:calc(var(--mdc-layout-grid-gutter-desktop, 24px)/2*-1)}@supports(display: grid){.mdc-layout-grid__inner{display:grid;margin:0;grid-gap:24px;grid-gap:var(--mdc-layout-grid-gutter-desktop, 24px);grid-template-columns:repeat(12, minmax(0, 1fr))}}}@media(min-width: 600px)and (max-width: 839px){.mdc-layout-grid__inner{display:flex;flex-flow:row wrap;align-items:stretch;margin:-8px;margin:calc(var(--mdc-layout-grid-gutter-tablet, 16px)/2*-1)}@supports(display: grid){.mdc-layout-grid__inner{display:grid;margin:0;grid-gap:16px;grid-gap:var(--mdc-layout-grid-gutter-tablet, 16px);grid-template-columns:repeat(8, minmax(0, 1fr))}}}@media(max-width: 599px){.mdc-layout-grid__inner{display:flex;flex-flow:row wrap;align-items:stretch;margin:-8px;margin:calc(var(--mdc-layout-grid-gutter-phone, 16px)/2*-1)}@supports(display: grid){.mdc-layout-grid__inner{display:grid;margin:0;grid-gap:16px;grid-gap:var(--mdc-layout-grid-gutter-phone, 16px);grid-template-columns:repeat(4, minmax(0, 1fr))}}}@media(min-width: 840px){.mdc-layout-grid__cell{width:calc(33.3333333333% - 24px);width:calc(33.3333333333% - var(--mdc-layout-grid-gutter-desktop, 24px));box-sizing:border-box;margin:12px;margin:calc(var(--mdc-layout-grid-gutter-desktop, 24px)/2)}@supports(display: grid){.mdc-layout-grid__cell{width:auto;grid-column-end:span 4}}@supports(display: grid){.mdc-layout-grid__cell{margin:0}}.mdc-layout-grid__cell--span-1,.mdc-layout-grid__cell--span-1-desktop{width:calc(8.3333333333% - 24px);width:calc(8.3333333333% - var(--mdc-layout-grid-gutter-desktop, 24px))}@supports(display: grid){.mdc-layout-grid__cell--span-1,.mdc-layout-grid__cell--span-1-desktop{width:auto;grid-column-end:span 1}}.mdc-layout-grid__cell--span-2,.mdc-layout-grid__cell--span-2-desktop{width:calc(16.6666666667% - 24px);width:calc(16.6666666667% - var(--mdc-layout-grid-gutter-desktop, 24px))}@supports(display: grid){.mdc-layout-grid__cell--span-2,.mdc-layout-grid__cell--span-2-desktop{width:auto;grid-column-end:span 2}}.mdc-layout-grid__cell--span-3,.mdc-layout-grid__cell--span-3-desktop{width:calc(25% - 24px);width:calc(25% - var(--mdc-layout-grid-gutter-desktop, 24px))}@supports(display: grid){.mdc-layout-grid__cell--span-3,.mdc-layout-grid__cell--span-3-desktop{width:auto;grid-column-end:span 3}}.mdc-layout-grid__cell--span-4,.mdc-layout-grid__cell--span-4-desktop{width:calc(33.3333333333% - 24px);width:calc(33.3333333333% - var(--mdc-layout-grid-gutter-desktop, 24px))}@supports(display: grid){.mdc-layout-grid__cell--span-4,.mdc-layout-grid__cell--span-4-desktop{width:auto;grid-column-end:span 4}}.mdc-layout-grid__cell--span-5,.mdc-layout-grid__cell--span-5-desktop{width:calc(41.6666666667% - 24px);width:calc(41.6666666667% - var(--mdc-layout-grid-gutter-desktop, 24px))}@supports(display: grid){.mdc-layout-grid__cell--span-5,.mdc-layout-grid__cell--span-5-desktop{width:auto;grid-column-end:span 5}}.mdc-layout-grid__cell--span-6,.mdc-layout-grid__cell--span-6-desktop{width:calc(50% - 24px);width:calc(50% - var(--mdc-layout-grid-gutter-desktop, 24px))}@supports(display: grid){.mdc-layout-grid__cell--span-6,.mdc-layout-grid__cell--span-6-desktop{width:auto;grid-column-end:span 6}}.mdc-layout-grid__cell--span-7,.mdc-layout-grid__cell--span-7-desktop{width:calc(58.3333333333% - 24px);width:calc(58.3333333333% - var(--mdc-layout-grid-gutter-desktop, 24px))}@supports(display: grid){.mdc-layout-grid__cell--span-7,.mdc-layout-grid__cell--span-7-desktop{width:auto;grid-column-end:span 7}}.mdc-layout-grid__cell--span-8,.mdc-layout-grid__cell--span-8-desktop{width:calc(66.6666666667% - 24px);width:calc(66.6666666667% - var(--mdc-layout-grid-gutter-desktop, 24px))}@supports(display: grid){.mdc-layout-grid__cell--span-8,.mdc-layout-grid__cell--span-8-desktop{width:auto;grid-column-end:span 8}}.mdc-layout-grid__cell--span-9,.mdc-layout-grid__cell--span-9-desktop{width:calc(75% - 24px);width:calc(75% - var(--mdc-layout-grid-gutter-desktop, 24px))}@supports(display: grid){.mdc-layout-grid__cell--span-9,.mdc-layout-grid__cell--span-9-desktop{width:auto;grid-column-end:span 9}}.mdc-layout-grid__cell--span-10,.mdc-layout-grid__cell--span-10-desktop{width:calc(83.3333333333% - 24px);width:calc(83.3333333333% - var(--mdc-layout-grid-gutter-desktop, 24px))}@supports(display: grid){.mdc-layout-grid__cell--span-10,.mdc-layout-grid__cell--span-10-desktop{width:auto;grid-column-end:span 10}}.mdc-layout-grid__cell--span-11,.mdc-layout-grid__cell--span-11-desktop{width:calc(91.6666666667% - 24px);width:calc(91.6666666667% - var(--mdc-layout-grid-gutter-desktop, 24px))}@supports(display: grid){.mdc-layout-grid__cell--span-11,.mdc-layout-grid__cell--span-11-desktop{width:auto;grid-column-end:span 11}}.mdc-layout-grid__cell--span-12,.mdc-layout-grid__cell--span-12-desktop{width:calc(100% - 24px);width:calc(100% - var(--mdc-layout-grid-gutter-desktop, 24px))}@supports(display: grid){.mdc-layout-grid__cell--span-12,.mdc-layout-grid__cell--span-12-desktop{width:auto;grid-column-end:span 12}}}@media(min-width: 600px)and (max-width: 839px){.mdc-layout-grid__cell{width:calc(50% - 16px);width:calc(50% - var(--mdc-layout-grid-gutter-tablet, 16px));box-sizing:border-box;margin:8px;margin:calc(var(--mdc-layout-grid-gutter-tablet, 16px)/2)}@supports(display: grid){.mdc-layout-grid__cell{width:auto;grid-column-end:span 4}}@supports(display: grid){.mdc-layout-grid__cell{margin:0}}.mdc-layout-grid__cell--span-1,.mdc-layout-grid__cell--span-1-tablet{width:calc(12.5% - 16px);width:calc(12.5% - var(--mdc-layout-grid-gutter-tablet, 16px))}@supports(display: grid){.mdc-layout-grid__cell--span-1,.mdc-layout-grid__cell--span-1-tablet{width:auto;grid-column-end:span 1}}.mdc-layout-grid__cell--span-2,.mdc-layout-grid__cell--span-2-tablet{width:calc(25% - 16px);width:calc(25% - var(--mdc-layout-grid-gutter-tablet, 16px))}@supports(display: grid){.mdc-layout-grid__cell--span-2,.mdc-layout-grid__cell--span-2-tablet{width:auto;grid-column-end:span 2}}.mdc-layout-grid__cell--span-3,.mdc-layout-grid__cell--span-3-tablet{width:calc(37.5% - 16px);width:calc(37.5% - var(--mdc-layout-grid-gutter-tablet, 16px))}@supports(display: grid){.mdc-layout-grid__cell--span-3,.mdc-layout-grid__cell--span-3-tablet{width:auto;grid-column-end:span 3}}.mdc-layout-grid__cell--span-4,.mdc-layout-grid__cell--span-4-tablet{width:calc(50% - 16px);width:calc(50% - var(--mdc-layout-grid-gutter-tablet, 16px))}@supports(display: grid){.mdc-layout-grid__cell--span-4,.mdc-layout-grid__cell--span-4-tablet{width:auto;grid-column-end:span 4}}.mdc-layout-grid__cell--span-5,.mdc-layout-grid__cell--span-5-tablet{width:calc(62.5% - 16px);width:calc(62.5% - var(--mdc-layout-grid-gutter-tablet, 16px))}@supports(display: grid){.mdc-layout-grid__cell--span-5,.mdc-layout-grid__cell--span-5-tablet{width:auto;grid-column-end:span 5}}.mdc-layout-grid__cell--span-6,.mdc-layout-grid__cell--span-6-tablet{width:calc(75% - 16px);width:calc(75% - var(--mdc-layout-grid-gutter-tablet, 16px))}@supports(display: grid){.mdc-layout-grid__cell--span-6,.mdc-layout-grid__cell--span-6-tablet{width:auto;grid-column-end:span 6}}.mdc-layout-grid__cell--span-7,.mdc-layout-grid__cell--span-7-tablet{width:calc(87.5% - 16px);width:calc(87.5% - var(--mdc-layout-grid-gutter-tablet, 16px))}@supports(display: grid){.mdc-layout-grid__cell--span-7,.mdc-layout-grid__cell--span-7-tablet{width:auto;grid-column-end:span 7}}.mdc-layout-grid__cell--span-8,.mdc-layout-grid__cell--span-8-tablet{width:calc(100% - 16px);width:calc(100% - var(--mdc-layout-grid-gutter-tablet, 16px))}@supports(display: grid){.mdc-layout-grid__cell--span-8,.mdc-layout-grid__cell--span-8-tablet{width:auto;grid-column-end:span 8}}.mdc-layout-grid__cell--span-9,.mdc-layout-grid__cell--span-9-tablet{width:calc(100% - 16px);width:calc(100% - var(--mdc-layout-grid-gutter-tablet, 16px))}@supports(display: grid){.mdc-layout-grid__cell--span-9,.mdc-layout-grid__cell--span-9-tablet{width:auto;grid-column-end:span 8}}.mdc-layout-grid__cell--span-10,.mdc-layout-grid__cell--span-10-tablet{width:calc(100% - 16px);width:calc(100% - var(--mdc-layout-grid-gutter-tablet, 16px))}@supports(display: grid){.mdc-layout-grid__cell--span-10,.mdc-layout-grid__cell--span-10-tablet{width:auto;grid-column-end:span 8}}.mdc-layout-grid__cell--span-11,.mdc-layout-grid__cell--span-11-tablet{width:calc(100% - 16px);width:calc(100% - var(--mdc-layout-grid-gutter-tablet, 16px))}@supports(display: grid){.mdc-layout-grid__cell--span-11,.mdc-layout-grid__cell--span-11-tablet{width:auto;grid-column-end:span 8}}.mdc-layout-grid__cell--span-12,.mdc-layout-grid__cell--span-12-tablet{width:calc(100% - 16px);width:calc(100% - var(--mdc-layout-grid-gutter-tablet, 16px))}@supports(display: grid){.mdc-layout-grid__cell--span-12,.mdc-layout-grid__cell--span-12-tablet{width:auto;grid-column-end:span 8}}}@media(max-width: 599px){.mdc-layout-grid__cell{width:calc(100% - 16px);width:calc(100% - var(--mdc-layout-grid-gutter-phone, 16px));box-sizing:border-box;margin:8px;margin:calc(var(--mdc-layout-grid-gutter-phone, 16px)/2)}@supports(display: grid){.mdc-layout-grid__cell{width:auto;grid-column-end:span 4}}@supports(display: grid){.mdc-layout-grid__cell{margin:0}}.mdc-layout-grid__cell--span-1,.mdc-layout-grid__cell--span-1-phone{width:calc(25% - 16px);width:calc(25% - var(--mdc-layout-grid-gutter-phone, 16px))}@supports(display: grid){.mdc-layout-grid__cell--span-1,.mdc-layout-grid__cell--span-1-phone{width:auto;grid-column-end:span 1}}.mdc-layout-grid__cell--span-2,.mdc-layout-grid__cell--span-2-phone{width:calc(50% - 16px);width:calc(50% - var(--mdc-layout-grid-gutter-phone, 16px))}@supports(display: grid){.mdc-layout-grid__cell--span-2,.mdc-layout-grid__cell--span-2-phone{width:auto;grid-column-end:span 2}}.mdc-layout-grid__cell--span-3,.mdc-layout-grid__cell--span-3-phone{width:calc(75% - 16px);width:calc(75% - var(--mdc-layout-grid-gutter-phone, 16px))}@supports(display: grid){.mdc-layout-grid__cell--span-3,.mdc-layout-grid__cell--span-3-phone{width:auto;grid-column-end:span 3}}.mdc-layout-grid__cell--span-4,.mdc-layout-grid__cell--span-4-phone{width:calc(100% - 16px);width:calc(100% - var(--mdc-layout-grid-gutter-phone, 16px))}@supports(display: grid){.mdc-layout-grid__cell--span-4,.mdc-layout-grid__cell--span-4-phone{width:auto;grid-column-end:span 4}}.mdc-layout-grid__cell--span-5,.mdc-layout-grid__cell--span-5-phone{width:calc(100% - 16px);width:calc(100% - var(--mdc-layout-grid-gutter-phone, 16px))}@supports(display: grid){.mdc-layout-grid__cell--span-5,.mdc-layout-grid__cell--span-5-phone{width:auto;grid-column-end:span 4}}.mdc-layout-grid__cell--span-6,.mdc-layout-grid__cell--span-6-phone{width:calc(100% - 16px);width:calc(100% - var(--mdc-layout-grid-gutter-phone, 16px))}@supports(display: grid){.mdc-layout-grid__cell--span-6,.mdc-layout-grid__cell--span-6-phone{width:auto;grid-column-end:span 4}}.mdc-layout-grid__cell--span-7,.mdc-layout-grid__cell--span-7-phone{width:calc(100% - 16px);width:calc(100% - var(--mdc-layout-grid-gutter-phone, 16px))}@supports(display: grid){.mdc-layout-grid__cell--span-7,.mdc-layout-grid__cell--span-7-phone{width:auto;grid-column-end:span 4}}.mdc-layout-grid__cell--span-8,.mdc-layout-grid__cell--span-8-phone{width:calc(100% - 16px);width:calc(100% - var(--mdc-layout-grid-gutter-phone, 16px))}@supports(display: grid){.mdc-layout-grid__cell--span-8,.mdc-layout-grid__cell--span-8-phone{width:auto;grid-column-end:span 4}}.mdc-layout-grid__cell--span-9,.mdc-layout-grid__cell--span-9-phone{width:calc(100% - 16px);width:calc(100% - var(--mdc-layout-grid-gutter-phone, 16px))}@supports(display: grid){.mdc-layout-grid__cell--span-9,.mdc-layout-grid__cell--span-9-phone{width:auto;grid-column-end:span 4}}.mdc-layout-grid__cell--span-10,.mdc-layout-grid__cell--span-10-phone{width:calc(100% - 16px);width:calc(100% - var(--mdc-layout-grid-gutter-phone, 16px))}@supports(display: grid){.mdc-layout-grid__cell--span-10,.mdc-layout-grid__cell--span-10-phone{width:auto;grid-column-end:span 4}}.mdc-layout-grid__cell--span-11,.mdc-layout-grid__cell--span-11-phone{width:calc(100% - 16px);width:calc(100% - var(--mdc-layout-grid-gutter-phone, 16px))}@supports(display: grid){.mdc-layout-grid__cell--span-11,.mdc-layout-grid__cell--span-11-phone{width:auto;grid-column-end:span 4}}.mdc-layout-grid__cell--span-12,.mdc-layout-grid__cell--span-12-phone{width:calc(100% - 16px);width:calc(100% - var(--mdc-layout-grid-gutter-phone, 16px))}@supports(display: grid){.mdc-layout-grid__cell--span-12,.mdc-layout-grid__cell--span-12-phone{width:auto;grid-column-end:span 4}}}.mdc-layout-grid__cell--order-1{order:1}.mdc-layout-grid__cell--order-2{order:2}.mdc-layout-grid__cell--order-3{order:3}.mdc-layout-grid__cell--order-4{order:4}.mdc-layout-grid__cell--order-5{order:5}.mdc-layout-grid__cell--order-6{order:6}.mdc-layout-grid__cell--order-7{order:7}.mdc-layout-grid__cell--order-8{order:8}.mdc-layout-grid__cell--order-9{order:9}.mdc-layout-grid__cell--order-10{order:10}.mdc-layout-grid__cell--order-11{order:11}.mdc-layout-grid__cell--order-12{order:12}.mdc-layout-grid__cell--align-top{align-self:flex-start}@supports(display: grid){.mdc-layout-grid__cell--align-top{align-self:start}}.mdc-layout-grid__cell--align-middle{align-self:center}.mdc-layout-grid__cell--align-bottom{align-self:flex-end}@supports(display: grid){.mdc-layout-grid__cell--align-bottom{align-self:end}}@media(min-width: 840px){.mdc-layout-grid--fixed-column-width{width:1176px;width:calc(var(--mdc-layout-grid-column-width-desktop, 72px)*12 + var(--mdc-layout-grid-gutter-desktop, 24px)*11 + var(--mdc-layout-grid-margin-desktop, 24px)*2)}}@media(min-width: 600px)and (max-width: 839px){.mdc-layout-grid--fixed-column-width{width:720px;width:calc(var(--mdc-layout-grid-column-width-tablet, 72px)*8 + var(--mdc-layout-grid-gutter-tablet, 16px)*7 + var(--mdc-layout-grid-margin-tablet, 16px)*2)}}@media(max-width: 599px){.mdc-layout-grid--fixed-column-width{width:368px;width:calc(var(--mdc-layout-grid-column-width-phone, 72px)*4 + var(--mdc-layout-grid-gutter-phone, 16px)*3 + var(--mdc-layout-grid-margin-phone, 16px)*2)}}.mdc-layout-grid--align-left{margin-right:auto;margin-left:0}.mdc-layout-grid--align-right{margin-right:0;margin-left:auto}.mdc-card{border-radius:4px;background-color:#fff;background-color:var(--mdc-theme-surface, #fff);position:relative;box-shadow:0px 2px 1px -1px rgba(0, 0, 0, 0.2),0px 1px 1px 0px rgba(0, 0, 0, 0.14),0px 1px 3px 0px rgba(0,0,0,.12);display:flex;flex-direction:column;box-sizing:border-box}.mdc-card .mdc-elevation-overlay{width:100%;height:100%;top:0;left:0}.mdc-card--outlined{box-shadow:0px 0px 0px 0px rgba(0, 0, 0, 0.2),0px 0px 0px 0px rgba(0, 0, 0, 0.14),0px 0px 0px 0px rgba(0,0,0,.12);border-width:1px;border-style:solid;border-color:hsl(0,0%,88%)}.mdc-card__media{position:relative;box-sizing:border-box;background-repeat:no-repeat;background-position:center;background-size:cover}.mdc-card__media::before{display:block;content:""}.mdc-card__media:first-child{border-top-left-radius:inherit;border-top-right-radius:inherit}.mdc-card__media:last-child{border-bottom-left-radius:inherit;border-bottom-right-radius:inherit}.mdc-card__media--square::before{margin-top:100%}.mdc-card__media--16-9::before{margin-top:56.25%}.mdc-card__media-content{position:absolute;top:0;right:0;bottom:0;left:0;box-sizing:border-box}.mdc-card__primary-action{display:flex;flex-direction:column;box-sizing:border-box;position:relative;outline:none;color:inherit;text-decoration:none;cursor:pointer;overflow:hidden}.mdc-card__primary-action:first-child{border-top-left-radius:inherit;border-top-right-radius:inherit}.mdc-card__primary-action:last-child{border-bottom-left-radius:inherit;border-bottom-right-radius:inherit}.mdc-card__actions{display:flex;flex-direction:row;align-items:center;box-sizing:border-box;min-height:52px;padding:8px}.mdc-card__actions--full-bleed{padding:0}.mdc-card__action-buttons,.mdc-card__action-icons{display:flex;flex-direction:row;align-items:center;box-sizing:border-box}.mdc-card__action-icons{color:rgba(0,0,0,.6);flex-grow:1;justify-content:flex-end}.mdc-card__action-buttons+.mdc-card__action-icons{margin-left:16px;margin-right:0}[dir=rtl] .mdc-card__action-buttons+.mdc-card__action-icons,.mdc-card__action-buttons+.mdc-card__action-icons[dir=rtl]{margin-left:0;margin-right:16px}.mdc-card__action{display:inline-flex;flex-direction:row;align-items:center;box-sizing:border-box;justify-content:center;cursor:pointer;-webkit-user-select:none;-moz-user-select:none;user-select:none}.mdc-card__action:focus{outline:none}.mdc-card__action--button{margin-left:0;margin-right:8px;padding:0 8px}[dir=rtl] .mdc-card__action--button,.mdc-card__action--button[dir=rtl]{margin-left:8px;margin-right:0}.mdc-card__action--button:last-child{margin-left:0;margin-right:0}[dir=rtl] .mdc-card__action--button:last-child,.mdc-card__action--button:last-child[dir=rtl]{margin-left:0;margin-right:0}.mdc-card__actions--full-bleed .mdc-card__action--button{justify-content:space-between;width:100%;height:auto;max-height:none;margin:0;padding:8px 16px;text-align:left}[dir=rtl] .mdc-card__actions--full-bleed .mdc-card__action--button,.mdc-card__actions--full-bleed .mdc-card__action--button[dir=rtl]{text-align:right}.mdc-card__action--icon{margin:-6px 0;padding:12px}.mdc-card__action--icon:not(:disabled){color:rgba(0,0,0,.6)}.mdc-card__primary-action{--mdc-ripple-fg-size: 0;--mdc-ripple-left: 0;--mdc-ripple-top: 0;--mdc-ripple-fg-scale: 1;--mdc-ripple-fg-translate-end: 0;--mdc-ripple-fg-translate-start: 0;-webkit-tap-highlight-color:rgba(0,0,0,0)}.mdc-card__primary-action::before,.mdc-card__primary-action::after{position:absolute;border-radius:50%;opacity:0;pointer-events:none;content:""}.mdc-card__primary-action::before{transition:opacity 15ms linear,background-color 15ms linear;z-index:1}.mdc-card__primary-action.mdc-ripple-upgraded::before{transform:scale(var(--mdc-ripple-fg-scale, 1))}.mdc-card__primary-action.mdc-ripple-upgraded::after{top:0;left:0;transform:scale(0);transform-origin:center center}.mdc-card__primary-action.mdc-ripple-upgraded--unbounded::after{top:var(--mdc-ripple-top, 0);left:var(--mdc-ripple-left, 0)}.mdc-card__primary-action.mdc-ripple-upgraded--foreground-activation::after{animation:mdc-ripple-fg-radius-in 225ms forwards,mdc-ripple-fg-opacity-in 75ms forwards}.mdc-card__primary-action.mdc-ripple-upgraded--foreground-deactivation::after{animation:mdc-ripple-fg-opacity-out 150ms;transform:translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1))}.mdc-card__primary-action::before,.mdc-card__primary-action::after{top:calc(50% - 100%);left:calc(50% - 100%);width:200%;height:200%}.mdc-card__primary-action.mdc-ripple-upgraded::after{width:var(--mdc-ripple-fg-size, 100%);height:var(--mdc-ripple-fg-size, 100%)}.mdc-card__primary-action::before,.mdc-card__primary-action::after{background-color:#000}.mdc-card__primary-action:hover::before{opacity:.04}.mdc-card__primary-action.mdc-ripple-upgraded--background-focused::before,.mdc-card__primary-action:not(.mdc-ripple-upgraded):focus::before{transition-duration:75ms;opacity:.12}.mdc-card__primary-action:not(.mdc-ripple-upgraded)::after{transition:opacity 150ms linear}.mdc-card__primary-action:not(.mdc-ripple-upgraded):active::after{transition-duration:75ms;opacity:.12}.mdc-card__primary-action.mdc-ripple-upgraded{--mdc-ripple-fg-opacity: 0.12}:root{--mdc-layout-grid-margin-desktop: 24px;--mdc-layout-grid-gutter-desktop: 24px;--mdc-layout-grid-column-width-desktop: 72px;--mdc-layout-grid-margin-tablet: 16px;--mdc-layout-grid-gutter-tablet: 16px;--mdc-layout-grid-column-width-tablet: 72px;--mdc-layout-grid-margin-phone: 16px;--mdc-layout-grid-gutter-phone: 16px;--mdc-layout-grid-column-width-phone: 72px}@media(min-width: 840px){.mdc-layout-grid{box-sizing:border-box;margin:0 auto;padding:24px;padding:var(--mdc-layout-grid-margin-desktop, 24px)}}@media(min-width: 600px)and (max-width: 839px){.mdc-layout-grid{box-sizing:border-box;margin:0 auto;padding:16px;padding:var(--mdc-layout-grid-margin-tablet, 16px)}}@media(max-width: 599px){.mdc-layout-grid{box-sizing:border-box;margin:0 auto;padding:16px;padding:var(--mdc-layout-grid-margin-phone, 16px)}}@media(min-width: 840px){.mdc-layout-grid__inner{display:flex;flex-flow:row wrap;align-items:stretch;margin:-12px;margin:calc(var(--mdc-layout-grid-gutter-desktop, 24px)/2*-1)}@supports(display: grid){.mdc-layout-grid__inner{display:grid;margin:0;grid-gap:24px;grid-gap:var(--mdc-layout-grid-gutter-desktop, 24px);grid-template-columns:repeat(12, minmax(0, 1fr))}}}@media(min-width: 600px)and (max-width: 839px){.mdc-layout-grid__inner{display:flex;flex-flow:row wrap;align-items:stretch;margin:-8px;margin:calc(var(--mdc-layout-grid-gutter-tablet, 16px)/2*-1)}@supports(display: grid){.mdc-layout-grid__inner{display:grid;margin:0;grid-gap:16px;grid-gap:var(--mdc-layout-grid-gutter-tablet, 16px);grid-template-columns:repeat(8, minmax(0, 1fr))}}}@media(max-width: 599px){.mdc-layout-grid__inner{display:flex;flex-flow:row wrap;align-items:stretch;margin:-8px;margin:calc(var(--mdc-layout-grid-gutter-phone, 16px)/2*-1)}@supports(display: grid){.mdc-layout-grid__inner{display:grid;margin:0;grid-gap:16px;grid-gap:var(--mdc-layout-grid-gutter-phone, 16px);grid-template-columns:repeat(4, minmax(0, 1fr))}}}@media(min-width: 840px){.mdc-layout-grid__cell{width:calc(33.3333333333% - 24px);width:calc(33.3333333333% - var(--mdc-layout-grid-gutter-desktop, 24px));box-sizing:border-box;margin:12px;margin:calc(var(--mdc-layout-grid-gutter-desktop, 24px)/2)}@supports(display: grid){.mdc-layout-grid__cell{width:auto;grid-column-end:span 4}}@supports(display: grid){.mdc-layout-grid__cell{margin:0}}.mdc-layout-grid__cell--span-1,.mdc-layout-grid__cell--span-1-desktop{width:calc(8.3333333333% - 24px);width:calc(8.3333333333% - var(--mdc-layout-grid-gutter-desktop, 24px))}@supports(display: grid){.mdc-layout-grid__cell--span-1,.mdc-layout-grid__cell--span-1-desktop{width:auto;grid-column-end:span 1}}.mdc-layout-grid__cell--span-2,.mdc-layout-grid__cell--span-2-desktop{width:calc(16.6666666667% - 24px);width:calc(16.6666666667% - var(--mdc-layout-grid-gutter-desktop, 24px))}@supports(display: grid){.mdc-layout-grid__cell--span-2,.mdc-layout-grid__cell--span-2-desktop{width:auto;grid-column-end:span 2}}.mdc-layout-grid__cell--span-3,.mdc-layout-grid__cell--span-3-desktop{width:calc(25% - 24px);width:calc(25% - var(--mdc-layout-grid-gutter-desktop, 24px))}@supports(display: grid){.mdc-layout-grid__cell--span-3,.mdc-layout-grid__cell--span-3-desktop{width:auto;grid-column-end:span 3}}.mdc-layout-grid__cell--span-4,.mdc-layout-grid__cell--span-4-desktop{width:calc(33.3333333333% - 24px);width:calc(33.3333333333% - var(--mdc-layout-grid-gutter-desktop, 24px))}@supports(display: grid){.mdc-layout-grid__cell--span-4,.mdc-layout-grid__cell--span-4-desktop{width:auto;grid-column-end:span 4}}.mdc-layout-grid__cell--span-5,.mdc-layout-grid__cell--span-5-desktop{width:calc(41.6666666667% - 24px);width:calc(41.6666666667% - var(--mdc-layout-grid-gutter-desktop, 24px))}@supports(display: grid){.mdc-layout-grid__cell--span-5,.mdc-layout-grid__cell--span-5-desktop{width:auto;grid-column-end:span 5}}.mdc-layout-grid__cell--span-6,.mdc-layout-grid__cell--span-6-desktop{width:calc(50% - 24px);width:calc(50% - var(--mdc-layout-grid-gutter-desktop, 24px))}@supports(display: grid){.mdc-layout-grid__cell--span-6,.mdc-layout-grid__cell--span-6-desktop{width:auto;grid-column-end:span 6}}.mdc-layout-grid__cell--span-7,.mdc-layout-grid__cell--span-7-desktop{width:calc(58.3333333333% - 24px);width:calc(58.3333333333% - var(--mdc-layout-grid-gutter-desktop, 24px))}@supports(display: grid){.mdc-layout-grid__cell--span-7,.mdc-layout-grid__cell--span-7-desktop{width:auto;grid-column-end:span 7}}.mdc-layout-grid__cell--span-8,.mdc-layout-grid__cell--span-8-desktop{width:calc(66.6666666667% - 24px);width:calc(66.6666666667% - var(--mdc-layout-grid-gutter-desktop, 24px))}@supports(display: grid){.mdc-layout-grid__cell--span-8,.mdc-layout-grid__cell--span-8-desktop{width:auto;grid-column-end:span 8}}.mdc-layout-grid__cell--span-9,.mdc-layout-grid__cell--span-9-desktop{width:calc(75% - 24px);width:calc(75% - var(--mdc-layout-grid-gutter-desktop, 24px))}@supports(display: grid){.mdc-layout-grid__cell--span-9,.mdc-layout-grid__cell--span-9-desktop{width:auto;grid-column-end:span 9}}.mdc-layout-grid__cell--span-10,.mdc-layout-grid__cell--span-10-desktop{width:calc(83.3333333333% - 24px);width:calc(83.3333333333% - var(--mdc-layout-grid-gutter-desktop, 24px))}@supports(display: grid){.mdc-layout-grid__cell--span-10,.mdc-layout-grid__cell--span-10-desktop{width:auto;grid-column-end:span 10}}.mdc-layout-grid__cell--span-11,.mdc-layout-grid__cell--span-11-desktop{width:calc(91.6666666667% - 24px);width:calc(91.6666666667% - var(--mdc-layout-grid-gutter-desktop, 24px))}@supports(display: grid){.mdc-layout-grid__cell--span-11,.mdc-layout-grid__cell--span-11-desktop{width:auto;grid-column-end:span 11}}.mdc-layout-grid__cell--span-12,.mdc-layout-grid__cell--span-12-desktop{width:calc(100% - 24px);width:calc(100% - var(--mdc-layout-grid-gutter-desktop, 24px))}@supports(display: grid){.mdc-layout-grid__cell--span-12,.mdc-layout-grid__cell--span-12-desktop{width:auto;grid-column-end:span 12}}}@media(min-width: 600px)and (max-width: 839px){.mdc-layout-grid__cell{width:calc(50% - 16px);width:calc(50% - var(--mdc-layout-grid-gutter-tablet, 16px));box-sizing:border-box;margin:8px;margin:calc(var(--mdc-layout-grid-gutter-tablet, 16px)/2)}@supports(display: grid){.mdc-layout-grid__cell{width:auto;grid-column-end:span 4}}@supports(display: grid){.mdc-layout-grid__cell{margin:0}}.mdc-layout-grid__cell--span-1,.mdc-layout-grid__cell--span-1-tablet{width:calc(12.5% - 16px);width:calc(12.5% - var(--mdc-layout-grid-gutter-tablet, 16px))}@supports(display: grid){.mdc-layout-grid__cell--span-1,.mdc-layout-grid__cell--span-1-tablet{width:auto;grid-column-end:span 1}}.mdc-layout-grid__cell--span-2,.mdc-layout-grid__cell--span-2-tablet{width:calc(25% - 16px);width:calc(25% - var(--mdc-layout-grid-gutter-tablet, 16px))}@supports(display: grid){.mdc-layout-grid__cell--span-2,.mdc-layout-grid__cell--span-2-tablet{width:auto;grid-column-end:span 2}}.mdc-layout-grid__cell--span-3,.mdc-layout-grid__cell--span-3-tablet{width:calc(37.5% - 16px);width:calc(37.5% - var(--mdc-layout-grid-gutter-tablet, 16px))}@supports(display: grid){.mdc-layout-grid__cell--span-3,.mdc-layout-grid__cell--span-3-tablet{width:auto;grid-column-end:span 3}}.mdc-layout-grid__cell--span-4,.mdc-layout-grid__cell--span-4-tablet{width:calc(50% - 16px);width:calc(50% - var(--mdc-layout-grid-gutter-tablet, 16px))}@supports(display: grid){.mdc-layout-grid__cell--span-4,.mdc-layout-grid__cell--span-4-tablet{width:auto;grid-column-end:span 4}}.mdc-layout-grid__cell--span-5,.mdc-layout-grid__cell--span-5-tablet{width:calc(62.5% - 16px);width:calc(62.5% - var(--mdc-layout-grid-gutter-tablet, 16px))}@supports(display: grid){.mdc-layout-grid__cell--span-5,.mdc-layout-grid__cell--span-5-tablet{width:auto;grid-column-end:span 5}}.mdc-layout-grid__cell--span-6,.mdc-layout-grid__cell--span-6-tablet{width:calc(75% - 16px);width:calc(75% - var(--mdc-layout-grid-gutter-tablet, 16px))}@supports(display: grid){.mdc-layout-grid__cell--span-6,.mdc-layout-grid__cell--span-6-tablet{width:auto;grid-column-end:span 6}}.mdc-layout-grid__cell--span-7,.mdc-layout-grid__cell--span-7-tablet{width:calc(87.5% - 16px);width:calc(87.5% - var(--mdc-layout-grid-gutter-tablet, 16px))}@supports(display: grid){.mdc-layout-grid__cell--span-7,.mdc-layout-grid__cell--span-7-tablet{width:auto;grid-column-end:span 7}}.mdc-layout-grid__cell--span-8,.mdc-layout-grid__cell--span-8-tablet{width:calc(100% - 16px);width:calc(100% - var(--mdc-layout-grid-gutter-tablet, 16px))}@supports(display: grid){.mdc-layout-grid__cell--span-8,.mdc-layout-grid__cell--span-8-tablet{width:auto;grid-column-end:span 8}}.mdc-layout-grid__cell--span-9,.mdc-layout-grid__cell--span-9-tablet{width:calc(100% - 16px);width:calc(100% - var(--mdc-layout-grid-gutter-tablet, 16px))}@supports(display: grid){.mdc-layout-grid__cell--span-9,.mdc-layout-grid__cell--span-9-tablet{width:auto;grid-column-end:span 8}}.mdc-layout-grid__cell--span-10,.mdc-layout-grid__cell--span-10-tablet{width:calc(100% - 16px);width:calc(100% - var(--mdc-layout-grid-gutter-tablet, 16px))}@supports(display: grid){.mdc-layout-grid__cell--span-10,.mdc-layout-grid__cell--span-10-tablet{width:auto;grid-column-end:span 8}}.mdc-layout-grid__cell--span-11,.mdc-layout-grid__cell--span-11-tablet{width:calc(100% - 16px);width:calc(100% - var(--mdc-layout-grid-gutter-tablet, 16px))}@supports(display: grid){.mdc-layout-grid__cell--span-11,.mdc-layout-grid__cell--span-11-tablet{width:auto;grid-column-end:span 8}}.mdc-layout-grid__cell--span-12,.mdc-layout-grid__cell--span-12-tablet{width:calc(100% - 16px);width:calc(100% - var(--mdc-layout-grid-gutter-tablet, 16px))}@supports(display: grid){.mdc-layout-grid__cell--span-12,.mdc-layout-grid__cell--span-12-tablet{width:auto;grid-column-end:span 8}}}@media(max-width: 599px){.mdc-layout-grid__cell{width:calc(100% - 16px);width:calc(100% - var(--mdc-layout-grid-gutter-phone, 16px));box-sizing:border-box;margin:8px;margin:calc(var(--mdc-layout-grid-gutter-phone, 16px)/2)}@supports(display: grid){.mdc-layout-grid__cell{width:auto;grid-column-end:span 4}}@supports(display: grid){.mdc-layout-grid__cell{margin:0}}.mdc-layout-grid__cell--span-1,.mdc-layout-grid__cell--span-1-phone{width:calc(25% - 16px);width:calc(25% - var(--mdc-layout-grid-gutter-phone, 16px))}@supports(display: grid){.mdc-layout-grid__cell--span-1,.mdc-layout-grid__cell--span-1-phone{width:auto;grid-column-end:span 1}}.mdc-layout-grid__cell--span-2,.mdc-layout-grid__cell--span-2-phone{width:calc(50% - 16px);width:calc(50% - var(--mdc-layout-grid-gutter-phone, 16px))}@supports(display: grid){.mdc-layout-grid__cell--span-2,.mdc-layout-grid__cell--span-2-phone{width:auto;grid-column-end:span 2}}.mdc-layout-grid__cell--span-3,.mdc-layout-grid__cell--span-3-phone{width:calc(75% - 16px);width:calc(75% - var(--mdc-layout-grid-gutter-phone, 16px))}@supports(display: grid){.mdc-layout-grid__cell--span-3,.mdc-layout-grid__cell--span-3-phone{width:auto;grid-column-end:span 3}}.mdc-layout-grid__cell--span-4,.mdc-layout-grid__cell--span-4-phone{width:calc(100% - 16px);width:calc(100% - var(--mdc-layout-grid-gutter-phone, 16px))}@supports(display: grid){.mdc-layout-grid__cell--span-4,.mdc-layout-grid__cell--span-4-phone{width:auto;grid-column-end:span 4}}.mdc-layout-grid__cell--span-5,.mdc-layout-grid__cell--span-5-phone{width:calc(100% - 16px);width:calc(100% - var(--mdc-layout-grid-gutter-phone, 16px))}@supports(display: grid){.mdc-layout-grid__cell--span-5,.mdc-layout-grid__cell--span-5-phone{width:auto;grid-column-end:span 4}}.mdc-layout-grid__cell--span-6,.mdc-layout-grid__cell--span-6-phone{width:calc(100% - 16px);width:calc(100% - var(--mdc-layout-grid-gutter-phone, 16px))}@supports(display: grid){.mdc-layout-grid__cell--span-6,.mdc-layout-grid__cell--span-6-phone{width:auto;grid-column-end:span 4}}.mdc-layout-grid__cell--span-7,.mdc-layout-grid__cell--span-7-phone{width:calc(100% - 16px);width:calc(100% - var(--mdc-layout-grid-gutter-phone, 16px))}@supports(display: grid){.mdc-layout-grid__cell--span-7,.mdc-layout-grid__cell--span-7-phone{width:auto;grid-column-end:span 4}}.mdc-layout-grid__cell--span-8,.mdc-layout-grid__cell--span-8-phone{width:calc(100% - 16px);width:calc(100% - var(--mdc-layout-grid-gutter-phone, 16px))}@supports(display: grid){.mdc-layout-grid__cell--span-8,.mdc-layout-grid__cell--span-8-phone{width:auto;grid-column-end:span 4}}.mdc-layout-grid__cell--span-9,.mdc-layout-grid__cell--span-9-phone{width:calc(100% - 16px);width:calc(100% - var(--mdc-layout-grid-gutter-phone, 16px))}@supports(display: grid){.mdc-layout-grid__cell--span-9,.mdc-layout-grid__cell--span-9-phone{width:auto;grid-column-end:span 4}}.mdc-layout-grid__cell--span-10,.mdc-layout-grid__cell--span-10-phone{width:calc(100% - 16px);width:calc(100% - var(--mdc-layout-grid-gutter-phone, 16px))}@supports(display: grid){.mdc-layout-grid__cell--span-10,.mdc-layout-grid__cell--span-10-phone{width:auto;grid-column-end:span 4}}.mdc-layout-grid__cell--span-11,.mdc-layout-grid__cell--span-11-phone{width:calc(100% - 16px);width:calc(100% - var(--mdc-layout-grid-gutter-phone, 16px))}@supports(display: grid){.mdc-layout-grid__cell--span-11,.mdc-layout-grid__cell--span-11-phone{width:auto;grid-column-end:span 4}}.mdc-layout-grid__cell--span-12,.mdc-layout-grid__cell--span-12-phone{width:calc(100% - 16px);width:calc(100% - var(--mdc-layout-grid-gutter-phone, 16px))}@supports(display: grid){.mdc-layout-grid__cell--span-12,.mdc-layout-grid__cell--span-12-phone{width:auto;grid-column-end:span 4}}}.mdc-layout-grid__cell--order-1{order:1}.mdc-layout-grid__cell--order-2{order:2}.mdc-layout-grid__cell--order-3{order:3}.mdc-layout-grid__cell--order-4{order:4}.mdc-layout-grid__cell--order-5{order:5}.mdc-layout-grid__cell--order-6{order:6}.mdc-layout-grid__cell--order-7{order:7}.mdc-layout-grid__cell--order-8{order:8}.mdc-layout-grid__cell--order-9{order:9}.mdc-layout-grid__cell--order-10{order:10}.mdc-layout-grid__cell--order-11{order:11}.mdc-layout-grid__cell--order-12{order:12}.mdc-layout-grid__cell--align-top{align-self:flex-start}@supports(display: grid){.mdc-layout-grid__cell--align-top{align-self:start}}.mdc-layout-grid__cell--align-middle{align-self:center}.mdc-layout-grid__cell--align-bottom{align-self:flex-end}@supports(display: grid){.mdc-layout-grid__cell--align-bottom{align-self:end}}@media(min-width: 840px){.mdc-layout-grid--fixed-column-width{width:1176px;width:calc(var(--mdc-layout-grid-column-width-desktop, 72px)*12 + var(--mdc-layout-grid-gutter-desktop, 24px)*11 + var(--mdc-layout-grid-margin-desktop, 24px)*2)}}@media(min-width: 600px)and (max-width: 839px){.mdc-layout-grid--fixed-column-width{width:720px;width:calc(var(--mdc-layout-grid-column-width-tablet, 72px)*8 + var(--mdc-layout-grid-gutter-tablet, 16px)*7 + var(--mdc-layout-grid-margin-tablet, 16px)*2)}}@media(max-width: 599px){.mdc-layout-grid--fixed-column-width{width:368px;width:calc(var(--mdc-layout-grid-column-width-phone, 72px)*4 + var(--mdc-layout-grid-gutter-phone, 16px)*3 + var(--mdc-layout-grid-margin-phone, 16px)*2)}}.mdc-layout-grid--align-left{margin-right:auto;margin-left:0}.mdc-layout-grid--align-right{margin-right:0;margin-left:auto}.mdc-top-app-bar{background:#3170f3}.mdc-card{background:#28293d}body{margin:0;background:#28293d}.mdc-drawer{border-right-width:0}.mdc-drawer-app-content{flex:auto;overflow:auto}.mdc-drawer__content{color:#fff;background:#3170f3}.main-content{padding-top:20px}.app-bar{position:absolute}.mdc-top-app-bar{color:#fff;z-index:7}.mdc-top-app-bar .mdc-top-app-bar__action-item,.mdc-top-app-bar .mdc-top-app-bar__navigation-icon{color:#fff}.demo-card__title{color:#f3f4f6;padding:1rem;margin:0}@font-face{font-family:"Material Icons";src:url(${___CSS_LOADER_URL_REPLACEMENT_0___}) format("woff2")}`, "",{"version":3,"sources":["webpack://./node_modules/@material/top-app-bar/mdc-top-app-bar.scss","webpack://./node_modules/@material/theme/_mixins.scss","webpack://./node_modules/@material/top-app-bar/_mixins.scss","webpack://./node_modules/@material/ripple/_mixins.scss","webpack://./node_modules/@material/ripple/_variables.scss","webpack://./node_modules/@material/top-app-bar/_variables.scss","webpack://./node_modules/@material/typography/_mixins.scss","webpack://./node_modules/@material/rtl/_mixins.scss","webpack://./node_modules/@material/shape/_mixins.scss","webpack://./node_modules/@material/elevation/_mixins.scss","webpack://./node_modules/@material/icon-button/_mixins.scss","webpack://./node_modules/@material/icon-button/_variables.scss","webpack://./node_modules/@material/ripple/_keyframes.scss","webpack://./node_modules/@material/animation/_variables.scss","webpack://./node_modules/@material/list/_mixins.scss","webpack://./node_modules/@material/list/_variables.scss","webpack://./node_modules/@material/menu-surface/_mixins.scss","webpack://./node_modules/@material/menu-surface/_variables.scss","webpack://./node_modules/@material/menu/_mixins.scss","webpack://./node_modules/@material/menu/_variables.scss","webpack://./node_modules/@material/drawer/_mixins.scss","webpack://./node_modules/@material/drawer/_variables.scss","webpack://./node_modules/@material/layout-grid/mdc-layout-grid.scss","webpack://./node_modules/@material/layout-grid/_mixins.scss","webpack://./node_modules/@material/card/_mixins.scss","webpack://./node_modules/@material/card/_variables.scss","webpack://./wbprop.scss"],"names":[],"mappings":"AA8BA,iBCqDI,qBAAA,CAEA,kDAAA,CATA,qBAAA,CD1CF,YAAA,CACA,cAAA,CACA,qBAAA,CACA,6BAAA,CACA,qBAAA,CACA,UAAA,CACA,SAAA,CEUA,kGDiCE,UAAA,CAEA,uCAAA,CEiGF,kOFnGE,qBAAA,CAEA,kDAAA,CE0IA,8HAGI,WArB0B,CAuD5B,oXAeF,wBAAA,CAIA,WAtE8B,CAkF9B,oKAEI,+BAAA,CAKF,kLAEI,wBCtRS,CD2RT,WA5FwB,CAkGhC,0IAEI,6BAAA,CH/QJ,sBACE,YAAA,CACA,iBAAA,CACA,qBAAA,CACA,UAAA,CACA,WKxBS,CL2BX,0BACE,mBAAA,CACA,aAAA,CACA,kBAAA,CACA,WAAA,CACA,gBAAA,CACA,SAAA,CAEA,uCACE,0BAAA,CACA,QAAA,CAGF,qCACE,wBAAA,CACA,OAAA,CAIJ,wBMsBE,iCAAA,CACA,kCAAA,CLpBA,8BAAA,CAEA,8GAAA,CAFA,iBAAA,CAEA,4DAAA,CAFA,gBAAA,CAEA,6DAAA,CAFA,eAAA,CAEA,4DAAA,CAFA,sBAAA,CAEA,uEAAA,CAFA,uBAAA,CAEA,gFAAA,CAAA,wEAAA,CAFA,sBAAA,CAEA,sEAAA,CMkNF,iBAAA,CAAA,eAAA,CPnNE,sBAAA,CACA,kBAAA,CACA,eAAA,CACA,SAAA,COKE,mEA2MJ,cAAA,CAAA,kBAAA,CL1NA,kCM1BE,wBAAA,CDyCE,uFCpCE,wBAAA,CRuCR,wBACE,KAAA,CAEA,UAAA,CAEA,MAAA,CACA,UAAA,CACA,mDAAA,COVI,mEPcF,OAAA,CAEA,SAAA,CAGF,8CACE,WKtEgB,CLyElB,kDACE,WKzEqB,CL4EvB,gDACE,qDAAA,CACA,SAAA,CAIJ,kCSrBI,mHAoGW,CT5Eb,UKjFsB,CLkFtB,mDAAA,CAEA,0DACE,YAAA,CAGF,gEACE,qDAAA,CAKJ,yEACE,WAAA,CAEA,8GOuJA,cAAA,CAAA,kBAAA,CA3MI,+OA2MJ,iBAAA,CAAA,eAAA,CPjJA,8CACE,WK7Fe,CLgGjB,kDACE,aAAA,CAGF,gDOyIA,iBAAA,CAAA,eAAA,CA3MI,mHA2MJ,cAAA,CAAA,kBAAA,CPnIA,kDACE,YKlHmB,CLqHrB,oDACE,mBAAA,CACA,kBKtH6B,CLyH/B,wHAEE,qBAAA,CAKJ,wBACE,kCAAA,CAGF,iCShFI,mHAoGW,CTjBb,kCAAA,CAMA,yEACE,WAAA,CAGF,6EACE,cAAA,CAGF,2EO8FA,iBAAA,CAAA,eAAA,CP3FE,kBK7ImC,CE6BjC,yKA2MJ,cAAA,CAAA,kBAAA,CPtFF,+BACE,gBKhLW,CLmLb,qCACE,gBK5JiB,CL+JnB,qCACE,gBKhLkB,CLmLpB,yCACE,iBK3KqB,CL8KvB,+CACE,gBAAA,CExIA,yBACE,sBACE,WGlDc,CHqDhB,0BACE,WGrDmB,CHwDrB,wBACE,mDAAA,CAGF,kCACE,mDAAA,CAEA,uEK6LJ,cAAA,CAAA,kBAAA,CA3MI,iKA2MJ,iBAAA,CAAA,eAAA,CLvLI,oDACE,kBG1DgC,CH8DpC,+BACE,gBG5Ec,CAAA,CKQlB,iBAmIE,oBAAA,CACA,iBAAA,CACA,qBAAA,CACA,WAAA,CACA,YAAA,CACA,8BAAA,CACA,iBAAA,CACA,aAAA,CACA,cC1JQ,CD2JR,oBAAA,CACA,cAAA,CACA,wBAAA,CAAA,qBAAA,CAAA,gBAAA,CAvEA,UAnBK,CAoBL,WApBK,CAqBL,YAAA,CAyEF,0CAGI,UCpKM,CDqKN,WCrKM,CDqMV,0BT1IE,qBAAA,CAEA,kEAAA,CSwIF,0BAxBI,cAAA,CACA,mBAAA,CA1JJ,uBAEI,oBAAA,CAIF,iDAEI,YAAA,CAMJ,4CAEI,YAAA,CAIF,sEAEI,oBAAA,CEtCR,mCACE,KACE,sDCP2B,CDY3B,qEAAA,CAGF,GACE,+FAAA,CAAA,CAIJ,oCACE,KACE,gCAAA,CACA,SAAA,CAGF,GACE,uCAAA,CAAA,CAIJ,qCACE,KACE,gCAAA,CACA,uCAAA,CAGF,GACE,SAAA,CAAA,CFgBJ,iBPYE,uBAAA,CACA,oBAAA,CACA,mBAAA,CACA,wBAAA,CACA,gCAAA,CACA,kCAAA,CAEA,yCAAA,CAIF,iDAGI,iBAAA,CACA,iBAAA,CACA,SAAA,CACA,mBAAA,CACA,UAAA,CAIJ,yBAGI,2DACE,CAKF,SAAA,CAOF,6CAEI,8CAAA,CAIJ,4CAEI,KAAA,CAEA,MAAA,CACA,kBAAA,CACA,8BAAA,CAMJ,uDAEI,4BAAA,CAEA,8BAAA,CAMJ,mEAEI,uFACE,CAON,qEAEI,yCAAA,CAKA,+FAAA,CAoPN,iDAGI,mBAAA,CAEA,oBAAA,CACA,UATK,CAUL,WAVK,CAeP,yFAGI,0CAAA,CAEA,4CAAA,CACA,qCAAA,CACA,sCAAA,CAIJ,4CAEI,qCAAA,CACA,sCAAA,CApQN,iDF1GE,qBAAA,CEmJA,+BAGI,WArB0B,CAuD5B,0HAeF,wBAAA,CAIA,WAtE8B,CAkF9B,kDAEI,+BAAA,CAKF,yDAEI,wBCtRS,CD2RT,WA5FwB,CAkGhC,qCAEI,6BAAA,CW5PJ,UR8BE,iCAAA,CACA,kCAAA,CLpBA,8BAAA,CAEA,8GAAA,CAFA,cAAA,CAEA,yDAAA,CAFA,mBAAA,CAEA,gEAAA,CAFA,eAAA,CAEA,4DAAA,CAFA,wBAAA,CAEA,yEAAA,CAFA,uBAAA,CAEA,gFAAA,CAAA,wEAAA,CAFA,sBAAA,CAEA,sEAAA,CasaA,kBAAA,CAIA,QAAA,CACA,aAAA,CACA,oBAAA,CbnaA,UAAA,CAEA,wDAAA,CamaA,gBACE,YAAA,CA5CJ,eAgBE,WAtBO,CAvHT,+Bb7PE,wBAAA,CAEA,6EAAA,CaqQF,wBb9QE,8BAAA,CawRF,wBbjRE,wBAAA,CAEA,wEAAA,CayRF,qBb3RE,wBAAA,CAEA,wEAAA,Ca2UF,2Bb7UE,UAAA,CAEA,wDAAA,CaqVF,8CAEI,WCjZkB,CD0ZpB,4JblWA,UAAA,CAEA,uCAAA,CaXF,iBAEI,eAAA,CACA,kBAAA,CACA,iBAAA,CAIJ,eA+aA,YAAA,CACA,iBAAA,CACA,kBAAA,CACA,0BAAA,CACA,cAAA,CACA,eAAA,CAEA,qBACE,YAAA,CA/aF,mDbPE,UAAA,CAEA,uCAAA,Ca+QF,mGbjRE,UAAA,CAEA,uCAAA,CaWF,wBP4LA,aAAA,CAAA,iBAAA,COoQA,UA9b2B,CA+b3B,WA/b2B,CAEvB,aAAA,CACA,kBAAA,CACA,sBAAA,CACA,iBAAA,CP5BE,iGAiNN,gBAAA,CAAA,cAAA,CO9KA,kCAEI,mBAAA,CAKJ,qBPuKA,gBAAA,CAAA,cAAA,COrKE,0CR5BA,iCAAA,CACA,kCAAA,CLpBA,8BAAA,CAEA,4GAAA,CAFA,gBAAA,CAEA,0DAAA,CAFA,mBAAA,CAEA,8DAAA,CAFA,eAAA,CAEA,0DAAA,CAFA,4BAAA,CAEA,2EAAA,CAFA,uBAAA,CAEA,8EAAA,CAAA,sEAAA,CAFA,sBAAA,CAEA,oEAAA,CMCI,2FAiNN,aAAA,CAAA,iBAAA,CO3JA,qBR5BE,sBAAA,CACA,kBAAA,CACA,eAAA,CQgCF,0BAEI,mBAAA,CAIJ,6BRxCE,sBAAA,CACA,kBAAA,CACA,eAAA,CAQA,aAAA,CACA,YAAA,CAEA,kBAAA,CAgBA,mBAAA,CQiBE,aAAA,CR9BJ,qCA0BA,oBAAA,CACA,OAAA,CACA,WQ7FoC,CR8FpC,UAAA,CAzBI,gBAAA,CAYJ,oCAUA,oBAAA,CACA,OAAA,CACA,WQ5FsC,CR6FtC,UAAA,CATI,oBAAA,CQcF,8CRxCA,aAAA,CACA,YAAA,CAEA,kBAAA,CAgBA,mBAAA,CAbF,sDA0BA,oBAAA,CACA,OAAA,CACA,WQ3F0C,CR4F1C,UAAA,CAzBI,gBAAA,CAYJ,qDAUA,oBAAA,CACA,OAAA,CACA,WQ5FsC,CR6FtC,UAAA,CATI,oBAAA,CQqBJ,+BRnEE,iCAAA,CACA,kCAAA,CLpBA,8BAAA,CAEA,0GAAA,CAFA,iBAAA,CAEA,yDAAA,CAFA,mBAAA,CAEA,4DAAA,CAFA,eAAA,CAEA,wDAAA,CAFA,4BAAA,CAEA,yEAAA,CAFA,uBAAA,CAEA,4EAAA,CAAA,oEAAA,CAFA,sBAAA,CAEA,kEAAA,CK2BA,sBAAA,CACA,kBAAA,CACA,eAAA,CAQA,aAAA,CACA,YAAA,CAEA,kBAAA,CQkDE,aAAA,CR/CJ,uCA0BA,oBAAA,CACA,OAAA,CACA,WQ5FsC,CR6FtC,UAAA,CAzBI,gBAAA,CQ+CF,gDRzDA,aAAA,CACA,YAAA,CAEA,kBAAA,CQ0DI,iBAAA,CRvDN,wDA0BA,oBAAA,CACA,OAAA,CACA,WQ5FsC,CR6FtC,UAAA,CAzBI,gBAAA,CQ0DJ,gCAEI,WAAA,CAIJ,yCPmGA,aAAA,CAAA,iBAAA,COoQA,UArW2B,CAsW3B,WAtW2B,CPhHrB,mIAiNN,gBAAA,CAAA,cAAA,CO7FA,sCAEI,WAAA,CAIJ,+CPuFA,aAAA,CAAA,iBAAA,COoQA,UAzV2B,CA0V3B,WA1V2B,CAEvB,iBAAA,CP9HE,+IAiNN,gBAAA,CAAA,cAAA,CO/EA,yCAEI,qBAAA,CAIJ,mCAEI,WAAA,CAIJ,yGAGI,WAAA,CAIJ,+DP4DA,aAAA,CAAA,iBAAA,COoQA,UA9T2B,CA+T3B,WA/T2B,CPvJrB,+KAiNN,gBAAA,CAAA,cAAA,COrDA,8EAEI,cAAA,CAMJ,gBAEI,aAAA,CACA,oBAAA,CAKJ,kBAEI,QAAA,CACA,QAAA,CACA,WAAA,CACA,uBAAA,CACA,yBAAA,CAyJJ,kBb1UE,sCAAA,CayLF,0BAGI,aAAA,CAIJ,yBPgBA,gBAAA,CAAA,cAAA,COZI,uBAAA,CPrME,qGAiNN,aAAA,CAAA,iBAAA,CORA,kDAEI,8BAAA,CAOA,0BACE,SAAA,CAKN,2BRxME,iCAAA,CACA,kCAAA,CLpBA,8BAAA,CAEA,8GAAA,CAFA,cAAA,CAEA,yDAAA,CAFA,mBAAA,CAEA,gEAAA,CAFA,eAAA,CAEA,4DAAA,CAFA,wBAAA,CAEA,yEAAA,CAFA,uBAAA,CAEA,gFAAA,CAAA,wEAAA,CAFA,sBAAA,CAEA,sEAAA,CaiOE,mCAAA,CAaJ,8EX/NE,uBAAA,CACA,oBAAA,CACA,mBAAA,CACA,wBAAA,CACA,gCAAA,CACA,kCAAA,CAEA,yCAAA,CAIF,2KAGI,iBAAA,CACA,iBAAA,CACA,SAAA,CACA,mBAAA,CACA,UAAA,CAIJ,sFAGI,2DACE,CAKF,SAAA,CAOF,0GAEI,8CAAA,CAIJ,yGAEI,KAAA,CAEA,MAAA,CACA,kBAAA,CACA,8BAAA,CAMJ,oHAEI,4BAAA,CAEA,8BAAA,CAMJ,gIAEI,uFACE,CAON,kIAEI,yCAAA,CAKA,+FAAA,CA2NN,2KAGI,oBAAA,CAEA,qBAAA,CACA,UAAA,CACA,WAAA,CAKF,yGAEI,qCAAA,CACA,sCAAA,CAhON,2KF1GE,qBAAA,CEmJA,4FAGI,WArB0B,CAuD5B,oPAeF,wBAAA,CAIA,WAtE8B,CAkF9B,+GAEI,+BAAA,CAKF,sHAEI,wBCtRS,CD2RT,WA5FwB,CAkGhC,kGAEI,6BAAA,CA8BF,iGAGI,WARc,CA5JpB,iMFnGE,qBAAA,CAEA,kDAAA,CE0IA,uGAGI,WArB0B,CAuD5B,0QAeF,wBAAA,CAIA,WAtE8B,CAkF9B,0HAEI,+BAAA,CAKF,iIAEI,wBCtRS,CD2RT,WA5FwB,CAkGhC,6GAEI,6BAAA,CA0DF,gGAGI,WAPa,CAzLnB,+LFnGE,qBAAA,CAEA,kDAAA,CE0IA,sGAGI,WArB0B,CAuD5B,wQAeF,wBAAA,CAIA,UAtE8B,CAkF9B,yHAEI,+BAAA,CAKF,gIAEI,wBCtRS,CD2RT,UA5FwB,CAkGhC,4GAEI,4BAAA,CWIJ,0DXpOE,uBAAA,CACA,oBAAA,CACA,mBAAA,CACA,wBAAA,CACA,gCAAA,CACA,kCAAA,CAEA,yCAAA,CAIF,mIAGI,iBAAA,CACA,iBAAA,CACA,SAAA,CACA,mBAAA,CACA,UAAA,CAIJ,kEAGI,2DACE,CAKF,SAAA,CAOF,sFAEI,8CAAA,CAIJ,qFAEI,KAAA,CAEA,MAAA,CACA,kBAAA,CACA,8BAAA,CAMJ,gGAEI,4BAAA,CAEA,8BAAA,CAMJ,4GAEI,uFACE,CAON,8GAEI,yCAAA,CAKA,+FAAA,CA2NN,mIAGI,oBAAA,CAEA,qBAAA,CACA,UAAA,CACA,WAAA,CAKF,qFAEI,qCAAA,CACA,sCAAA,CAhON,mIF1GE,qBAAA,CEwLE,4MAeF,wBAAA,CAIA,WW0C4C,CE1R9C,kBAwDE,YAAA,CACA,iBAAA,CACA,qBAAA,CACA,4BAAA,CACA,6BAAA,CACA,QAAA,CACA,SAAA,CACA,kBAAA,CACA,yBAAA,CACA,SAAA,CACA,aAAA,CACA,6BAAA,CACA,SCjFM,CDqFN,wEACE,CPnBF,oHAoGW,CR9GX,qBAAA,CAEA,+CAAA,CAFA,UAAA,CAEA,uCAAA,CO7CA,iBAAA,CDoPF,8BAAA,CAAA,gCAAA,CSxKA,wBAEI,YAAA,CAKJ,wBAEI,oBAAA,CACA,kBAAA,CACA,SAAA,CAIJ,kCAEI,oBAAA,CACA,oBAAA,CACA,SAAA,CAIJ,oCAEI,oBAAA,CACA,SAAA,CAIA,+BAAA,CTjEA,uDA2MJ,+BAAA,CAAA,+BAAA,CSzOA,0BAEI,iBAAA,CACA,gBAAA,CAIJ,yBAEI,cAAA,CPyJJ,uBArJM,iBAAA,CACA,qBAAA,CACA,SAAA,CACA,mBAAA,CAMA,qDAAA,CRGJ,qBAAA,CiBpCF,UAKI,eCjBM,CLkVV,+BblSE,qBAAA,CawRF,kCbxRE,qBAAA,CiB3BA,oBjB2BA,qBAAA,CQ6BA,iBAAA,CA4GF,2CA5FI,USrE6C,CTsE7C,WStE6C,CTyE3C,KAAA,CAEA,MAAA,CSxEJ,4BAEI,YAAA,CAIJ,yBAEI,wBAAA,CAAA,qBAAA,CAAA,gBAAA,CAIJ,mCAEI,WAAA,CAKJ,iGAGI,mBAAA,CAON,2BAEI,SAAA,CACA,iBAAA,CAGF,0CXkMF,iBAAA,CAAA,kBAAA,CA3MI,uGA2MJ,iBAAA,CAAA,kBAAA,CW3LE,2DX2LF,SAAA,CAAA,aAAA,CWvLM,YAAA,CACA,iBAAA,CAEA,OAAA,CACA,0BAAA,CXxBF,yIA2MJ,YAAA,CAAA,UAAA,CW5KA,yDAEI,cAAA,CEnEJ,YnB6BE,4BAAA,CAAA,qBAAA,COpCA,qBAAA,CY6VA,SC/UM,CDuVN,WCnWI,CDoBF,YAAA,CACA,qBAAA,CACA,aAAA,CACA,qBAAA,CACA,WAAA,CAEA,sBAAA,CAEA,wBAAA,CACA,eAAA,CAeA,6BAAA,CACA,uDPhE2B,CO0R/B,+BnBrOE,qBAAA,CaoVF,uCbpVE,oBAAA,CmBkPF,kCnBlPE,oBAAA,CawRF,oCbxRE,oBAAA,CmB4RF,2BnB5RE,qBAAA,CawRF,8DbxRE,UAAA,CmBoRF,sCnBpRE,yBAAA,CMKE,2CCpCE,qBAAA,CMiWN,2BNtWE,iBAAA,CYwWF,+EbpHA,iBAAA,CAAA,cAAA,CA3MI,iLA2MJ,aAAA,CAAA,kBAAA,CA3MI,2CaNE,oBAAA,CAEA,qBAAA,CAEA,uBAAA,CAEA,uBAAA,CA6UN,2BdnUE,iCAAA,CACA,kCAAA,CLpBA,8BAAA,CAEA,8GAAA,CAFA,iBAAA,CAEA,6DAAA,CAFA,oBAAA,CAEA,iEAAA,CAFA,eAAA,CAEA,4DAAA,CAFA,4BAAA,CAEA,6EAAA,CAFA,uBAAA,CAEA,gFAAA,CAAA,wEAAA,CAFA,sBAAA,CAEA,sEAAA,CmBwVE,yBAAA,CAEA,cAAA,CACA,aAAA,CAKJ,wCAEI,cAAA,CAKJ,6CAEI,eAAA,CAKJ,uCd7VE,iCAAA,CACA,kCAAA,CLpBA,8BAAA,CAEA,0GAAA,CAFA,iBAAA,CAEA,yDAAA,CAFA,mBAAA,CAEA,4DAAA,CAFA,eAAA,CAEA,wDAAA,CAFA,4BAAA,CAEA,yEAAA,CAFA,uBAAA,CAEA,4EAAA,CAAA,oEAAA,CAFA,sBAAA,CAEA,kEAAA,CKqCA,aAAA,CACA,YAAA,CAEA,kBAAA,Cc2UE,QAAA,CACA,cAAA,CdzUJ,+CA0BA,oBAAA,CACA,OAAA,CACA,WcyS0C,CdxS1C,UAAA,CAzBI,gBAAA,Cc0UJ,8BAEI,gBAAA,CAMJ,qEAGI,mBAAA,CAjXJ,qBAEI,2BAAA,CbdA,6DaiBE,0BAAA,CAKN,qBAEI,uBAAA,CASA,yBCnEY,CdkCZ,6Da4BE,uBAAA,CASN,qBAEI,2BAAA,CAQA,yBChFW,CdiCX,6Da0CE,0BAAA,CASN,oBAEI,aAAA,CACA,qBAAA,CACA,eAAA,CACA,kBAAA,CAIJ,mBdlDE,iCAAA,CACA,kCAAA,CLpBA,8BAAA,CAEA,8GAAA,CAFA,iBAAA,CAEA,4DAAA,CAFA,gBAAA,CAEA,6DAAA,CAFA,eAAA,CAEA,4DAAA,CAFA,sBAAA,CAEA,uEAAA,CAFA,uBAAA,CAEA,gFAAA,CAAA,wEAAA,CAFA,sBAAA,CAEA,sEAAA,CKqCA,aAAA,CACA,YAAA,CAEA,kBAAA,CAgBA,mBAAA,CAbF,2BA0BA,oBAAA,CACA,OAAA,CACA,WcF0C,CdG1C,UAAA,CAzBI,gBAAA,CAYJ,0BAUA,oBAAA,CACA,OAAA,CACA,WcD6C,CdE7C,UAAA,CATI,oBAAA,CcUJ,sBdxDE,iCAAA,CACA,kCAAA,CLpBA,8BAAA,CAEA,0GAAA,CAFA,iBAAA,CAEA,yDAAA,CAFA,mBAAA,CAEA,4DAAA,CAFA,eAAA,CAEA,wDAAA,CAFA,4BAAA,CAEA,yEAAA,CAFA,uBAAA,CAEA,4EAAA,CAAA,oEAAA,CAFA,sBAAA,CAEA,kEAAA,CKqCA,aAAA,CACA,YAAA,CAEA,kBAAA,CcsCE,eAAA,CdnCJ,8BA0BA,oBAAA,CACA,OAAA,CACA,WcI0C,CdH1C,UAAA,CAzBI,gBAAA,CcmCJ,qBAEI,WAAA,CACA,eAAA,CACA,gCAAA,CAUJ,yBbkHA,MAAA,CAAA,aAAA,Ca9GI,YAAA,CACA,iBAAA,Cb9FA,qEA2MJ,YAAA,CAAA,OAAA,Ca3GI,0CACE,YAAA,CAKN,wBbqGA,aAAA,CAAA,cAAA,CajGI,iBAAA,Cb1GA,mEA2MJ,aAAA,CAAA,cAAA,CaxFA,mBXvGE,sHAoGW,CF2Fb,MAAA,CAAA,aAAA,CajFI,YAAA,CACA,cAAA,CA8KJ,qCnB9SE,gCAAA,CMKE,yDA2MJ,YAAA,CAAA,OAAA,Ca7EE,oCAEI,YAAA,CAKN,kBAEI,YAAA,CACA,cAAA,CACA,KAAA,CACA,MAAA,CACA,UAAA,CACA,WAAA,CACA,SAAA,CAIA,2BAAA,CACA,uDP5M2B,CO+M7B,oCAEI,aAAA,CAIJ,uCAEI,SAAA,CAIJ,uCAEI,yBCrMU,CDyMV,SAAA,CAIJ,uCAEI,yBC9MS,CDkNT,SAAA,CEzOR,MAEI,sCAAA,CACA,sCAAA,CACA,4CAAA,CAFA,qCAAA,CACA,qCAAA,CACA,2CAAA,CAFA,oCAAA,CACA,oCAAA,CACA,0CAAA,CCuCA,yBDlCJ,iBCsEE,qBAAA,CACA,aAAA,CACA,YDrEa,CCuEb,mDAAA,CAAA,CA7CE,+CD7BJ,iBCsEE,qBAAA,CACA,aAAA,CACA,YDrEa,CCuEb,kDAAA,CAAA,CAlDE,yBDxBJ,iBCsEE,qBAAA,CACA,aAAA,CACA,YDrEa,CCuEb,iDAAA,CAAA,CAxCE,yBDxBJ,wBC4EE,YAAA,CACA,kBAAA,CACA,mBAAA,CACA,YAAA,CAEA,6DAAA,CAEA,yBDnFF,wBCoFI,YAAA,CACA,QAAA,CACA,aDlFW,CCoFX,oDAAA,CACA,gDAAA,CAAA,CAAA,CAtEA,+CDnBJ,wBC4EE,YAAA,CACA,kBAAA,CACA,mBAAA,CACA,WAAA,CAEA,4DAAA,CAEA,yBDnFF,wBCoFI,YAAA,CACA,QAAA,CACA,aDlFW,CCoFX,mDAAA,CACA,+CAAA,CAAA,CAAA,CA3EA,yBDdJ,wBC4EE,YAAA,CACA,kBAAA,CACA,mBAAA,CACA,WAAA,CAEA,2DAAA,CAEA,yBDnFF,wBCoFI,YAAA,CACA,QAAA,CACA,aDlFW,CCoFX,kDAAA,CACA,+CAAA,CAAA,CAAA,CAjEA,yBDbJ,uBCiCE,iCAAA,CAEA,wEAAA,CAsDA,qBAAA,CACA,WAAA,CAEA,0DAAA,CAvDA,yBDrCF,uBCsCI,UAAA,CACA,sBAAA,CAAA,CAuDF,yBD9FF,uBC+FI,QAAA,CAAA,CDlFa,sECoBf,gCAAA,CAEA,uEAAA,CAEA,yBDxBe,sECyBb,UAAA,CACA,sBAAA,CAAA,CD1Ba,sECoBf,iCAAA,CAEA,wEAAA,CAEA,yBDxBe,sECyBb,UAAA,CACA,sBAAA,CAAA,CD1Ba,sECoBf,sBAAA,CAEA,6DAAA,CAEA,yBDxBe,sECyBb,UAAA,CACA,sBAAA,CAAA,CD1Ba,sECoBf,iCAAA,CAEA,wEAAA,CAEA,yBDxBe,sECyBb,UAAA,CACA,sBAAA,CAAA,CD1Ba,sECoBf,iCAAA,CAEA,wEAAA,CAEA,yBDxBe,sECyBb,UAAA,CACA,sBAAA,CAAA,CD1Ba,sECoBf,sBAAA,CAEA,6DAAA,CAEA,yBDxBe,sECyBb,UAAA,CACA,sBAAA,CAAA,CD1Ba,sECoBf,iCAAA,CAEA,wEAAA,CAEA,yBDxBe,sECyBb,UAAA,CACA,sBAAA,CAAA,CD1Ba,sECoBf,iCAAA,CAEA,wEAAA,CAEA,yBDxBe,sECyBb,UAAA,CACA,sBAAA,CAAA,CD1Ba,sECoBf,sBAAA,CAEA,6DAAA,CAEA,yBDxBe,sECyBb,UAAA,CACA,sBAAA,CAAA,CD1Ba,wECoBf,iCAAA,CAEA,wEAAA,CAEA,yBDxBe,wECyBb,UAAA,CACA,uBAAA,CAAA,CD1Ba,wECoBf,iCAAA,CAEA,wEAAA,CAEA,yBDxBe,wECyBb,UAAA,CACA,uBAAA,CAAA,CD1Ba,wECoBf,uBAAA,CAEA,8DAAA,CAEA,yBDxBe,wECyBb,UAAA,CACA,uBAAA,CAAA,CAAA,CA/BA,+CDRJ,uBCiCE,sBAAA,CAEA,4DAAA,CAsDA,qBAAA,CACA,UAAA,CAEA,yDAAA,CAvDA,yBDrCF,uBCsCI,UAAA,CACA,sBAAA,CAAA,CAuDF,yBD9FF,uBC+FI,QAAA,CAAA,CDlFa,qECoBf,wBAAA,CAEA,8DAAA,CAEA,yBDxBe,qECyBb,UAAA,CACA,sBAAA,CAAA,CD1Ba,qECoBf,sBAAA,CAEA,4DAAA,CAEA,yBDxBe,qECyBb,UAAA,CACA,sBAAA,CAAA,CD1Ba,qECoBf,wBAAA,CAEA,8DAAA,CAEA,yBDxBe,qECyBb,UAAA,CACA,sBAAA,CAAA,CD1Ba,qECoBf,sBAAA,CAEA,4DAAA,CAEA,yBDxBe,qECyBb,UAAA,CACA,sBAAA,CAAA,CD1Ba,qECoBf,wBAAA,CAEA,8DAAA,CAEA,yBDxBe,qECyBb,UAAA,CACA,sBAAA,CAAA,CD1Ba,qECoBf,sBAAA,CAEA,4DAAA,CAEA,yBDxBe,qECyBb,UAAA,CACA,sBAAA,CAAA,CD1Ba,qECoBf,wBAAA,CAEA,8DAAA,CAEA,yBDxBe,qECyBb,UAAA,CACA,sBAAA,CAAA,CD1Ba,qECoBf,uBAAA,CAEA,6DAAA,CAEA,yBDxBe,qECyBb,UAAA,CACA,sBAAA,CAAA,CD1Ba,qECoBf,uBAAA,CAEA,6DAAA,CAEA,yBDxBe,qECyBb,UAAA,CACA,sBAAA,CAAA,CD1Ba,uECoBf,uBAAA,CAEA,6DAAA,CAEA,yBDxBe,uECyBb,UAAA,CACA,sBAAA,CAAA,CD1Ba,uECoBf,uBAAA,CAEA,6DAAA,CAEA,yBDxBe,uECyBb,UAAA,CACA,sBAAA,CAAA,CD1Ba,uECoBf,uBAAA,CAEA,6DAAA,CAEA,yBDxBe,uECyBb,UAAA,CACA,sBAAA,CAAA,CAAA,CApCA,yBDHJ,uBCiCE,uBAAA,CAEA,4DAAA,CAsDA,qBAAA,CACA,UAAA,CAEA,wDAAA,CAvDA,yBDrCF,uBCsCI,UAAA,CACA,sBAAA,CAAA,CAuDF,yBD9FF,uBC+FI,QAAA,CAAA,CDlFa,oECoBf,sBAAA,CAEA,2DAAA,CAEA,yBDxBe,oECyBb,UAAA,CACA,sBAAA,CAAA,CD1Ba,oECoBf,sBAAA,CAEA,2DAAA,CAEA,yBDxBe,oECyBb,UAAA,CACA,sBAAA,CAAA,CD1Ba,oECoBf,sBAAA,CAEA,2DAAA,CAEA,yBDxBe,oECyBb,UAAA,CACA,sBAAA,CAAA,CD1Ba,oECoBf,uBAAA,CAEA,4DAAA,CAEA,yBDxBe,oECyBb,UAAA,CACA,sBAAA,CAAA,CD1Ba,oECoBf,uBAAA,CAEA,4DAAA,CAEA,yBDxBe,oECyBb,UAAA,CACA,sBAAA,CAAA,CD1Ba,oECoBf,uBAAA,CAEA,4DAAA,CAEA,yBDxBe,oECyBb,UAAA,CACA,sBAAA,CAAA,CD1Ba,oECoBf,uBAAA,CAEA,4DAAA,CAEA,yBDxBe,oECyBb,UAAA,CACA,sBAAA,CAAA,CD1Ba,oECoBf,uBAAA,CAEA,4DAAA,CAEA,yBDxBe,oECyBb,UAAA,CACA,sBAAA,CAAA,CD1Ba,oECoBf,uBAAA,CAEA,4DAAA,CAEA,yBDxBe,oECyBb,UAAA,CACA,sBAAA,CAAA,CD1Ba,sECoBf,uBAAA,CAEA,4DAAA,CAEA,yBDxBe,sECyBb,UAAA,CACA,sBAAA,CAAA,CD1Ba,sECoBf,uBAAA,CAEA,4DAAA,CAEA,yBDxBe,sECyBb,UAAA,CACA,sBAAA,CAAA,CD1Ba,sECoBf,uBAAA,CAEA,4DAAA,CAEA,yBDxBe,sECyBb,UAAA,CACA,sBAAA,CAAA,CAAA,CDfA,gCC4EF,OD7Ea,CACX,gCC4EF,OD7Ea,CACX,gCC4EF,OD7Ea,CACX,gCC4EF,OD7Ea,CACX,gCC4EF,OD7Ea,CACX,gCC4EF,OD7Ea,CACX,gCC4EF,OD7Ea,CACX,gCC4EF,OD7Ea,CACX,gCC4EF,OD7Ea,CACX,iCC4EF,QD7Ea,CACX,iCC4EF,QD7Ea,CACX,iCC4EF,QD7Ea,CAOb,kCC2EE,qBAAA,CAEA,yBD7EF,kCC8EI,gBAAA,CAAA,CD1EJ,qCC+EE,iBAAA,CD3EF,qCC+EE,mBAAA,CAEA,yBDjFF,qCCkFI,cAAA,CAAA,CA3GF,yBD8BJ,qCC+FE,YAAA,CAEA,iKACE,CAAA,CArIA,+CDmCJ,qCC+FE,WAAA,CAEA,4JACE,CAAA,CA1IA,yBDwCJ,qCC+FE,WAAA,CAEA,yJACE,CAAA,CDtFJ,6BACE,iBAAA,CACA,aAAA,CAGF,8BACE,cAAA,CACA,gBAAA,CEjEA,UhBZE,iBAAA,CP2CA,qBAAA,CAEA,+CAAA,CQoBA,iBAAA,CAZA,kHAoGW,Ce4Ib,YAAA,CACA,qBAAA,CACA,qBAAA,Cf1HA,iCA5FI,UejE2C,CfkE3C,WelE2C,CfqEzC,KAAA,CAEA,MAAA,Ce/DN,oBf6BE,iHAoGW,Ce+GX,gBCpRY,CDqRZ,kBAAA,CAIA,0BAAA,CA5OF,iBAEI,iBAAA,CACA,qBAAA,CACA,2BAAA,CACA,0BAAA,CACA,qBAAA,CAGF,yBAEI,aAAA,CACA,UAAA,CAKN,6BAEI,8BAAA,CACA,+BAAA,CAIJ,4BAEI,iCAAA,CACA,kCAAA,CA4NJ,iCAGI,eAAA,CAHJ,+BAGI,iBAAA,CAnNJ,yBAEI,iBAAA,CACA,KAAA,CACA,OAAA,CACA,QAAA,CACA,MAAA,CACA,qBAAA,CAQJ,0BA8MA,YAAA,CACA,qBAAA,CACA,qBAAA,CA5MI,iBAAA,CACA,YAAA,CACA,aAAA,CACA,oBAAA,CACA,cAAA,CACA,eAAA,CAIJ,sCAEI,8BAAA,CACA,+BAAA,CAIJ,qCAEI,iCAAA,CACA,kCAAA,CAQJ,mBAqLA,YAD+B,CAE/B,kBAAA,CACA,kBAAA,CACA,qBAAA,CApLI,eAAA,CACA,WAAA,CAIJ,+BAEI,SAAA,CAIJ,kDAsKA,YAD+B,CAE/B,kBAAA,CACA,kBAAA,CACA,qBAAA,CAlKA,wBvBxGE,oBAAA,CuB8GE,WAAA,CACA,wBAAA,CAIJ,kDjB6FA,gBAAA,CAAA,cAAA,CA3MI,uHA2MJ,aAAA,CAAA,iBAAA,CiBnFA,kBA0IA,mBAxI6B,CAyI7B,kBAAA,CACA,kBAAA,CACA,qBAAA,CAzII,sBAAA,CACA,cAAA,CACA,wBAAA,CAAA,qBAAA,CAAA,gBAAA,CAGF,wBAEI,YAAA,CASN,0BjB+DA,aAAA,CAAA,gBAAA,CiB3DI,aAAA,CjBhJA,uEA2MJ,eAAA,CAAA,cAAA,CiBxDE,qCjBwDF,aAAA,CAAA,cAAA,CA3MI,6FA2MJ,aAAA,CAAA,cAAA,CiBjDA,yDAEI,6BAAA,CACA,UAAA,CACA,WAAA,CACA,eAAA,CACA,QAAA,CACA,gBAAA,CAEA,eAAA,CjBnKA,qIiByKE,gBAAA,CASN,wBAII,aAAA,CAGA,YAAA,CAIJ,uCvBlME,oBAAA,CuBgNF,0BrBnME,uBAAA,CACA,oBAAA,CACA,mBAAA,CACA,wBAAA,CACA,gCAAA,CACA,kCAAA,CAEA,yCAAA,CAIF,mEAGI,iBAAA,CACA,iBAAA,CACA,SAAA,CACA,mBAAA,CACA,UAAA,CAIJ,kCAGI,2DACE,CAKF,SAAA,CAOF,sDAEI,8CAAA,CAIJ,qDAEI,KAAA,CAEA,MAAA,CACA,kBAAA,CACA,8BAAA,CAMJ,gEAEI,4BAAA,CAEA,8BAAA,CAMJ,4EAEI,uFACE,CAON,8EAEI,yCAAA,CAKA,+FAAA,CA2NN,mEAGI,oBAAA,CAEA,qBAAA,CACA,UAAA,CACA,WAAA,CAKF,qDAEI,qCAAA,CACA,sCAAA,CAhON,mEF1GE,qBAAA,CEmJA,wCAGI,WArB0B,CAuD5B,4IAeF,wBAAA,CAIA,WAtE8B,CAkF9B,2DAEI,+BAAA,CAKF,kEAEI,wBCtRS,CD2RT,WA5FwB,CAkGhC,8CAEI,6BAAA,CmBhSN,MAEI,sCAAA,CACA,sCAAA,CACA,4CAAA,CAFA,qCAAA,CACA,qCAAA,CACA,2CAAA,CAFA,oCAAA,CACA,oCAAA,CACA,0CAAA,CCuCA,yBDlCJ,iBCsEE,qBAAA,CACA,aAAA,CACA,YDrEa,CCuEb,mDAAA,CAAA,CA7CE,+CD7BJ,iBCsEE,qBAAA,CACA,aAAA,CACA,YDrEa,CCuEb,kDAAA,CAAA,CAlDE,yBDxBJ,iBCsEE,qBAAA,CACA,aAAA,CACA,YDrEa,CCuEb,iDAAA,CAAA,CAxCE,yBDxBJ,wBC4EE,YAAA,CACA,kBAAA,CACA,mBAAA,CACA,YAAA,CAEA,6DAAA,CAEA,yBDnFF,wBCoFI,YAAA,CACA,QAAA,CACA,aDlFW,CCoFX,oDAAA,CACA,gDAAA,CAAA,CAAA,CAtEA,+CDnBJ,wBC4EE,YAAA,CACA,kBAAA,CACA,mBAAA,CACA,WAAA,CAEA,4DAAA,CAEA,yBDnFF,wBCoFI,YAAA,CACA,QAAA,CACA,aDlFW,CCoFX,mDAAA,CACA,+CAAA,CAAA,CAAA,CA3EA,yBDdJ,wBC4EE,YAAA,CACA,kBAAA,CACA,mBAAA,CACA,WAAA,CAEA,2DAAA,CAEA,yBDnFF,wBCoFI,YAAA,CACA,QAAA,CACA,aDlFW,CCoFX,kDAAA,CACA,+CAAA,CAAA,CAAA,CAjEA,yBDbJ,uBCiCE,iCAAA,CAEA,wEAAA,CAsDA,qBAAA,CACA,WAAA,CAEA,0DAAA,CAvDA,yBDrCF,uBCsCI,UAAA,CACA,sBAAA,CAAA,CAuDF,yBD9FF,uBC+FI,QAAA,CAAA,CDlFa,sECoBf,gCAAA,CAEA,uEAAA,CAEA,yBDxBe,sECyBb,UAAA,CACA,sBAAA,CAAA,CD1Ba,sECoBf,iCAAA,CAEA,wEAAA,CAEA,yBDxBe,sECyBb,UAAA,CACA,sBAAA,CAAA,CD1Ba,sECoBf,sBAAA,CAEA,6DAAA,CAEA,yBDxBe,sECyBb,UAAA,CACA,sBAAA,CAAA,CD1Ba,sECoBf,iCAAA,CAEA,wEAAA,CAEA,yBDxBe,sECyBb,UAAA,CACA,sBAAA,CAAA,CD1Ba,sECoBf,iCAAA,CAEA,wEAAA,CAEA,yBDxBe,sECyBb,UAAA,CACA,sBAAA,CAAA,CD1Ba,sECoBf,sBAAA,CAEA,6DAAA,CAEA,yBDxBe,sECyBb,UAAA,CACA,sBAAA,CAAA,CD1Ba,sECoBf,iCAAA,CAEA,wEAAA,CAEA,yBDxBe,sECyBb,UAAA,CACA,sBAAA,CAAA,CD1Ba,sECoBf,iCAAA,CAEA,wEAAA,CAEA,yBDxBe,sECyBb,UAAA,CACA,sBAAA,CAAA,CD1Ba,sECoBf,sBAAA,CAEA,6DAAA,CAEA,yBDxBe,sECyBb,UAAA,CACA,sBAAA,CAAA,CD1Ba,wECoBf,iCAAA,CAEA,wEAAA,CAEA,yBDxBe,wECyBb,UAAA,CACA,uBAAA,CAAA,CD1Ba,wECoBf,iCAAA,CAEA,wEAAA,CAEA,yBDxBe,wECyBb,UAAA,CACA,uBAAA,CAAA,CD1Ba,wECoBf,uBAAA,CAEA,8DAAA,CAEA,yBDxBe,wECyBb,UAAA,CACA,uBAAA,CAAA,CAAA,CA/BA,+CDRJ,uBCiCE,sBAAA,CAEA,4DAAA,CAsDA,qBAAA,CACA,UAAA,CAEA,yDAAA,CAvDA,yBDrCF,uBCsCI,UAAA,CACA,sBAAA,CAAA,CAuDF,yBD9FF,uBC+FI,QAAA,CAAA,CDlFa,qECoBf,wBAAA,CAEA,8DAAA,CAEA,yBDxBe,qECyBb,UAAA,CACA,sBAAA,CAAA,CD1Ba,qECoBf,sBAAA,CAEA,4DAAA,CAEA,yBDxBe,qECyBb,UAAA,CACA,sBAAA,CAAA,CD1Ba,qECoBf,wBAAA,CAEA,8DAAA,CAEA,yBDxBe,qECyBb,UAAA,CACA,sBAAA,CAAA,CD1Ba,qECoBf,sBAAA,CAEA,4DAAA,CAEA,yBDxBe,qECyBb,UAAA,CACA,sBAAA,CAAA,CD1Ba,qECoBf,wBAAA,CAEA,8DAAA,CAEA,yBDxBe,qECyBb,UAAA,CACA,sBAAA,CAAA,CD1Ba,qECoBf,sBAAA,CAEA,4DAAA,CAEA,yBDxBe,qECyBb,UAAA,CACA,sBAAA,CAAA,CD1Ba,qECoBf,wBAAA,CAEA,8DAAA,CAEA,yBDxBe,qECyBb,UAAA,CACA,sBAAA,CAAA,CD1Ba,qECoBf,uBAAA,CAEA,6DAAA,CAEA,yBDxBe,qECyBb,UAAA,CACA,sBAAA,CAAA,CD1Ba,qECoBf,uBAAA,CAEA,6DAAA,CAEA,yBDxBe,qECyBb,UAAA,CACA,sBAAA,CAAA,CD1Ba,uECoBf,uBAAA,CAEA,6DAAA,CAEA,yBDxBe,uECyBb,UAAA,CACA,sBAAA,CAAA,CD1Ba,uECoBf,uBAAA,CAEA,6DAAA,CAEA,yBDxBe,uECyBb,UAAA,CACA,sBAAA,CAAA,CD1Ba,uECoBf,uBAAA,CAEA,6DAAA,CAEA,yBDxBe,uECyBb,UAAA,CACA,sBAAA,CAAA,CAAA,CApCA,yBDHJ,uBCiCE,uBAAA,CAEA,4DAAA,CAsDA,qBAAA,CACA,UAAA,CAEA,wDAAA,CAvDA,yBDrCF,uBCsCI,UAAA,CACA,sBAAA,CAAA,CAuDF,yBD9FF,uBC+FI,QAAA,CAAA,CDlFa,oECoBf,sBAAA,CAEA,2DAAA,CAEA,yBDxBe,oECyBb,UAAA,CACA,sBAAA,CAAA,CD1Ba,oECoBf,sBAAA,CAEA,2DAAA,CAEA,yBDxBe,oECyBb,UAAA,CACA,sBAAA,CAAA,CD1Ba,oECoBf,sBAAA,CAEA,2DAAA,CAEA,yBDxBe,oECyBb,UAAA,CACA,sBAAA,CAAA,CD1Ba,oECoBf,uBAAA,CAEA,4DAAA,CAEA,yBDxBe,oECyBb,UAAA,CACA,sBAAA,CAAA,CD1Ba,oECoBf,uBAAA,CAEA,4DAAA,CAEA,yBDxBe,oECyBb,UAAA,CACA,sBAAA,CAAA,CD1Ba,oECoBf,uBAAA,CAEA,4DAAA,CAEA,yBDxBe,oECyBb,UAAA,CACA,sBAAA,CAAA,CD1Ba,oECoBf,uBAAA,CAEA,4DAAA,CAEA,yBDxBe,oECyBb,UAAA,CACA,sBAAA,CAAA,CD1Ba,oECoBf,uBAAA,CAEA,4DAAA,CAEA,yBDxBe,oECyBb,UAAA,CACA,sBAAA,CAAA,CD1Ba,oECoBf,uBAAA,CAEA,4DAAA,CAEA,yBDxBe,oECyBb,UAAA,CACA,sBAAA,CAAA,CD1Ba,sECoBf,uBAAA,CAEA,4DAAA,CAEA,yBDxBe,sECyBb,UAAA,CACA,sBAAA,CAAA,CD1Ba,sECoBf,uBAAA,CAEA,4DAAA,CAEA,yBDxBe,sECyBb,UAAA,CACA,sBAAA,CAAA,CD1Ba,sECoBf,uBAAA,CAEA,4DAAA,CAEA,yBDxBe,sECyBb,UAAA,CACA,sBAAA,CAAA,CAAA,CDfA,gCC4EF,OD7Ea,CACX,gCC4EF,OD7Ea,CACX,gCC4EF,OD7Ea,CACX,gCC4EF,OD7Ea,CACX,gCC4EF,OD7Ea,CACX,gCC4EF,OD7Ea,CACX,gCC4EF,OD7Ea,CACX,gCC4EF,OD7Ea,CACX,gCC4EF,OD7Ea,CACX,iCC4EF,QD7Ea,CACX,iCC4EF,QD7Ea,CACX,iCC4EF,QD7Ea,CAOb,kCC2EE,qBAAA,CAEA,yBD7EF,kCC8EI,gBAAA,CAAA,CD1EJ,qCC+EE,iBAAA,CD3EF,qCC+EE,mBAAA,CAEA,yBDjFF,qCCkFI,cAAA,CAAA,CA3GF,yBD8BJ,qCC+FE,YAAA,CAEA,iKACE,CAAA,CArIA,+CDmCJ,qCC+FE,WAAA,CAEA,4JACE,CAAA,CA1IA,yBDwCJ,qCC+FE,WAAA,CAEA,yJACE,CAAA,CDtFJ,6BACE,iBAAA,CACA,aAAA,CAGF,8BACE,cAAA,CACA,gBAAA,CIvGF,iBACE,kBAAA,CAGF,UACE,kBAAA,CAGF,KACE,QAAA,CACA,kBAAA,CAGF,YACE,oBAAA,CAGF,wBACE,SAAA,CACA,aAAA,CAGF,qBACE,UArCkB,CAsClB,kBAAA,CAGF,cACE,gBAAA,CAGF,SACE,iBAAA,CAIF,iBACE,UAnDkB,CAoDlB,SAAA,CAGF,kGAEE,UAAA,CAGF,kBACE,aAAA,CAEA,YAAA,CACA,QAAA,CAGF,WACE,4BAAA,CACA,2DAAA","sourcesContent":["//\\n// Copyright 2018 Google Inc.\\n//\\n// Permission is hereby granted, free of charge, to any person obtaining a copy\\n// of this software and associated documentation files (the \\"Software\\"), to deal\\n// in the Software without restriction, including without limitation the rights\\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n// copies of the Software, and to permit persons to whom the Software is\\n// furnished to do so, subject to the following conditions:\\n//\\n// The above copyright notice and this permission notice shall be included in\\n// all copies or substantial portions of the Software.\\n//\\n// THE SOFTWARE IS PROVIDED \\"AS IS\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\\n// THE SOFTWARE.\\n//\\n\\n@use \\"@material/elevation/mixins\\" as elevation-mixins;\\n@use \\"@material/animation/variables\\" as animation-variables;\\n@use \\"@material/rtl/mixins\\" as rtl-mixins;\\n@use \\"@material/typography/mixins\\" as typography-mixins;\\n@use \\"./mixins\\";\\n@use \\"./variables\\";\\n\\n// postcss-bem-linter: define top-app-bar\\n.mdc-top-app-bar {\\n  @include mixins.fill-color-accessible(primary);\\n  @include mixins.icon-ink-color(on-primary);\\n\\n  display: flex;\\n  position: fixed;\\n  flex-direction: column;\\n  justify-content: space-between;\\n  box-sizing: border-box;\\n  width: 100%;\\n  z-index: 4;\\n\\n  &__row {\\n    display: flex;\\n    position: relative;\\n    box-sizing: border-box;\\n    width: 100%;\\n    height: variables.$row-height;\\n  }\\n\\n  &__section {\\n    display: inline-flex;\\n    flex: 1 1 auto;\\n    align-items: center;\\n    min-width: 0;\\n    padding: variables.$section-vertical-padding variables.$section-horizontal-padding;\\n    z-index: 1;\\n\\n    &--align-start {\\n      justify-content: flex-start;\\n      order: -1;\\n    }\\n\\n    &--align-end {\\n      justify-content: flex-end;\\n      order: 1;\\n    }\\n  }\\n\\n  &__title {\\n    @include typography-mixins.typography(headline6);\\n    @include rtl-mixins.reflexive-box(padding, left, variables.$title-left-padding);\\n\\n    text-overflow: ellipsis;\\n    white-space: nowrap;\\n    overflow: hidden;\\n    z-index: 1;\\n  }\\n}\\n\\n@at-root {\\n  @include mixins.short-shape-radius(24px);\\n}\\n\\n.mdc-top-app-bar--short {\\n  top: 0;\\n  /* @noflip */\\n  right: auto;\\n  /* @noflip */\\n  left: 0;\\n  width: 100%;\\n  transition: width 250ms animation-variables.$standard-curve-timing-function;\\n\\n  @include rtl-mixins.rtl {\\n    /* @noflip */\\n    right: 0;\\n    /* @noflip */\\n    left: auto;\\n  }\\n\\n  .mdc-top-app-bar__row {\\n    height: variables.$mobile-row-height;\\n  }\\n\\n  .mdc-top-app-bar__section {\\n    padding: variables.$mobile-section-padding;\\n  }\\n\\n  .mdc-top-app-bar__title {\\n    transition: opacity 200ms animation-variables.$standard-curve-timing-function;\\n    opacity: 1;\\n  }\\n}\\n\\n.mdc-top-app-bar--short-collapsed {\\n  @include elevation-mixins.elevation(4);\\n\\n  width: variables.$short-collapsed-width;\\n  transition: width 300ms animation-variables.$standard-curve-timing-function;\\n\\n  .mdc-top-app-bar__title {\\n    display: none;\\n  }\\n\\n  .mdc-top-app-bar__action-item {\\n    transition: padding 150ms animation-variables.$standard-curve-timing-function;\\n  }\\n}\\n\\n// stylelint-disable-next-line plugin/selector-bem-pattern\\n.mdc-top-app-bar--short-collapsed.mdc-top-app-bar--short-has-action-item {\\n  width: variables.$short-collapsed-width * 2;\\n\\n  .mdc-top-app-bar__section--align-end {\\n    @include rtl-mixins.reflexive-box(padding, right, 12px);\\n  }\\n}\\n\\n.mdc-top-app-bar--dense {\\n  .mdc-top-app-bar__row {\\n    height: variables.$dense-row-height;\\n  }\\n\\n  .mdc-top-app-bar__section {\\n    padding: 0 variables.$dense-section-horizontal-padding;\\n  }\\n\\n  .mdc-top-app-bar__title {\\n    @include rtl-mixins.reflexive-box(padding, left, variables.$dense-title-left-padding);\\n  }\\n}\\n\\n.mdc-top-app-bar--prominent {\\n  .mdc-top-app-bar__row {\\n    height: variables.$prominent-row-height;\\n  }\\n\\n  .mdc-top-app-bar__title {\\n    align-self: flex-end;\\n    padding-bottom: variables.$prominent-title-bottom-padding;\\n  }\\n\\n  .mdc-top-app-bar__action-item,\\n  .mdc-top-app-bar__navigation-icon {\\n    align-self: flex-start;\\n  }\\n}\\n\\n// stylelint-disable-next-line plugin/selector-bem-pattern\\n.mdc-top-app-bar--fixed {\\n  transition: box-shadow 200ms linear;\\n}\\n\\n.mdc-top-app-bar--fixed-scrolled {\\n  @include elevation-mixins.elevation(4);\\n\\n  transition: box-shadow 200ms linear;\\n}\\n\\n// Specific styles for dense and prominent styled top app bar\\n// stylelint-disable plugin/selector-bem-pattern\\n.mdc-top-app-bar--dense.mdc-top-app-bar--prominent {\\n  .mdc-top-app-bar__row {\\n    height: variables.$dense-row-height * 2;\\n  }\\n\\n  .mdc-top-app-bar__section {\\n    padding: 0 variables.$section-horizontal-padding;\\n  }\\n\\n  .mdc-top-app-bar__title {\\n    @include rtl-mixins.reflexive-box(padding, left, variables.$title-left-padding);\\n\\n    padding-bottom: variables.$dense-prominent-title-bottom-padding;\\n  }\\n}\\n// stylelint-enable plugin/selector-bem-pattern\\n\\n.mdc-top-app-bar--fixed-adjust {\\n  padding-top: variables.$row-height;\\n}\\n\\n.mdc-top-app-bar--dense-fixed-adjust {\\n  padding-top: variables.$dense-row-height;\\n}\\n\\n.mdc-top-app-bar--short-fixed-adjust {\\n  padding-top: variables.$mobile-row-height;\\n}\\n\\n.mdc-top-app-bar--prominent-fixed-adjust {\\n  padding-top: variables.$prominent-row-height;\\n}\\n\\n.mdc-top-app-bar--dense-prominent-fixed-adjust {\\n  padding-top: variables.$dense-row-height * 2;\\n}\\n\\n// Mobile Styles\\n@include mixins.mobile-breakpoint_;\\n","//\\n// Copyright 2017 Google Inc.\\n//\\n// Permission is hereby granted, free of charge, to any person obtaining a copy\\n// of this software and associated documentation files (the \\"Software\\"), to deal\\n// in the Software without restriction, including without limitation the rights\\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n// copies of the Software, and to permit persons to whom the Software is\\n// furnished to do so, subject to the following conditions:\\n//\\n// The above copyright notice and this permission notice shall be included in\\n// all copies or substantial portions of the Software.\\n//\\n// THE SOFTWARE IS PROVIDED \\"AS IS\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\\n// THE SOFTWARE.\\n//\\n\\n@use \\"sass:map\\";\\n@use \\"@material/feature-targeting/functions\\" as feature-targeting-functions;\\n@use \\"@material/feature-targeting/mixins\\";\\n@use \\"./variables\\";\\n@use \\"./functions\\";\\n\\n@mixin core-styles($query: feature-targeting-functions.all()) {\\n  $feat-color: feature-targeting-functions.create-target($query, color);\\n\\n  :root {\\n    @include mixins.targets($feat-color) {\\n      @each $style in map.keys(variables.$property-values) {\\n        --mdc-theme-#{$style}: #{map.get(variables.$property-values, $style)};\\n      }\\n    }\\n  }\\n\\n  @each $style in map.keys(variables.$property-values) {\\n    @if $style != \\"background\\" and $style != \\"surface\\" {\\n      .mdc-theme--#{$style} {\\n        @include mixins.targets($feat-color) {\\n          @include prop(color, $style, true);\\n        }\\n      }\\n    } @else {\\n      .mdc-theme--#{$style} {\\n        @include mixins.targets($feat-color) {\\n          @include prop(background-color, $style);\\n        }\\n      }\\n    }\\n  }\\n\\n  // CSS rules for using primary and secondary (plus light/dark variants) as background colors.\\n  @each $style in (\\"primary\\", \\"secondary\\") {\\n    .mdc-theme--#{$style}-bg {\\n      @include mixins.targets($feat-color) {\\n        @include prop(background-color, $style, true);\\n      }\\n    }\\n  }\\n}\\n\\n// Applies the correct theme color style to the specified property.\\n// $property is typically color or background-color, but can be any CSS property that accepts color values.\\n// $style should be one of the map keys in $mdc-theme-property-values (_variables.scss), or a color value.\\n@mixin prop($property, $style, $important: false) {\\n  $important-rule: if($important, \\"!important\\", \\"\\");\\n\\n  @if functions.is-var-with-fallback_($style) {\\n    #{$property}: functions.get-var-fallback_($style) #{$important-rule};\\n    /* @alternate */\\n    #{$property}: functions.var_($style) #{$important-rule};\\n  } @else if variables.is-valid-theme-prop-value_($style) {\\n    #{$property}: $style #{$important-rule};\\n  } @else {\\n    @if not map.has-key(variables.$property-values, $style) {\\n      @error \\"Invalid style: \'#{$style}\'. Choose one of: #{map.keys(variables.$property-values)}\\";\\n    }\\n    $value: map.get(variables.$property-values, $style);\\n\\n    #{$property}: $value #{$important-rule};\\n    /* @alternate */\\n    #{$property}: var(--mdc-theme-#{$style}, $value) #{$important-rule};\\n  }\\n}\\n","//\\n// Copyright 2018 Google Inc.\\n//\\n// Permission is hereby granted, free of charge, to any person obtaining a copy\\n// of this software and associated documentation files (the \\"Software\\"), to deal\\n// in the Software without restriction, including without limitation the rights\\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n// copies of the Software, and to permit persons to whom the Software is\\n// furnished to do so, subject to the following conditions:\\n//\\n// The above copyright notice and this permission notice shall be included in\\n// all copies or substantial portions of the Software.\\n//\\n// THE SOFTWARE IS PROVIDED \\"AS IS\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\\n// THE SOFTWARE.\\n//\\n\\n@use \\"sass:list\\";\\n@use \\"@material/animation/variables\\" as animation-variables;\\n@use \\"@material/ripple/mixins\\" as ripple-mixins;\\n@use \\"@material/theme/variables\\" as theme-variables; // for mdc-theme-accessible-ink-color\\n@use \\"@material/theme/mixins\\" as theme-mixins;\\n@use \\"@material/shape/mixins\\" as shape-mixins;\\n@use \\"@material/shape/functions\\";\\n@use \\"./variables\\";\\n@use \\"@material/rtl/mixins\\" as rtl-mixins;\\n\\n//\\n// Public\\n//\\n\\n@mixin ink-color($color) {\\n  @include theme-mixins.prop(color, $color);\\n}\\n\\n@mixin fill-color($color) {\\n  @include theme-mixins.prop(background-color, $color);\\n}\\n\\n@mixin fill-color-accessible($color) {\\n  @include fill-color($color);\\n  @include ink-color(theme-variables.accessible-ink-color($color));\\n}\\n\\n@mixin icon-ink-color($color) {\\n  .mdc-top-app-bar__action-item,\\n  .mdc-top-app-bar__navigation-icon {\\n    @include theme-mixins.prop(color, $color);\\n    @include ripple-mixins.states($color);\\n  }\\n}\\n\\n@mixin short-shape-radius($radius, $rtl-reflexive: true) {\\n  @if list.length($radius) > 1 {\\n    @error \\"Invalid radius: \'#{$radius}\' component doesn\'t allow customizing all corners\\";\\n  }\\n\\n  $radius: 0 0 $radius 0;\\n\\n  $selector: if(&, \\"&.mdc-top-app-bar--short-collapsed\\", \\".mdc-top-app-bar--short-collapsed\\");\\n\\n  #{$selector} {\\n    @include shape-mixins.radius(\\n      functions.resolve-percentage-radius(variables.$dense-row-height, $radius),\\n      $rtl-reflexive\\n    );\\n  }\\n}\\n\\n//\\n// Private\\n//\\n\\n@mixin mobile-breakpoint_($mobile-breakpoint: variables.$mobile-breakpoint) {\\n  @media (max-width: $mobile-breakpoint) {\\n    .mdc-top-app-bar__row {\\n      height: variables.$mobile-row-height;\\n    }\\n\\n    .mdc-top-app-bar__section {\\n      padding: variables.$mobile-section-padding;\\n    }\\n\\n    .mdc-top-app-bar--short {\\n      transition: width 200ms animation-variables.$standard-curve-timing-function;\\n    }\\n\\n    .mdc-top-app-bar--short-collapsed {\\n      transition: width 250ms animation-variables.$standard-curve-timing-function;\\n\\n      .mdc-top-app-bar__section--align-end {\\n        @include rtl-mixins.reflexive-box(padding, right, variables.$short-collapsed-right-icon-padding);\\n      }\\n    }\\n\\n    .mdc-top-app-bar--prominent {\\n      .mdc-top-app-bar__title {\\n        padding-bottom: variables.$prominent-mobile-title-bottom-padding;\\n      }\\n    }\\n\\n    .mdc-top-app-bar--fixed-adjust {\\n      padding-top: variables.$mobile-row-height;\\n    }\\n  }\\n}\\n","//\\n// Copyright 2016 Google Inc.\\n//\\n// Permission is hereby granted, free of charge, to any person obtaining a copy\\n// of this software and associated documentation files (the \\"Software\\"), to deal\\n// in the Software without restriction, including without limitation the rights\\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n// copies of the Software, and to permit persons to whom the Software is\\n// furnished to do so, subject to the following conditions:\\n//\\n// The above copyright notice and this permission notice shall be included in\\n// all copies or substantial portions of the Software.\\n//\\n// THE SOFTWARE IS PROVIDED \\"AS IS\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\\n// THE SOFTWARE.\\n//\\n\\n@use \\"sass:color\\";\\n@use \\"sass:map\\";\\n@use \\"@material/animation/functions\\" as functions2;\\n@use \\"@material/animation/variables\\" as variables2;\\n@use \\"@material/base/mixins\\" as base-mixins;\\n@use \\"@material/feature-targeting/functions\\" as feature-targeting-functions;\\n@use \\"@material/feature-targeting/mixins\\" as feature-targeting-mixins;\\n@use \\"@material/theme/mixins\\" as theme-mixins;\\n@use \\"./functions\\";\\n@use \\"./keyframes\\";\\n@use \\"./variables\\";\\n@use \\"@material/theme/variables\\" as theme-variables;\\n\\n@mixin core-styles($query: feature-targeting-functions.all()) {\\n  // postcss-bem-linter: define ripple-surface\\n\\n  $feat-structure: feature-targeting-functions.create-target($query, structure);\\n\\n  .mdc-ripple-surface {\\n    @include surface($query: $query);\\n    @include states($query: $query);\\n    @include radius-bounded($query: $query);\\n\\n    @include feature-targeting-mixins.targets($feat-structure) {\\n      position: relative;\\n      outline: none;\\n      overflow: hidden;\\n    }\\n\\n    &[data-mdc-ripple-is-unbounded] {\\n      @include radius-unbounded($query: $query);\\n\\n      @include feature-targeting-mixins.targets($feat-structure) {\\n        overflow: visible;\\n      }\\n    }\\n\\n    &--primary {\\n      @include states(primary, $query: $query);\\n    }\\n\\n    &--accent {\\n      @include states(secondary, $query: $query);\\n    }\\n  }\\n\\n  // postcss-bem-linter: end\\n}\\n\\n@mixin common($query: feature-targeting-functions.all()) {\\n  $feat-animation: feature-targeting-functions.create-target($query, animation);\\n\\n  // Ensure that styles needed by any component using MDC Ripple are emitted, but only once.\\n  // (Every component using MDC Ripple imports these mixins, but doesn\'t necessarily import\\n  // mdc-ripple.scss.)\\n  @include feature-targeting-mixins.targets($feat-animation) {\\n    @include base-mixins.emit-once(\\"mdc-ripple/common/animation\\") {\\n      @include keyframes.keyframes_;\\n    }\\n  }\\n}\\n\\n@mixin surface($query: feature-targeting-functions.all(), $ripple-target: \\"&\\") {\\n  $feat-animation: feature-targeting-functions.create-target($query, animation);\\n  $feat-structure: feature-targeting-functions.create-target($query, structure);\\n\\n  @include feature-targeting-mixins.targets($feat-structure) {\\n    --mdc-ripple-fg-size: 0;\\n    --mdc-ripple-left: 0;\\n    --mdc-ripple-top: 0;\\n    --mdc-ripple-fg-scale: 1;\\n    --mdc-ripple-fg-translate-end: 0;\\n    --mdc-ripple-fg-translate-start: 0;\\n\\n    -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\\n    // !!DO NOT REMOVE!! mdc-ripple-will-change-replacer\\n  }\\n\\n  #{$ripple-target}::before,\\n  #{$ripple-target}::after {\\n    @include feature-targeting-mixins.targets($feat-structure) {\\n      position: absolute;\\n      border-radius: 50%;\\n      opacity: 0;\\n      pointer-events: none;\\n      content: \\"\\";\\n    }\\n  }\\n\\n  #{$ripple-target}::before {\\n    @include feature-targeting-mixins.targets($feat-animation) {\\n      // Also transition background-color to avoid unnatural color flashes when toggling activated/selected state\\n      transition:\\n        opacity variables.$states-wash-duration linear,\\n        background-color variables.$states-wash-duration linear;\\n    }\\n\\n    @include feature-targeting-mixins.targets($feat-structure) {\\n      z-index: 1; // Ensure that the ripple wash for hover/focus states is displayed on top of positioned child elements\\n    }\\n  }\\n\\n  // Common styles for upgraded surfaces (some of these depend on custom properties set via JS or other mixins)\\n\\n  &.mdc-ripple-upgraded {\\n    #{$ripple-target}::before {\\n      @include feature-targeting-mixins.targets($feat-structure) {\\n        transform: scale(var(--mdc-ripple-fg-scale, 1));\\n      }\\n    }\\n\\n    #{$ripple-target}::after {\\n      @include feature-targeting-mixins.targets($feat-structure) {\\n        top: 0;\\n        /* @noflip */\\n        left: 0;\\n        transform: scale(0);\\n        transform-origin: center center;\\n      }\\n    }\\n  }\\n\\n  &.mdc-ripple-upgraded--unbounded {\\n    #{$ripple-target}::after {\\n      @include feature-targeting-mixins.targets($feat-structure) {\\n        top: var(--mdc-ripple-top, 0);\\n        /* @noflip */\\n        left: var(--mdc-ripple-left, 0);\\n      }\\n    }\\n  }\\n\\n  &.mdc-ripple-upgraded--foreground-activation {\\n    #{$ripple-target}::after {\\n      @include feature-targeting-mixins.targets($feat-animation) {\\n        animation:\\n          mdc-ripple-fg-radius-in variables.$translate-duration forwards,\\n          mdc-ripple-fg-opacity-in variables.$fade-in-duration forwards;\\n      }\\n    }\\n  }\\n\\n  &.mdc-ripple-upgraded--foreground-deactivation {\\n    #{$ripple-target}::after {\\n      @include feature-targeting-mixins.targets($feat-animation) {\\n        animation: mdc-ripple-fg-opacity-out variables.$fade-out-duration;\\n      }\\n\\n      @include feature-targeting-mixins.targets($feat-structure) {\\n        // Retain transform from mdc-ripple-fg-radius-in activation\\n        transform: translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1));\\n      }\\n    }\\n  }\\n}\\n\\n@mixin states-base-color(\\n  $color, $query: feature-targeting-functions.all(), $ripple-target: \\"&\\") {\\n  $feat-color: feature-targeting-functions.create-target($query, color);\\n\\n  #{$ripple-target}::before,\\n  #{$ripple-target}::after {\\n    @include feature-targeting-mixins.targets($feat-color) {\\n      @if color.alpha(theme-variables.prop-value($color)) > 0 {\\n        @include theme-mixins.prop(background-color, $color);\\n      } @else {\\n        // If a color with 0 alpha is specified, don\'t render the ripple pseudo-elements at all.\\n        // This avoids unnecessary transitions and overflow.\\n        content: none;\\n      }\\n    }\\n  }\\n}\\n\\n///\\n/// Customizes ripple opacities in `hover`, `focus`, or `press` states\\n/// @param {map} $opacity-map - map specifying custom opacity of zero or more states\\n/// @param {bool} $has-nested-focusable-element - whether the component contains a focusable element in the root\\n/// @param {string} $ripple-target - the optional selector for the ripple element\\n///\\n@mixin states-opacities($opacity-map: (), $has-nested-focusable-element: false, $ripple-target: \\"&\\", $query: feature-targeting-functions.all()) {\\n  // Ensure sufficient specificity to override base state opacities\\n  @if map.has-key($opacity-map, hover) {\\n    @include states-hover-opacity(map.get($opacity-map, hover), $ripple-target: $ripple-target, $query: $query);\\n  }\\n\\n  @if map.has-key($opacity-map, focus) {\\n    @include states-focus-opacity(map.get($opacity-map, focus), $ripple-target: $ripple-target, $has-nested-focusable-element: $has-nested-focusable-element, $query: $query);\\n  }\\n\\n  @if map.has-key($opacity-map, press) {\\n    @include states-press-opacity(map.get($opacity-map, press), $ripple-target: $ripple-target, $query: $query);\\n  }\\n}\\n\\n@mixin states-hover-opacity(\\n  $opacity, $query: feature-targeting-functions.all(), $ripple-target: \\"&\\") {\\n  $feat-color: feature-targeting-functions.create-target($query, color);\\n\\n  // Background wash styles, for both CSS-only and upgraded stateful surfaces\\n  &:hover {\\n    #{$ripple-target}::before {\\n      // Opacity falls under color because the chosen opacity is color-dependent in typical usage\\n      @include feature-targeting-mixins.targets($feat-color) {\\n        opacity: $opacity;\\n      }\\n    }\\n  }\\n}\\n\\n@mixin states-focus-opacity(\\n  $opacity,\\n  $has-nested-focusable-element: false,\\n  $query: feature-targeting-functions.all(),\\n  $ripple-target: \\"&\\") {\\n\\n  // Focus overrides hover by reusing the ::before pseudo-element.\\n  // :focus-within generally works on non-MS browsers and matches when a *child* of the element has focus.\\n  // It is useful for cases where a component has a focusable element within the root node, e.g. text field,\\n  // but undesirable in general in case of nested stateful components.\\n  // We use a modifier class for JS-enabled surfaces to support all use cases in all browsers.\\n  @if $has-nested-focusable-element {\\n    // JS-enabled selectors.\\n    &.mdc-ripple-upgraded--background-focused,\\n    &.mdc-ripple-upgraded:focus-within,\\n    // CSS-only selectors.\\n    &:not(.mdc-ripple-upgraded):focus,\\n    &:not(.mdc-ripple-upgraded):focus-within {\\n      #{$ripple-target}::before {\\n        @include states-focus-opacity-properties_(\\n          $opacity: $opacity, $query: $query);\\n      }\\n    }\\n  } @else {\\n    // JS-enabled selectors.\\n    &.mdc-ripple-upgraded--background-focused,\\n    // CSS-only selectors.\\n    &:not(.mdc-ripple-upgraded):focus {\\n      #{$ripple-target}::before {\\n        @include states-focus-opacity-properties_(\\n          $opacity: $opacity, $query: $query);\\n      }\\n    }\\n  }\\n}\\n\\n@mixin states-focus-opacity-properties_($opacity, $query) {\\n  $feat-animation: feature-targeting-functions.create-target($query, animation);\\n  // Opacity falls under color because the chosen opacity is color-dependent in typical usage\\n  $feat-color: feature-targeting-functions.create-target($query, color);\\n\\n  // Note that this duration is only effective on focus, not blur\\n  @include feature-targeting-mixins.targets($feat-animation) {\\n    transition-duration: 75ms;\\n  }\\n\\n  @include feature-targeting-mixins.targets($feat-color) {\\n    opacity: $opacity;\\n  }\\n}\\n\\n@mixin states-press-opacity($opacity, $query: feature-targeting-functions.all(), $ripple-target: \\"&\\") {\\n  $feat-animation: feature-targeting-functions.create-target($query, animation);\\n  $feat-color: feature-targeting-functions.create-target($query, color);\\n\\n  // Styles for non-upgraded (CSS-only) stateful surfaces\\n\\n  &:not(.mdc-ripple-upgraded) {\\n    // Apply press additively by using the ::after pseudo-element\\n    #{$ripple-target}::after {\\n      @include feature-targeting-mixins.targets($feat-animation) {\\n        transition: opacity variables.$fade-out-duration linear;\\n      }\\n    }\\n\\n    &:active {\\n      #{$ripple-target}::after {\\n        @include feature-targeting-mixins.targets($feat-animation) {\\n          transition-duration: variables.$fade-in-duration;\\n        }\\n\\n        // Opacity falls under color because the chosen opacity is color-dependent in typical usage\\n        @include feature-targeting-mixins.targets($feat-color) {\\n          opacity: $opacity;\\n        }\\n      }\\n    }\\n  }\\n\\n  &.mdc-ripple-upgraded {\\n    @include feature-targeting-mixins.targets($feat-color) {\\n      --mdc-ripple-fg-opacity: #{$opacity};\\n    }\\n  }\\n}\\n\\n// Simple mixin for base states which automatically selects opacity values based on whether the ink color is\\n// light or dark.\\n@mixin states(\\n  $color: theme-variables.prop-value(on-surface),\\n  $has-nested-focusable-element: false,\\n  $query: feature-targeting-functions.all(),\\n  $ripple-target: \\"&\\",\\n) {\\n  @include states-interactions_(\\n    $color: $color,\\n    $has-nested-focusable-element: $has-nested-focusable-element,\\n    $query: $query,\\n    $ripple-target: $ripple-target);\\n}\\n\\n// Simple mixin for activated states which automatically selects opacity values based on whether the ink color is\\n// light or dark.\\n@mixin states-activated(\\n  $color, $has-nested-focusable-element: false, $query: feature-targeting-functions.all(), $ripple-target: \\"&\\") {\\n  $feat-color: feature-targeting-functions.create-target($query, color);\\n  $activated-opacity: functions.states-opacity($color, activated);\\n\\n  &--activated {\\n    // Stylelint seems to think that \'&\' qualifies as a type selector here?\\n    // stylelint-disable-next-line selector-max-type\\n    #{$ripple-target}::before {\\n      // Opacity falls under color because the chosen opacity is color-dependent.\\n      @include feature-targeting-mixins.targets($feat-color) {\\n        opacity: $activated-opacity;\\n      }\\n    }\\n\\n    @include states-interactions_(\\n      $color: $color,\\n      $has-nested-focusable-element: $has-nested-focusable-element,\\n      $opacity-modifier: $activated-opacity,\\n      $query: $query,\\n      $ripple-target: $ripple-target);\\n  }\\n}\\n\\n// Simple mixin for selected states which automatically selects opacity values based on whether the ink color is\\n// light or dark.\\n@mixin states-selected(\\n  $color,\\n  $has-nested-focusable-element: false,\\n  $query: feature-targeting-functions.all(),\\n  $ripple-target: \\"&\\") {\\n  $feat-color: feature-targeting-functions.create-target($query, color);\\n  $selected-opacity: functions.states-opacity($color, selected);\\n\\n  &--selected {\\n    // stylelint-disable-next-line selector-max-type\\n    #{$ripple-target}::before {\\n      // Opacity falls under color because the chosen opacity is color-dependent.\\n      @include feature-targeting-mixins.targets($feat-color) {\\n        opacity: $selected-opacity;\\n      }\\n    }\\n\\n    @include states-interactions_(\\n      $color: $color,\\n      $has-nested-focusable-element: $has-nested-focusable-element,\\n      $opacity-modifier: $selected-opacity,\\n      $query: $query,\\n      $ripple-target: $ripple-target);\\n  }\\n}\\n\\n@mixin radius-bounded(\\n  $radius: 100%, $query: feature-targeting-functions.all(), $ripple-target: \\"&\\") {\\n  $feat-struture: feature-targeting-functions.create-target($query, structure);\\n\\n  #{$ripple-target}::before,\\n  #{$ripple-target}::after {\\n    @include feature-targeting-mixins.targets($feat-struture) {\\n      top: calc(50% - #{$radius});\\n      /* @noflip */\\n      left: calc(50% - #{$radius});\\n      width: $radius * 2;\\n      height: $radius * 2;\\n    }\\n  }\\n\\n  &.mdc-ripple-upgraded {\\n    #{$ripple-target}::after {\\n      @include feature-targeting-mixins.targets($feat-struture) {\\n        width: var(--mdc-ripple-fg-size, $radius);\\n        height: var(--mdc-ripple-fg-size, $radius);\\n      }\\n    }\\n  }\\n}\\n\\n@mixin radius-unbounded(\\n  $radius: 100%, $query: feature-targeting-functions.all(), $ripple-target: \\"&\\") {\\n  $feat-struture: feature-targeting-functions.create-target($query, structure);\\n\\n  #{$ripple-target}::before,\\n  #{$ripple-target}::after {\\n    @include feature-targeting-mixins.targets($feat-struture) {\\n      top: calc(50% - #{$radius / 2});\\n      /* @noflip */\\n      left: calc(50% - #{$radius / 2});\\n      width: $radius;\\n      height: $radius;\\n    }\\n  }\\n\\n  &.mdc-ripple-upgraded {\\n    #{$ripple-target}::before,\\n    #{$ripple-target}::after {\\n      @include feature-targeting-mixins.targets($feat-struture) {\\n        top: var(--mdc-ripple-top, calc(50% - #{$radius / 2}));\\n        /* @noflip */\\n        left: var(--mdc-ripple-left, calc(50% - #{$radius / 2}));\\n        width: var(--mdc-ripple-fg-size, $radius);\\n        height: var(--mdc-ripple-fg-size, $radius);\\n      }\\n    }\\n\\n    #{$ripple-target}::after {\\n      @include feature-targeting-mixins.targets($feat-struture) {\\n        width: var(--mdc-ripple-fg-size, $radius);\\n        height: var(--mdc-ripple-fg-size, $radius);\\n      }\\n    }\\n  }\\n}\\n\\n@mixin states-interactions_(\\n  $color,\\n  $has-nested-focusable-element,\\n  $opacity-modifier: 0,\\n  $query: feature-targeting-functions.all(),\\n  $ripple-target: \\"&\\",\\n) {\\n  @include target-selector($ripple-target) {\\n    @include states-base-color($color, $query);\\n  }\\n\\n  $opacity-map: (\\n    hover: functions.states-opacity($color, hover) + $opacity-modifier,\\n    focus: functions.states-opacity($color, focus) + $opacity-modifier,\\n    press: functions.states-opacity($color, press) + $opacity-modifier,\\n  );\\n\\n  @include states-opacities($opacity-map, $has-nested-focusable-element: $has-nested-focusable-element, $ripple-target: $ripple-target, $query: $query);\\n}\\n\\n// Wraps content in the `ripple-target` selector if it exists.\\n@mixin target-selector($ripple-target: \\"&\\") {\\n  @if $ripple-target == \\"&\\" {\\n    @content;\\n  } @else {\\n    #{$ripple-target} {\\n      @content;\\n    }\\n  }\\n}\\n\\n// Common styles for a ripple target element.\\n// Used for components which have an inner ripple target element.\\n@mixin target-common($query: feature-targeting-functions.all()) {\\n  $feat-structure: feature-targeting-functions.create-target($query, structure);\\n\\n  @include feature-targeting-mixins.targets($feat-structure) {\\n    position: absolute;\\n    top: 0;\\n    left: 0;\\n    width: 100%;\\n    height: 100%;\\n    // Necessary for clicks on other inner elements (e.g. close icon in chip)\\n    // to go through.\\n    pointer-events: none;\\n  }\\n}\\n","//\\n// Copyright 2016 Google Inc.\\n//\\n// Permission is hereby granted, free of charge, to any person obtaining a copy\\n// of this software and associated documentation files (the \\"Software\\"), to deal\\n// in the Software without restriction, including without limitation the rights\\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n// copies of the Software, and to permit persons to whom the Software is\\n// furnished to do so, subject to the following conditions:\\n//\\n// The above copyright notice and this permission notice shall be included in\\n// all copies or substantial portions of the Software.\\n//\\n// THE SOFTWARE IS PROVIDED \\"AS IS\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\\n// THE SOFTWARE.\\n//\\n\\n$fade-in-duration: 75ms !default;\\n$fade-out-duration: 150ms !default;\\n$translate-duration: 225ms !default;\\n$states-wash-duration: 15ms !default;\\n\\n// Notes on states:\\n// * focus takes precedence over hover (i.e. if an element is both focused and hovered, only focus value applies)\\n// * press state applies to a separate pseudo-element, so it has an additive effect on top of other states\\n// * selected/activated are applied additively to hover/focus via calculations at preprocessing time\\n\\n$dark-ink-opacities: (\\n  hover: .04,\\n  focus: .12,\\n  press: .12,\\n  selected: .08,\\n  activated: .12\\n) !default;\\n\\n$light-ink-opacities: (\\n  hover: .08,\\n  focus: .24,\\n  press: .24,\\n  selected: .16,\\n  activated: .24\\n) !default;\\n\\n// Legacy\\n\\n$pressed-dark-ink-opacity: .16 !default;\\n$pressed-light-ink-opacity: .32 !default;\\n","//\\n// Copyright 2018 Google Inc.\\n//\\n// Permission is hereby granted, free of charge, to any person obtaining a copy\\n// of this software and associated documentation files (the \\"Software\\"), to deal\\n// in the Software without restriction, including without limitation the rights\\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n// copies of the Software, and to permit persons to whom the Software is\\n// furnished to do so, subject to the following conditions:\\n//\\n// The above copyright notice and this permission notice shall be included in\\n// all copies or substantial portions of the Software.\\n//\\n// THE SOFTWARE IS PROVIDED \\"AS IS\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\\n// THE SOFTWARE.\\n//\\n\\n// Default styles\\n$row-height: 64px !default;\\n$title-left-padding: 20px !default;\\n$section-vertical-padding: 8px !default;\\n$section-horizontal-padding: 12px !default;\\n\\n$mobile-breakpoint: 599px !default;\\n\\n// Default mobile styles\\n$mobile-row-height: 56px !default;\\n$mobile-section-padding: 4px !default;\\n\\n// Short top app bar\\n$short-collapsed-border-radius: 4px !default;\\n$short-collapsed-width: 56px !default;\\n$short-collapsed-right-icon-padding: 12px !default;\\n\\n// Prominent styles\\n$prominent-row-height: 128px !default;\\n$prominent-title-bottom-padding: 2px !default;\\n\\n// Prominent mobile styles\\n$prominent-mobile-title-bottom-padding: 6px !default;\\n\\n// Dense styles\\n$dense-row-height: 48px !default;\\n$dense-section-horizontal-padding: 4px !default;\\n$dense-title-left-padding: 12px !default;\\n\\n// Dense & Prominent styles\\n$dense-prominent-title-bottom-padding: 9px !default;\\n","//\\n// Copyright 2017 Google Inc.\\n//\\n// Permission is hereby granted, free of charge, to any person obtaining a copy\\n// of this software and associated documentation files (the \\"Software\\"), to deal\\n// in the Software without restriction, including without limitation the rights\\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n// copies of the Software, and to permit persons to whom the Software is\\n// furnished to do so, subject to the following conditions:\\n//\\n// The above copyright notice and this permission notice shall be included in\\n// all copies or substantial portions of the Software.\\n//\\n// THE SOFTWARE IS PROVIDED \\"AS IS\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\\n// THE SOFTWARE.\\n//\\n\\n@use \\"sass:list\\";\\n@use \\"sass:map\\";\\n@use \\"sass:string\\";\\n@use \\"@material/feature-targeting/functions\\" as feature-targeting-functions;\\n@use \\"@material/feature-targeting/mixins\\" as feature-targeting-mixins;\\n@use \\"@material/theme/mixins\\" as theme-mixins;\\n@use \\"./variables\\";\\n\\n@mixin core-styles($query: feature-targeting-functions.all()) {\\n  .mdc-typography {\\n    @include base($query: $query);\\n  }\\n\\n  @each $style in map.keys(variables.$styles) {\\n    .mdc-typography--#{$style} {\\n      @include typography($style, $query: $query);\\n    }\\n  }\\n}\\n\\n@mixin base($query: feature-targeting-functions.all()) {\\n  $feat-typography: feature-targeting-functions.create-target($query, typography);\\n\\n  @include smooth-font($query: $query);\\n  @include feature-targeting-mixins.targets($feat-typography) {\\n    @include theme-mixins.prop(font-family, (\\n      varname: --mdc-typography-font-family,\\n      fallback: map.get(variables.$base, \'font-family\')\\n    ));\\n  }\\n}\\n\\n@mixin typography($style, $query: feature-targeting-functions.all(), $exclude-props: ()) {\\n  $feat-typography: feature-targeting-functions.create-target($query, typography);\\n  $style-props: map.get(variables.$styles, $style);\\n\\n  @if not map.has-key(variables.$styles, $style) {\\n    @error \\"Invalid style specified! #{$style} doesn\'t exist. Choose one of #{map.keys(variables.$styles)}\\";\\n  }\\n\\n  @include smooth-font($query: $query);\\n  @include feature-targeting-mixins.targets($feat-typography) {\\n    @each $key, $value in $style-props {\\n      @if list.index($exclude-props, $key) == null {\\n        $fallback: $value;\\n        @if $key == \\"font-family\\" {\\n          // Each style has its own font-family custom property, but should\\n          // fallback to a generic font-family property. This allows\\n          // customizing the font-family for all styles or only specific ones.\\n          $fallback: (\\n            varname: --mdc-typography-font-family,\\n            fallback: $fallback\\n          );\\n        }\\n\\n        @include theme-mixins.prop($key, (\\n          varname: --mdc-typography-#{$style}-#{$key},\\n          fallback: $fallback\\n        ));\\n      }\\n    }\\n  }\\n}\\n\\n/// Applies antialiasing via font-smoothing to text.\\n@mixin smooth-font($query: feature-targeting-functions.all()) {\\n  $feat-typography: feature-targeting-functions.create-target($query, typography);\\n\\n  @include feature-targeting-mixins.targets($feat-typography) {\\n    -moz-osx-font-smoothing: grayscale;\\n    -webkit-font-smoothing: antialiased;\\n  }\\n}\\n\\n// Element must be `display: block` or `display: inline-block` for this to work.\\n@mixin overflow-ellipsis($query: feature-targeting-functions.all()) {\\n  $feat-structure: feature-targeting-functions.create-target($query, structure);\\n\\n  @include feature-targeting-mixins.targets($feat-structure) {\\n    text-overflow: ellipsis;\\n    white-space: nowrap;\\n    overflow: hidden;\\n  }\\n}\\n\\n@mixin baseline-top($distance, $query: feature-targeting-functions.all()) {\\n  $feat-structure: feature-targeting-functions.create-target($query, structure);\\n\\n  @include feature-targeting-mixins.targets($feat-structure) {\\n    display: block;\\n    margin-top: 0;\\n    /* @alternate */\\n    line-height: normal;\\n  }\\n\\n  &::before {\\n    @include feature-targeting-mixins.targets($feat-structure) {\\n      @include baseline-strut_($distance);\\n\\n      vertical-align: 0;\\n    }\\n  }\\n}\\n\\n@mixin baseline-bottom($distance, $query: feature-targeting-functions.all()) {\\n  $feat-structure: feature-targeting-functions.create-target($query, structure);\\n\\n  @include feature-targeting-mixins.targets($feat-structure) {\\n    margin-bottom: -1 * $distance;\\n  }\\n\\n  &::after {\\n    @include feature-targeting-mixins.targets($feat-structure) {\\n      @include baseline-strut_($distance);\\n\\n      vertical-align: -1 * $distance;\\n    }\\n  }\\n}\\n\\n@mixin baseline-strut_($distance) {\\n  display: inline-block;\\n  width: 0;\\n  height: $distance;\\n  content: \\"\\";\\n}\\n","//\\n// Copyright 2017 Google Inc.\\n//\\n// Permission is hereby granted, free of charge, to any person obtaining a copy\\n// of this software and associated documentation files (the \\"Software\\"), to deal\\n// in the Software without restriction, including without limitation the rights\\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n// copies of the Software, and to permit persons to whom the Software is\\n// furnished to do so, subject to the following conditions:\\n//\\n// The above copyright notice and this permission notice shall be included in\\n// all copies or substantial portions of the Software.\\n//\\n// THE SOFTWARE IS PROVIDED \\"AS IS\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\\n// THE SOFTWARE.\\n//\\n\\n@use \\"sass:list\\";\\n@use \\"./variables\\";\\n\\n// Creates a rule that will be applied when an MDC Web component is within the context of an RTL layout.\\n//\\n// Usage Example:\\n//\\n// ```scss\\n// .mdc-foo {\\n//   position: absolute;\\n//   left: 0;\\n//\\n//   @include rtl {\\n//     left: auto;\\n//     right: 0;\\n//   }\\n//\\n//   &__bar {\\n//     margin-left: 4px;\\n//     @include rtl(\\".mdc-foo\\") {\\n//       margin-left: auto;\\n//       margin-right: 4px;\\n//     }\\n//   }\\n// }\\n//\\n// .mdc-foo--mod {\\n//   padding-left: 4px;\\n//\\n//   @include rtl {\\n//     padding-left: auto;\\n//     padding-right: 4px;\\n//   }\\n// }\\n// ```\\n//\\n// Note that this mixin works by checking for an ancestor element with `[dir=\\"rtl\\"]`.\\n// As a result, nested `dir` values are not supported:\\n//\\n// ```html\\n// <html dir=\\"rtl\\">\\n//   \x3c!-- ... --\x3e\\n//   <div dir=\\"ltr\\">\\n//     <div class=\\"mdc-foo\\">Styled incorrectly as RTL!</div>\\n//   </div>\\n// </html>\\n// ```\\n//\\n// In the future, selectors such as the `:dir` pseudo-class (http://mdn.io/css/:dir) will help us mitigate this.\\n@mixin rtl($root-selector: null) {\\n  @if (variables.$include) {\\n    @if ($root-selector) {\\n      @at-root {\\n        #{$root-selector}[dir=\\"rtl\\"] &,\\n        [dir=\\"rtl\\"] #{$root-selector} & {\\n          @content;\\n        }\\n      }\\n    } @else {\\n      [dir=\\"rtl\\"] &,\\n      &[dir=\\"rtl\\"] {\\n        @content;\\n      }\\n    }\\n  }\\n}\\n\\n// Takes a base box-model property name (`margin`, `border`, `padding`, etc.) along with a\\n// default direction (`left` or `right`) and value, and emits rules which apply the given value to the\\n// specified direction by default and the opposite direction in RTL.\\n//\\n// For example:\\n//\\n// ```scss\\n// .mdc-foo {\\n//   @include rtl-reflexive-box(margin, left, 8px);\\n// }\\n// ```\\n//\\n// is equivalent to:\\n//\\n// ```scss\\n// .mdc-foo {\\n//   margin-left: 8px;\\n//   margin-right: 0;\\n//\\n//   @include rtl {\\n//     margin-left: 0;\\n//     margin-right: 8px;\\n//   }\\n// }\\n// ```\\n//\\n// whereas:\\n//\\n// ```scss\\n// .mdc-foo {\\n//   @include rtl-reflexive-box(margin, right, 8px);\\n// }\\n// ```\\n//\\n// is equivalent to:\\n//\\n// ```scss\\n// .mdc-foo {\\n//   margin-left: 0;\\n//   margin-right: 8px;\\n//\\n//   @include rtl {\\n//     margin-left: 8px;\\n//     margin-right: 0;\\n//   }\\n// }\\n// ```\\n//\\n// You can also pass an optional 4th `$root-selector` argument which will be forwarded to `mdc-rtl`,\\n// e.g. `@include rtl-reflexive-box(margin, left, 8px, \\".mdc-component\\")`.\\n//\\n// Note that this function will always zero out the original value in an RTL context.\\n// If you\'re trying to flip the values, use `mdc-rtl-reflexive-property()` instead.\\n@mixin reflexive-box($base-property, $default-direction, $value, $root-selector: null) {\\n  @if (list.index((right, left), $default-direction) == null) {\\n    @error \\"Invalid default direction: \'#{$default-direction}\'. Please specifiy either \'right\' or \'left\'.\\";\\n  }\\n\\n  $left-value: $value;\\n  $right-value: 0;\\n\\n  @if ($default-direction == right) {\\n    $left-value: 0;\\n    $right-value: $value;\\n  }\\n\\n  @include reflexive-property($base-property, $left-value, $right-value, $root-selector);\\n}\\n\\n// Takes a base property and emits rules that assign <base-property>-left to <left-value> and\\n// <base-property>-right to <right-value> in a LTR context, and vice versa in a RTL context.\\n// For example:\\n//\\n// ```scss\\n// .mdc-foo {\\n//   @include rtl-reflexive-property(margin, auto, 12px);\\n// }\\n// ```\\n//\\n// is equivalent to:\\n//\\n// ```scss\\n// .mdc-foo {\\n//   margin-left: auto;\\n//   margin-right: 12px;\\n//\\n//   @include rtl {\\n//     margin-left: 12px;\\n//     margin-right: auto;\\n//   }\\n// }\\n// ```\\n//\\n// An optional 4th `$root-selector` argument can be given, which will be passed to `mdc-rtl`.\\n@mixin reflexive-property($base-property, $left-value, $right-value, $root-selector: null) {\\n  $prop-left: #{$base-property}-left;\\n  $prop-right: #{$base-property}-right;\\n\\n  @include reflexive($prop-left, $left-value, $prop-right, $right-value, $root-selector);\\n}\\n\\n// Takes an argument specifying a horizontal position property (either \\"left\\" or \\"right\\") as well\\n// as a value, and applies that value to the specified position in a LTR context, and flips it in a\\n// RTL context. For example:\\n//\\n// ```scss\\n// .mdc-foo {\\n//   @include rtl-reflexive-position(left, 0);\\n// }\\n// ```\\n//\\n// is equivalent to:\\n//\\n// ```scss\\n// .mdc-foo {\\n//   left: 0;\\n//   right: initial;\\n//\\n//   @include rtl {\\n//     left: initial;\\n//     right: 0;\\n//   }\\n// }\\n// ```\\n//\\n// An optional third $root-selector argument may also be given, which is passed to `mdc-rtl`.\\n@mixin reflexive-position($position-property, $value, $root-selector: null) {\\n  @if (list.index((right, left), $position-property) == null) {\\n    @error \\"Invalid position #{position-property}. Please specifiy either right or left\\";\\n  }\\n\\n  // TODO: \\"initial\\" is not supported in IE 11. https://caniuse.com/#feat=css-initial-value\\n  $left-value: $value;\\n  $right-value: initial;\\n\\n  @if ($position-property == right) {\\n    $right-value: $value;\\n    $left-value: initial;\\n  }\\n\\n  @include reflexive(left, $left-value, right, $right-value, $root-selector);\\n}\\n\\n// Takes pair of properties with values as arguments and flips it in RTL context.\\n// For example:\\n//\\n// ```scss\\n// .mdc-foo {\\n//   @include rtl-reflexive(left, 2px, right, 5px);\\n// }\\n// ```\\n//\\n// is equivalent to:\\n//\\n// ```scss\\n// .mdc-foo {\\n//   left: 2px;\\n//   right: 5px;\\n//\\n//   @include rtl {\\n//     right: 2px;\\n//     left: 5px;\\n//   }\\n// }\\n// ```\\n//\\n// An optional fifth `$root-selector` argument may also be given, which is passed to `mdc-rtl`.\\n@mixin reflexive(\\n  $left-property,\\n  $left-value,\\n  $right-property,\\n  $right-value,\\n  $root-selector: null\\n) {\\n  @include property_($left-property, $left-value);\\n  @include property_($right-property, $right-value);\\n\\n  @include rtl($root-selector) {\\n    @include property_($left-property, $right-value);\\n    @include property_($right-property, $left-value);\\n  }\\n}\\n\\n///\\n/// Adds `@noflip` annotation when `$mdc-rtl-include` is true.\\n///\\n/// @param {String} $property\\n/// @param {String} $value\\n/// @access private\\n///\\n@mixin property_($property, $value) {\\n  @if variables.$include {\\n    /* @noflip */\\n  }\\n\\n  #{$property}: #{$value};\\n}\\n","//\\n// Copyright 2018 Google Inc.\\n//\\n// Permission is hereby granted, free of charge, to any person obtaining a copy\\n// of this software and associated documentation files (the \\"Software\\"), to deal\\n// in the Software without restriction, including without limitation the rights\\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n// copies of the Software, and to permit persons to whom the Software is\\n// furnished to do so, subject to the following conditions:\\n//\\n// The above copyright notice and this permission notice shall be included in\\n// all copies or substantial portions of the Software.\\n//\\n// THE SOFTWARE IS PROVIDED \\"AS IS\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\\n// THE SOFTWARE.\\n//\\n\\n@use \\"sass:list\\";\\n@use \\"@material/feature-targeting/functions\\" as feature-targeting-functions;\\n@use \\"@material/feature-targeting/mixins\\" as feature-targeting-mixins;\\n@use \\"@material/rtl/mixins\\" as rtl-mixins;\\n@use \\"./variables\\";\\n@use \\"./functions\\";\\n\\n@mixin radius($radius, $rtl-reflexive: false, $query: feature-targeting-functions.all()) {\\n  $feat-structure: feature-targeting-functions.create-target($query, structure);\\n\\n  @include feature-targeting-mixins.targets($feat-structure) {\\n    // Even if $rtl-reflexive is true, only emit RTL styles if we can\'t easily tell that the given radius is symmetrical\\n    $needs-flip: $rtl-reflexive and list.length($radius) > 1;\\n\\n    @if ($needs-flip) {\\n      /* @noflip */\\n    }\\n\\n    border-radius: functions.prop-value($radius);\\n\\n    @if ($needs-flip) {\\n      @include rtl-mixins.rtl {\\n        /* @noflip */\\n        border-radius: functions.flip-radius(functions.prop-value($radius));\\n      }\\n    }\\n  }\\n}\\n","//\\n// Copyright 2017 Google Inc.\\n//\\n// Permission is hereby granted, free of charge, to any person obtaining a copy\\n// of this software and associated documentation files (the \\"Software\\"), to deal\\n// in the Software without restriction, including without limitation the rights\\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n// copies of the Software, and to permit persons to whom the Software is\\n// furnished to do so, subject to the following conditions:\\n//\\n// The above copyright notice and this permission notice shall be included in\\n// all copies or substantial portions of the Software.\\n//\\n// THE SOFTWARE IS PROVIDED \\"AS IS\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\\n// THE SOFTWARE.\\n//\\n\\n@use \\"sass:map\\";\\n@use \\"sass:math\\";\\n@use \\"sass:meta\\";\\n@use \\"@material/base/mixins\\" as base-mixins;\\n@use \\"@material/feature-targeting/functions\\" as feature-targeting-functions;\\n@use \\"@material/feature-targeting/mixins\\" as feature-targeting-mixins;\\n@use \\"@material/theme/mixins\\" as theme-mixins;\\n@use \\"@material/theme/variables\\" as theme-variables;\\n@use \\"./functions\\";\\n@use \\"./variables\\";\\n\\n@mixin core-styles($query: feature-targeting-functions.all()) {\\n  $feat-animation: feature-targeting-functions.create-target($query, animation);\\n  $feat-structure: feature-targeting-functions.create-target($query, structure);\\n\\n  @for $z-value from 0 through 24 {\\n    .mdc-elevation--z#{$z-value} {\\n      @include elevation($z-value, $query: $query);\\n    }\\n  }\\n\\n  .mdc-elevation-transition {\\n    @include feature-targeting-mixins.targets($feat-animation) {\\n      transition: functions.transition-value();\\n    }\\n\\n    @include feature-targeting-mixins.targets($feat-structure) {\\n      will-change: variables.$property;\\n    }\\n  }\\n}\\n\\n///\\n/// Called once per application to set up the global default elevation styles.\\n///\\n@mixin overlay-common($query: feature-targeting-functions.all()) {\\n  $feat-animation: feature-targeting-functions.create-target($query, animation);\\n  $feat-structure: feature-targeting-functions.create-target($query, structure);\\n\\n  @include overlay-selector_ {\\n    @include feature-targeting-mixins.targets($feat-structure) {\\n      @include base-mixins.emit-once(\\"mdc-elevation/common/structure\\") {\\n        position: absolute;\\n        border-radius: inherit;\\n        opacity: 0;\\n        pointer-events: none;\\n      }\\n    }\\n\\n    @include feature-targeting-mixins.targets($feat-animation) {\\n      @include base-mixins.emit-once(\\"mdc-elevation/common/animation\\") {\\n        transition: functions.overlay-transition-value();\\n      }\\n    }\\n\\n    @include base-mixins.emit-once(\\"mdc-elevation/common/color\\") {\\n      @include overlay-fill-color(variables.$overlay-color, $query: $query);\\n    }\\n  }\\n}\\n\\n///\\n/// Sets the shadow of the element.\\n///\\n/// @param {String} $box-shadow - The shadow to apply to the element.\\n///\\n@mixin shadow($box-shadow, $query: feature-targeting-functions.all()) {\\n  $feat-color: feature-targeting-functions.create-target($query, color);\\n\\n  @include feature-targeting-mixins.targets($feat-color) {\\n    /* @alternate */\\n    box-shadow: $box-shadow;\\n  }\\n}\\n\\n///\\n/// Sets the elevation overlay surface required positioning.\\n///\\n@mixin overlay-surface-position($query: feature-targeting-functions.all()) {\\n  $feat-structure: feature-targeting-functions.create-target($query, structure);\\n\\n  @include feature-targeting-mixins.targets($feat-structure) {\\n    /* @alternate */\\n    position: relative;\\n  }\\n}\\n\\n///\\n/// Sets the dimensions of the elevation overlay, including positioning and sizing.\\n///\\n/// @param {Number} $width - The width of the elevation overlay\\n/// @param {Number} [$height] - The height of the elevation overlay\\n/// @param {Boolean} [$has-content-sizing] - Set to false if the container has no content sizing\\n///\\n@mixin overlay-dimensions($width, $height: $width, $has-content-sizing: true, $query: feature-targeting-functions.all()) {\\n  $feat-structure: feature-targeting-functions.create-target($query, structure);\\n\\n  @include overlay-selector_ {\\n    @include feature-targeting-mixins.targets($feat-structure) {\\n      width: $width;\\n      height: $height;\\n\\n      @if $has-content-sizing {\\n        top: 0;\\n        /* @noflip */\\n        left: 0;\\n      } @else {\\n        top: 50%;\\n        /* @noflip */\\n        left: 50%;\\n        transform: translate(-50%, -50%);\\n      }\\n    }\\n  }\\n}\\n\\n///\\n/// Sets the elevation overlay fill color.\\n/// Expected to be called directly on the elevation overlay element.\\n///\\n/// @param {Color} $color - The color of the elevation overlay.\\n///\\n@mixin overlay-fill-color($color, $query: feature-targeting-functions.all()) {\\n  $feat-color: feature-targeting-functions.create-target($query, color);\\n\\n  @include feature-targeting-mixins.targets($feat-color) {\\n    @include theme-mixins.prop(background-color, $color);\\n  }\\n}\\n\\n///\\n/// Sets the elevation overlay opacity.\\n/// Expected to be called from a parent element.\\n///\\n/// @param {Number} $opacity - The opacity of the elevation overlay.\\n///\\n@mixin overlay-opacity($opacity, $query: feature-targeting-functions.all()) {\\n  $feat-color: feature-targeting-functions.create-target($query, color);\\n\\n  @include overlay-selector_ {\\n    @include feature-targeting-mixins.targets($feat-color) {\\n      opacity: $opacity;\\n    }\\n  }\\n}\\n\\n// Applies the correct CSS rules to an element to give it the elevation specified by $z-value.\\n// The $z-value must be between 0 and 24.\\n// If $color has an alpha channel, it will be ignored and overridden. To increase the opacity of the shadow, use\\n// $opacity-boost.\\n@mixin elevation($z-value, $color: variables.$baseline-color, $opacity-boost: 0, $query: feature-targeting-functions.all()) {\\n  @if meta.type-of($z-value) != number or not math.is-unitless($z-value) {\\n    @error \\"$z-value must be a unitless number, but received \'#{$z-value}\'\\";\\n  }\\n\\n  @if $z-value < 0 or $z-value > 24 {\\n    @error \\"$z-value must be between 0 and 24, but received \'#{$z-value}\'\\";\\n  }\\n\\n  $feat-color: feature-targeting-functions.create-target($query, color);\\n\\n  $color: theme-variables.prop-value($color);\\n\\n  $umbra-z-value: map.get(variables.$umbra-map, $z-value);\\n  $penumbra-z-value: map.get(variables.$penumbra-map, $z-value);\\n  $ambient-z-value: map.get(variables.$ambient-map, $z-value);\\n\\n  $umbra-color: rgba($color, variables.$umbra-opacity + $opacity-boost);\\n  $penumbra-color: rgba($color, variables.$penumbra-opacity + $opacity-boost);\\n  $ambient-color: rgba($color, variables.$ambient-opacity + $opacity-boost);\\n\\n  $box-shadow: (\\n    #{\\"#{$umbra-z-value} #{$umbra-color}\\"},\\n    #{\\"#{$penumbra-z-value} #{$penumbra-color}\\"},\\n    #{$ambient-z-value} $ambient-color,\\n  );\\n\\n  @include shadow($box-shadow, $query: $query);\\n}\\n\\n// Private\\n\\n///\\n/// Sets the elevation overlay transition value.\\n///\\n/// @param {String} $duration - The duration of the transition.\\n/// @param {String} $easing - The easing function for the transition.\\n/// @return {String}\\n/// @access private\\n///\\n@mixin overlay-selector_ {\\n  .mdc-elevation-overlay {\\n    @content;\\n  }\\n}\\n","//\\n// Copyright 2018 Google Inc.\\n//\\n// Permission is hereby granted, free of charge, to any person obtaining a copy\\n// of this software and associated documentation files (the \\"Software\\"), to deal\\n// in the Software without restriction, including without limitation the rights\\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n// copies of the Software, and to permit persons to whom the Software is\\n// furnished to do so, subject to the following conditions:\\n//\\n// The above copyright notice and this permission notice shall be included in\\n// all copies or substantial portions of the Software.\\n//\\n// THE SOFTWARE IS PROVIDED \\"AS IS\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\\n// THE SOFTWARE.\\n//\\n\\n@use \\"sass:math\\";\\n@use \\"@material/density/functions\\" as density-functions;\\n@use \\"@material/feature-targeting/functions\\" as feature-targeting-functions;\\n@use \\"@material/feature-targeting/mixins\\" as feature-targeting-mixins;\\n@use \\"@material/ripple/mixins\\" as ripple-mixins;\\n@use \\"@material/theme/mixins\\" as theme-mixins;\\n@use \\"./variables\\";\\n\\n@mixin core-styles($query: feature-targeting-functions.all()) {\\n  @include without-ripple($query);\\n  @include ripple($query);\\n}\\n\\n@mixin without-ripple($query: feature-targeting-functions.all()) {\\n  $feat-structure: feature-targeting-functions.create-target($query, structure);\\n\\n  // postcss-bem-linter: define icon-button\\n  .mdc-icon-button {\\n    @include base_($query: $query);\\n    @include density(0, $query: $query);\\n  }\\n\\n  .mdc-icon-button__icon {\\n    @include feature-targeting-mixins.targets($feat-structure) {\\n      display: inline-block;\\n    }\\n\\n    // stylelint-disable-next-line plugin/selector-bem-pattern\\n    &.mdc-icon-button__icon--on {\\n      @include feature-targeting-mixins.targets($feat-structure) {\\n        display: none;\\n      }\\n    }\\n  }\\n\\n  .mdc-icon-button--on {\\n    .mdc-icon-button__icon {\\n      @include feature-targeting-mixins.targets($feat-structure) {\\n        display: none;\\n      }\\n\\n      // stylelint-disable-next-line plugin/selector-bem-pattern\\n      &.mdc-icon-button__icon--on {\\n        @include feature-targeting-mixins.targets($feat-structure) {\\n          display: inline-block;\\n        }\\n      }\\n    }\\n  }\\n  // postcss-bem-linter: end\\n}\\n\\n@mixin ripple($query: feature-targeting-functions.all()) {\\n  @include ripple-mixins.common($query); // COPYBARA_COMMENT_THIS_LINE\\n\\n  .mdc-icon-button {\\n    @include ripple-mixins.surface($query: $query);\\n    @include ripple-mixins.radius-unbounded($query: $query);\\n    @include ripple-mixins.states($query: $query);\\n  }\\n}\\n\\n///\\n/// Sets the density scale for icon button.\\n///\\n/// @param {Number | String} $density-scale - Density scale value for component.\\n///     Supported density scale values range from `-5` to `0`, with `0` being the default.\\n///\\n@mixin density($density-scale, $query: feature-targeting-functions.all()) {\\n  $size: density-functions.prop-value(\\n    $density-config: variables.$density-config,\\n    $density-scale: $density-scale,\\n    $property-name: size,\\n  );\\n\\n  @include size($size, $query: $query);\\n}\\n\\n///\\n/// Sets the size of the icon-button.\\n///\\n/// @param {Number} $size - Size value for icon-button.\\n///     Size will set the width, height, and padding for the overall component.\\n///\\n@mixin size($size, $query: feature-targeting-functions.all()) {\\n  $feat-structure: feature-targeting-functions.create-target($query, structure);\\n\\n  @include feature-targeting-mixins.targets($feat-structure) {\\n    width: $size;\\n    height: $size;\\n    padding: ($size - variables.$icon-size) / 2;\\n  }\\n}\\n\\n///\\n/// Sets the width, height and padding of icon button. Also changes the size of\\n/// the icon itself based on button size.\\n///\\n/// @param {Number} $width - Width value for icon-button.\\n/// @param {Number} $height - Height value for icon-button. (default: $width)\\n/// @param {Number} $padding - Padding value for icon-button. (default: max($width, $height) / 2)\\n/// @deprecated\\n///     This mixin provides too much of low level customization.\\n///     Please use mdc-icon-button-size instead.\\n///\\n@mixin icon-size($width, $height: $width, $padding: math.max($width,$height) / 2, $query: feature-targeting-functions.all()) {\\n  $feat-structure: feature-targeting-functions.create-target($query, structure);\\n\\n  @include feature-targeting-mixins.targets($feat-structure) {\\n    width: $width + $padding * 2;\\n    height: $height + $padding * 2;\\n    padding: $padding;\\n    font-size: math.max($width, $height);\\n  }\\n\\n  // stylelint-disable-next-line selector-max-type\\n  svg,\\n  img {\\n    @include feature-targeting-mixins.targets($feat-structure) {\\n      width: $width;\\n      height: $height;\\n    }\\n  }\\n}\\n\\n///\\n/// Sets the font color and the ripple color to the provided color value.\\n/// @param {Color} $color - The desired font and ripple color.\\n///\\n@mixin ink-color($color, $query: feature-targeting-functions.all()) {\\n  @include ink-color_($color, $query: $query);\\n  @include ripple-mixins.states($color, $query: $query);\\n}\\n\\n///\\n/// Sets the font color to the provided color value for a disabled icon button.\\n/// @param {Color} $color - The desired font color.\\n///\\n@mixin disabled-ink-color($color, $query: feature-targeting-functions.all()) {\\n  @include if-disabled_ {\\n    @include ink-color_($color, $query: $query);\\n  }\\n}\\n\\n@mixin base_($query: feature-targeting-functions.all()) {\\n  $feat-structure: feature-targeting-functions.create-target($query, structure);\\n\\n  @include feature-targeting-mixins.targets($feat-structure) {\\n    display: inline-block;\\n    position: relative;\\n    box-sizing: border-box;\\n    border: none;\\n    outline: none;\\n    background-color: transparent;\\n    fill: currentColor;\\n    color: inherit;\\n    font-size: variables.$icon-size;\\n    text-decoration: none;\\n    cursor: pointer;\\n    user-select: none;\\n  }\\n\\n  // stylelint-disable-next-line selector-max-type\\n  svg,\\n  img {\\n    @include feature-targeting-mixins.targets($feat-structure) {\\n      width: variables.$icon-size;\\n      height: variables.$icon-size;\\n    }\\n  }\\n\\n  @include disabled-ink-color(text-disabled-on-light, $query: $query);\\n\\n  @include if-disabled_ {\\n    @include feature-targeting-mixins.targets($feat-structure) {\\n      cursor: default;\\n      pointer-events: none;\\n    }\\n  }\\n}\\n\\n///\\n/// Sets the font color to the provided color value. This can be wrapped in\\n/// a state qualifier such as `mdc-icon-button-if-disabled_`.\\n/// @access private\\n///\\n@mixin ink-color_($color, $query: feature-targeting-functions.all()) {\\n  $feat-color: feature-targeting-functions.create-target($query, color);\\n\\n  @include feature-targeting-mixins.targets($feat-color) {\\n    @include theme-mixins.prop(color, $color);\\n  }\\n}\\n\\n///\\n/// Helps style the icon button in its disabled state.\\n/// @access private\\n///\\n@mixin if-disabled_ {\\n  &:disabled {\\n    @content;\\n  }\\n}\\n","//\\n// Copyright 2018 Google Inc.\\n//\\n// Permission is hereby granted, free of charge, to any person obtaining a copy\\n// of this software and associated documentation files (the \\"Software\\"), to deal\\n// in the Software without restriction, including without limitation the rights\\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n// copies of the Software, and to permit persons to whom the Software is\\n// furnished to do so, subject to the following conditions:\\n//\\n// The above copyright notice and this permission notice shall be included in\\n// all copies or substantial portions of the Software.\\n//\\n// THE SOFTWARE IS PROVIDED \\"AS IS\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\\n// THE SOFTWARE.\\n//\\n\\n@use \\"@material/density/variables\\";\\n\\n$icon-size: 24px !default;\\n\\n$size: 48px !default;\\n$minimum-height: 28px !default;\\n$maximum-height: $size !default;\\n$density-scale: variables.$default-scale !default;\\n$density-config: (\\n  size: (\\n    default: $size,\\n    maximum: $maximum-height,\\n    minimum: $minimum-height,\\n  ),\\n) !default;\\n","//\\n// Copyright 2017 Google Inc.\\n//\\n// Permission is hereby granted, free of charge, to any person obtaining a copy\\n// of this software and associated documentation files (the \\"Software\\"), to deal\\n// in the Software without restriction, including without limitation the rights\\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n// copies of the Software, and to permit persons to whom the Software is\\n// furnished to do so, subject to the following conditions:\\n//\\n// The above copyright notice and this permission notice shall be included in\\n// all copies or substantial portions of the Software.\\n//\\n// THE SOFTWARE IS PROVIDED \\"AS IS\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\\n// THE SOFTWARE.\\n//\\n\\n// MDC Ripple keyframes are split into their own file so that _mixins.scss can rely on them.\\n\\n@use \\"@material/animation/variables\\";\\n@use \\"./variables\\" as variables2;\\n\\n@mixin keyframes_ {\\n  @keyframes mdc-ripple-fg-radius-in {\\n    from {\\n      animation-timing-function: variables.$standard-curve-timing-function;\\n      // NOTE: For these keyframes, we do not need custom property fallbacks because they are only\\n      // used in conjunction with `.mdc-ripple-upgraded`. Since MDCRippleFoundation checks to ensure\\n      // that custom properties are supported within the browser before adding this class, we can\\n      // safely use them without a fallback.\\n      transform: translate(var(--mdc-ripple-fg-translate-start, 0)) scale(1);\\n    }\\n\\n    to {\\n      transform: translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1));\\n    }\\n  }\\n\\n  @keyframes mdc-ripple-fg-opacity-in {\\n    from {\\n      animation-timing-function: linear;\\n      opacity: 0;\\n    }\\n\\n    to {\\n      opacity: var(--mdc-ripple-fg-opacity, 0);\\n    }\\n  }\\n\\n  @keyframes mdc-ripple-fg-opacity-out {\\n    from {\\n      animation-timing-function: linear;\\n      opacity: var(--mdc-ripple-fg-opacity, 0);\\n    }\\n\\n    to {\\n      opacity: 0;\\n    }\\n  }\\n}\\n","//\\n// Copyright 2017 Google Inc.\\n//\\n// Permission is hereby granted, free of charge, to any person obtaining a copy\\n// of this software and associated documentation files (the \\"Software\\"), to deal\\n// in the Software without restriction, including without limitation the rights\\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n// copies of the Software, and to permit persons to whom the Software is\\n// furnished to do so, subject to the following conditions:\\n//\\n// The above copyright notice and this permission notice shall be included in\\n// all copies or substantial portions of the Software.\\n//\\n// THE SOFTWARE IS PROVIDED \\"AS IS\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\\n// THE SOFTWARE.\\n//\\n\\n$deceleration-curve-timing-function: cubic-bezier(0, 0, .2, 1) !default;\\n$standard-curve-timing-function: cubic-bezier(.4, 0, .2, 1) !default;\\n$acceleration-curve-timing-function: cubic-bezier(.4, 0, 1, 1) !default;\\n$sharp-curve-timing-function: cubic-bezier(.4, 0, .6, 1) !default;\\n","// Copyright 2016 Google Inc.\\n//\\n// Permission is hereby granted, free of charge, to any person obtaining a copy\\n// of this software and associated documentation files (the \\"Software\\"), to deal\\n// in the Software without restriction, including without limitation the rights\\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n// copies of the Software, and to permit persons to whom the Software is\\n// furnished to do so, subject to the following conditions:\\n//\\n// The above copyright notice and this permission notice shall be included in\\n// all copies or substantial portions of the Software.\\n//\\n// THE SOFTWARE IS PROVIDED \\"AS IS\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\\n// THE SOFTWARE.\\n\\n@use \\"sass:map\\";\\n@use \\"@material/density/functions\\" as density-functions;\\n@use \\"@material/rtl/mixins\\" as rtl-mixins;\\n@use \\"@material/theme/mixins\\" as theme-mixins;\\n@use \\"@material/shape/functions\\" as shape-functions;\\n@use \\"@material/shape/mixins\\" as shape-mixins;\\n@use \\"@material/ripple/mixins\\" as ripple-mixins;\\n@use \\"@material/theme/functions\\" as theme-functions;\\n@use \\"@material/typography/mixins\\" as typography-mixins;\\n@use \\"@material/typography/variables\\" as typography-variables;\\n@use \\"@material/feature-targeting/functions\\" as feature-targeting-functions;\\n@use \\"@material/feature-targeting/mixins\\" as feature-targeting-mixins;\\n@use \\"./variables\\";\\n@use \\"@material/ripple/functions\\" as ripple-functions;\\n@use \\"@material/theme/variables\\" as theme-variables;\\n\\n//\\n// Public\\n//\\n\\n@mixin core-styles($query: feature-targeting-functions.all()) {\\n  @include without-ripple($query);\\n  @include ripple($query);\\n}\\n\\n// This API is intended for use by frameworks that may want to separate the ripple-related styles from the other\\n// list styles. It is recommended that most users use `mdc-list-core-styles` instead.\\n@mixin without-ripple($query: feature-targeting-functions.all()) {\\n  $feat-color: feature-targeting-functions.create-target($query, color);\\n  $feat-structure: feature-targeting-functions.create-target($query, structure);\\n  $feat-typography: feature-targeting-functions.create-target($query, typography);\\n\\n  $item-primary-text-baseline-height: 32px;\\n  $item-secondary-text-baseline-height: 20px;\\n  $dense-item-primary-text-baseline-height: 24px;\\n  $divider-color: if(\\n    theme-functions.tone(theme-variables.$background) == \\"dark\\",\\n    variables.$divider-color-on-dark-bg,\\n    variables.$divider-color-on-light-bg\\n  );\\n\\n  .mdc-list {\\n    @include base_($query);\\n  }\\n\\n  @include single-line-density(variables.$single-line-density-scale, $query: $query);\\n  @include item-secondary-text-ink-color(text-secondary-on-background, $query);\\n  @include item-graphic-fill-color(transparent, $query);\\n  @include item-graphic-ink-color(text-icon-on-background, $query);\\n  @include item-meta-ink-color(text-hint-on-background, $query);\\n  @include group-subheader-ink-color(text-primary-on-background, $query);\\n  @include item-disabled-text-opacity(variables.$text-disabled-opacity, $query);\\n  @include item-disabled-text-color(variables.$text-disabled-color, $query);\\n\\n  .mdc-list--dense {\\n    @include feature-targeting-mixins.targets($feat-structure) {\\n      padding-top: 4px;\\n      padding-bottom: 4px;\\n      font-size: .812rem;\\n    }\\n  }\\n\\n  .mdc-list-item {\\n    @include feature-targeting-mixins.targets($feat-structure) {\\n      @include item-base_;\\n    }\\n  }\\n\\n  // \\"Selected\\" is ephemeral and likely to change soon. E.g., selecting one or more photos to share in Google Photos.\\n  // \\"Activated\\" is more permanent. E.g., the currently highlighted navigation destination in a drawer.\\n  .mdc-list-item--selected,\\n  .mdc-list-item--activated {\\n    @include item-primary-text-ink-color(primary, $query);\\n    @include item-graphic-ink-color(primary, $query);\\n  }\\n\\n  .mdc-list-item__graphic {\\n    @include feature-targeting-mixins.targets($feat-structure) {\\n      @include graphic-size_(24px);\\n\\n      flex-shrink: 0;\\n      align-items: center;\\n      justify-content: center;\\n      fill: currentColor;\\n    }\\n  }\\n\\n  // Extra specificity is to override .material-icons display style if used in\\n  // conjunction with mdc-list-item__graphic\\n  // stylelint-disable plugin/selector-bem-pattern\\n  .mdc-list .mdc-list-item__graphic {\\n    @include feature-targeting-mixins.targets($feat-structure) {\\n      display: inline-flex;\\n    }\\n  }\\n  // stylelint-enable plugin/selector-bem-pattern\\n\\n  .mdc-list-item__meta {\\n    // stylelint-disable selector-class-pattern\\n    &:not(.material-icons) {\\n      @include typography-mixins.typography(caption, $query);\\n    }\\n    // stylelint-enable selector-class-pattern\\n\\n    @include feature-targeting-mixins.targets($feat-structure) {\\n      @include rtl-mixins.reflexive-property(margin, auto, 0, \\".mdc-list-item\\");\\n    }\\n  }\\n\\n  .mdc-list-item__text {\\n    @include typography-mixins.overflow-ellipsis($query);\\n  }\\n\\n  // Disable interaction on label elements that may automatically\\n  // toggle corresponding checkbox / radio input.\\n  .mdc-list-item__text[for] {\\n    @include feature-targeting-mixins.targets($feat-structure) {\\n      pointer-events: none;\\n    }\\n  }\\n\\n  .mdc-list-item__primary-text {\\n    @include typography-mixins.overflow-ellipsis($query);\\n    @include typography-mixins.baseline-top($item-primary-text-baseline-height, $query);\\n    @include typography-mixins.baseline-bottom($item-secondary-text-baseline-height, $query);\\n\\n    @include feature-targeting-mixins.targets($feat-structure) {\\n      display: block;\\n    }\\n\\n    // stylelint-disable plugin/selector-bem-pattern\\n    .mdc-list--dense & {\\n      @include typography-mixins.baseline-top($dense-item-primary-text-baseline-height, $query);\\n      @include typography-mixins.baseline-bottom($item-secondary-text-baseline-height, $query);\\n    }\\n    // stylelint-enable plugin/selector-bem-pattern\\n  }\\n\\n  .mdc-list-item__secondary-text {\\n    @include typography-mixins.typography(body2, $query);\\n    @include typography-mixins.overflow-ellipsis($query);\\n    @include typography-mixins.baseline-top($item-secondary-text-baseline-height, $query);\\n\\n    @include feature-targeting-mixins.targets($feat-structure) {\\n      display: block;\\n    }\\n\\n    // stylelint-disable plugin/selector-bem-pattern\\n    .mdc-list--dense & {\\n      @include typography-mixins.baseline-top($item-secondary-text-baseline-height, $query);\\n\\n      @include feature-targeting-mixins.targets($feat-structure) {\\n        font-size: inherit;\\n      }\\n    }\\n    // stylelint-enable plugin/selector-bem-pattern\\n  }\\n\\n  // stylelint-disable plugin/selector-bem-pattern\\n  .mdc-list--dense .mdc-list-item {\\n    @include feature-targeting-mixins.targets($feat-structure) {\\n      height: 40px;\\n    }\\n  }\\n\\n  .mdc-list--dense .mdc-list-item__graphic {\\n    @include feature-targeting-mixins.targets($feat-structure) {\\n      @include graphic-size_(20px);\\n    }\\n  }\\n\\n  .mdc-list--avatar-list .mdc-list-item {\\n    @include feature-targeting-mixins.targets($feat-structure) {\\n      height: 56px;\\n    }\\n  }\\n\\n  .mdc-list--avatar-list .mdc-list-item__graphic {\\n    @include feature-targeting-mixins.targets($feat-structure) {\\n      @include graphic-size_(40px);\\n\\n      border-radius: 50%;\\n    }\\n  }\\n\\n  .mdc-list--two-line .mdc-list-item__text {\\n    @include feature-targeting-mixins.targets($feat-structure) {\\n      align-self: flex-start;\\n    }\\n  }\\n\\n  .mdc-list--two-line .mdc-list-item {\\n    @include feature-targeting-mixins.targets($feat-structure) {\\n      height: 72px;\\n    }\\n  }\\n\\n  .mdc-list--two-line.mdc-list--dense .mdc-list-item,\\n  .mdc-list--avatar-list.mdc-list--dense .mdc-list-item {\\n    @include feature-targeting-mixins.targets($feat-structure) {\\n      height: 60px;\\n    }\\n  }\\n\\n  .mdc-list--avatar-list.mdc-list--dense .mdc-list-item__graphic {\\n    @include feature-targeting-mixins.targets($feat-structure) {\\n      @include graphic-size_(36px);\\n    }\\n  }\\n\\n  // Only change mouse cursor for interactive list items which are not disabled.\\n  :not(.mdc-list--non-interactive) > :not(.mdc-list-item--disabled).mdc-list-item {\\n    @include feature-targeting-mixins.targets($feat-structure) {\\n      cursor: pointer;\\n    }\\n  }\\n\\n  // Override anchor tag styles for the use-case of a list being used for navigation\\n  // stylelint-disable selector-max-type,selector-no-qualifying-type\\n  a.mdc-list-item {\\n    @include feature-targeting-mixins.targets($feat-structure) {\\n      color: inherit;\\n      text-decoration: none;\\n    }\\n  }\\n  // stylelint-enable selector-max-type,selector-no-qualifying-type\\n\\n  .mdc-list-divider {\\n    @include feature-targeting-mixins.targets($feat-structure) {\\n      height: 0;\\n      margin: 0;\\n      border: none;\\n      border-bottom-width: 1px;\\n      border-bottom-style: solid;\\n    }\\n  }\\n\\n  // Note: ideally we\'d be able to hoist this to the top-level `$feat-color`, but doing so\\n  // will cause the `border` declaration on `.mdc-list-divider` above to override it.\\n  @include divider-color($divider-color, $query);\\n\\n  .mdc-list-divider--padded {\\n    @include feature-targeting-mixins.targets($feat-structure) {\\n      // Leave gaps on each side to match the padding on list items\\n      margin: 0 variables.$side-padding;\\n    }\\n  }\\n\\n  .mdc-list-divider--inset {\\n    @include feature-targeting-mixins.targets($feat-structure) {\\n      @include rtl-mixins.reflexive-box(margin, left, variables.$text-offset, \\".mdc-list-group\\");\\n\\n      width: calc(100% - #{variables.$text-offset});\\n    }\\n  }\\n\\n  .mdc-list-divider--inset.mdc-list-divider--padded {\\n    @include feature-targeting-mixins.targets($feat-structure) {\\n      width: calc(100% - #{variables.$text-offset} - #{variables.$side-padding});\\n    }\\n  }\\n\\n  .mdc-list-group {\\n    @include feature-targeting-mixins.targets($feat-structure) {\\n      // Cancel top/bottom padding on individual lists within group\\n      .mdc-list {\\n        padding: 0;\\n      }\\n    }\\n  }\\n\\n  .mdc-list-group__subheader {\\n    $mdc-list-subheader-virtual-height: 3rem;\\n    $mdc-list-subheader-leading: map.get(map.get(typography-variables.$styles, body1), line-height);\\n    $mdc-list-subheader-margin: calc((#{$mdc-list-subheader-virtual-height} - #{$mdc-list-subheader-leading}) / 2);\\n\\n    @include typography-mixins.typography(subtitle1, $query);\\n\\n    @include feature-targeting-mixins.targets($feat-structure) {\\n      margin: $mdc-list-subheader-margin variables.$side-padding;\\n    }\\n  }\\n}\\n\\n// This API is intended for use by frameworks that may want to separate the ripple-related styles from the other\\n// list styles. It is recommended that most users use `mdc-list-core-styles` instead.\\n@mixin ripple($query: feature-targeting-functions.all()) {\\n  @include ripple-mixins.common($query); // COPYBARA_COMMENT_THIS_LINE\\n\\n  // List items should support states by default, but it should be possible to opt out.\\n  // Direct child combinator is necessary for non-interactive modifier on parent to not\\n  // match this selector.\\n  :not(.mdc-list--non-interactive) > :not(.mdc-list-item--disabled).mdc-list-item {\\n    @include item-interactive-ripple_($query);\\n  }\\n\\n  // Set styles only for focus state on disabled list item.\\n  :not(.mdc-list--non-interactive) > .mdc-list-item--disabled {\\n    @include ripple-mixins.surface($query: $query);\\n    @include ripple-mixins.radius-bounded($query: $query);\\n    @include ripple-mixins.states-base-color(theme-variables.prop-value(on-surface), $query: $query);\\n    @include ripple-mixins.states-focus-opacity(ripple-functions.states-opacity(primary, focus), $query: $query);\\n  }\\n}\\n\\n@mixin item-primary-text-ink-color($color, $query: feature-targeting-functions.all()) {\\n  $feat-color: feature-targeting-functions.create-target($query, color);\\n\\n  @include feature-targeting-mixins.targets($feat-color) {\\n    @include theme-mixins.prop(color, $color);\\n  }\\n}\\n\\n@mixin item-secondary-text-ink-color($color, $query: feature-targeting-functions.all()) {\\n  $feat-color: feature-targeting-functions.create-target($query, color);\\n\\n  .mdc-list-item__secondary-text {\\n    @include feature-targeting-mixins.targets($feat-color) {\\n      @include theme-mixins.prop(color, $color);\\n    }\\n  }\\n}\\n\\n@mixin item-graphic-fill-color($color, $query: feature-targeting-functions.all()) {\\n  $feat-color: feature-targeting-functions.create-target($query, color);\\n\\n  .mdc-list-item__graphic {\\n    @include feature-targeting-mixins.targets($feat-color) {\\n      @include theme-mixins.prop(background-color, $color);\\n    }\\n  }\\n}\\n\\n@mixin item-graphic-ink-color($color, $query: feature-targeting-functions.all()) {\\n  $feat-color: feature-targeting-functions.create-target($query, color);\\n\\n  .mdc-list-item__graphic {\\n    @include feature-targeting-mixins.targets($feat-color) {\\n      @include theme-mixins.prop(color, $color);\\n    }\\n  }\\n}\\n\\n@mixin item-meta-ink-color($color, $query: feature-targeting-functions.all()) {\\n  $feat-color: feature-targeting-functions.create-target($query, color);\\n\\n  .mdc-list-item__meta {\\n    @include feature-targeting-mixins.targets($feat-color) {\\n      @include theme-mixins.prop(color, $color);\\n    }\\n  }\\n}\\n\\n///\\n/// Sets shape radius (rounded) to single line list variant.\\n///\\n/// @param {Number | List<Number>} $radius Radius size in `px` or percentage. It can be 4 value corner or single radius.\\n///     Set to `50%` for rounded shape.\\n/// @param {Boolean} $rtl-reflexive Set to true to flip border radius in RTL context. Defaults to `false`.\\n/// @param {Number} $density-scale Density scale of single line list. Set this only when custom density is applied.\\n///     Defaults to `$mdc-list-single-line-density-scale`.\\n///\\n/// @access public\\n///\\n@mixin single-line-shape-radius(\\n  $radius,\\n  $rtl-reflexive: false,\\n  $density-scale: variables.$single-line-density-scale,\\n  $query: feature-targeting-functions.all()) {\\n\\n  $height: density-functions.prop-value(\\n    $density-config: variables.$single-line-density-config,\\n    $density-scale: $density-scale,\\n    $property-name: height,\\n  );\\n\\n  $resolved-radius: shape-functions.resolve-percentage-radius($height, $radius);\\n\\n  .mdc-list-item {\\n    @include shape-mixins.radius($resolved-radius, $rtl-reflexive, $query: $query);\\n  }\\n}\\n\\n@mixin divider-color($color, $query: feature-targeting-functions.all()) {\\n  $feat-color: feature-targeting-functions.create-target($query, color);\\n\\n  .mdc-list-divider {\\n    @include feature-targeting-mixins.targets($feat-color) {\\n      @include theme-mixins.prop(border-bottom-color, $color);\\n    }\\n  }\\n}\\n\\n@mixin group-subheader-ink-color($color, $query: feature-targeting-functions.all()) {\\n  $feat-color: feature-targeting-functions.create-target($query, color);\\n\\n  .mdc-list-group__subheader {\\n    @include feature-targeting-mixins.targets($feat-color) {\\n      @include theme-mixins.prop(color, $color);\\n    }\\n  }\\n}\\n\\n@mixin item-disabled-text-opacity($opacity, $query: feature-targeting-functions.all()) {\\n  $feat-color: feature-targeting-functions.create-target($query, color);\\n\\n  .mdc-list-item--disabled .mdc-list-item__text {\\n    @include feature-targeting-mixins.targets($feat-color) {\\n      opacity: $opacity;\\n    }\\n  }\\n}\\n\\n@mixin item-disabled-text-color($color, $query: feature-targeting-functions.all()) {\\n  $feat-color: feature-targeting-functions.create-target($query, color);\\n\\n  .mdc-list-item--disabled {\\n    .mdc-list-item__text,\\n    .mdc-list-item__primary-text,\\n    .mdc-list-item__secondary-text {\\n      @include feature-targeting-mixins.targets($feat-color) {\\n        @include theme-mixins.prop(color, $color);\\n      }\\n    }\\n  }\\n}\\n\\n///\\n/// Sets density scale to single line list variant.\\n///\\n/// @param {Number} $density-scale Density scale for list. Supported density scales are `-4`, `-3`, `-2`, `-1` and  `0`.\\n///\\n/// @access public\\n///\\n@mixin single-line-density($density-scale, $query: feature-targeting-functions.all()) {\\n  $height: density-functions.prop-value(\\n    $density-config: variables.$single-line-density-config,\\n    $density-scale: $density-scale,\\n    $property-name: height,\\n  );\\n\\n  .mdc-list-item {\\n    @include single-line-height($height, $query: $query);\\n  }\\n}\\n\\n///\\n/// Sets height to single line list variant.\\n///\\n/// @param {Number} $height Height value in `px`.\\n///\\n/// @access public\\n///\\n@mixin single-line-height($height, $query: feature-targeting-functions.all()) {\\n  $feat-structure: feature-targeting-functions.create-target($query, structure);\\n\\n  @include feature-targeting-mixins.targets($feat-structure) {\\n    height: $height;\\n  }\\n}\\n\\n//\\n// Private\\n//\\n\\n@mixin base_($query: feature-targeting-functions.all()) {\\n  $feat-color: feature-targeting-functions.create-target($query, color);\\n  $feat-structure: feature-targeting-functions.create-target($query, structure);\\n  $feat-typography: feature-targeting-functions.create-target($query, typography);\\n\\n  @include typography-mixins.typography(subtitle1, $query);\\n\\n  @include feature-targeting-mixins.targets($feat-typography) {\\n    // According to the mocks and stickersheet, the line-height is\\n    // adjusted to 24px for text content, same as for body1.\\n    /* @alternate */\\n    line-height: map.get(map.get(typography-variables.$styles, body1), line-height);\\n  }\\n\\n  @include feature-targeting-mixins.targets($feat-structure) {\\n    margin: 0;\\n    padding: 8px 0;\\n    list-style-type: none;\\n\\n    &:focus {\\n      outline: none;\\n    }\\n  }\\n\\n  @include item-primary-text-ink-color(text-primary-on-background, $query);\\n}\\n\\n@mixin item-base_ {\\n  display: flex;\\n  position: relative;\\n  align-items: center;\\n  justify-content: flex-start;\\n  padding: 0 variables.$side-padding;\\n  overflow: hidden;\\n\\n  &:focus {\\n    outline: none;\\n  }\\n}\\n\\n// Ripple styles for an interactive list item (one that is enabled and inside an interactive list).\\n@mixin item-interactive-ripple_($query: feature-targeting-functions.all()) {\\n  @include ripple-mixins.surface($query);\\n  @include ripple-mixins.radius-bounded($query: $query);\\n  @include ripple-mixins.states(theme-variables.prop-value(on-surface), false, $query);\\n  @include ripple-mixins.states-activated(primary, false, $query);\\n  @include ripple-mixins.states-selected(primary, false, $query);\\n}\\n\\n// Sets the width and height of the graphic element, as well as calculates the margins for\\n// the graphic element such that the text is always offset by 72px, which is defined within\\n// the spec.\\n@mixin graphic-size_($size) {\\n  $text-offset: 72px;\\n  $side-padding: variables.$side-padding;\\n  $margin-value: $text-offset - $side-padding - $size;\\n\\n  @include rtl-mixins.reflexive-box(margin, right, $margin-value, \\".mdc-list-item\\");\\n\\n  width: $size;\\n  height: $size;\\n}\\n","// Copyright 2016 Google Inc.\\n//\\n// Permission is hereby granted, free of charge, to any person obtaining a copy\\n// of this software and associated documentation files (the \\"Software\\"), to deal\\n// in the Software without restriction, including without limitation the rights\\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n// copies of the Software, and to permit persons to whom the Software is\\n// furnished to do so, subject to the following conditions:\\n//\\n// The above copyright notice and this permission notice shall be included in\\n// all copies or substantial portions of the Software.\\n//\\n// THE SOFTWARE IS PROVIDED \\"AS IS\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\\n// THE SOFTWARE.\\n\\n@use \\"@material/density/variables\\" as density-variables;\\n@use \\"@material/theme/variables\\" as theme-variables;\\n\\n$divider-color-on-light-bg: rgba(0, 0, 0, .12) !default;\\n$divider-color-on-dark-bg: rgba(255, 255, 255, .2) !default;\\n$side-padding: 16px !default;\\n$text-offset: 72px !default;\\n$text-disabled-opacity: theme-variables.text-emphasis(disabled) !default;\\n$text-disabled-color: on-surface !default;\\n\\n$single-line-height: 48px !default;\\n$single-line-minimum-height: 24px !default;\\n$single-line-maximum-height: $single-line-height !default;\\n$single-line-density-scale: density-variables.$default-scale !default;\\n$single-line-density-config: (\\n  height: (\\n    default: $single-line-height,\\n    maximum: $single-line-maximum-height,\\n    minimum: $single-line-minimum-height,\\n  ),\\n) !default;\\n","//\\n// Copyright 2018 Google Inc.\\n//\\n// Permission is hereby granted, free of charge, to any person obtaining a copy\\n// of this software and associated documentation files (the \\"Software\\"), to deal\\n// in the Software without restriction, including without limitation the rights\\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n// copies of the Software, and to permit persons to whom the Software is\\n// furnished to do so, subject to the following conditions:\\n//\\n// The above copyright notice and this permission notice shall be included in\\n// all copies or substantial portions of the Software.\\n//\\n// THE SOFTWARE IS PROVIDED \\"AS IS\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\\n// THE SOFTWARE.\\n//\\n\\n@use \\"@material/feature-targeting/functions\\";\\n@use \\"@material/feature-targeting/mixins\\" as feature-targeting-mixins;\\n@use \\"@material/theme/mixins\\" as theme-mixins;\\n@use \\"@material/shape/mixins\\" as shape-mixins;\\n@use \\"@material/animation/variables\\" as animation-variables;\\n@use \\"@material/elevation/mixins\\" as elevation-mixins;\\n@use \\"@material/rtl/mixins\\" as rtl-mixins;\\n@use \\"./variables\\";\\n\\n//\\n// Public\\n//\\n\\n@mixin core-styles($query: functions.all()) {\\n  $feat-structure: functions.create-target($query, structure);\\n\\n  // postcss-bem-linter: define menu-surface\\n  .mdc-menu-surface {\\n    @include base_($query);\\n    @include elevation-mixins.elevation($z-value: 8, $query: $query);\\n    @include fill-color(surface, $query);\\n    @include ink-color(on-surface, $query);\\n    @include shape-radius(medium, false, $query);\\n\\n    @include feature-targeting-mixins.targets($feat-structure) {\\n      @include rtl-mixins.reflexive-property(transform-origin, top left, top right);\\n    }\\n  }\\n\\n  .mdc-menu-surface--anchor {\\n    @include feature-targeting-mixins.targets($feat-structure) {\\n      position: relative;\\n      overflow: visible;\\n    }\\n  }\\n\\n  .mdc-menu-surface--fixed {\\n    @include feature-targeting-mixins.targets($feat-structure) {\\n      position: fixed;\\n    }\\n  }\\n  // postcss-bem-linter: end\\n}\\n\\n@mixin ink-color($color, $query: functions.all()) {\\n  $feat-color: functions.create-target($query, color);\\n\\n  @include feature-targeting-mixins.targets($feat-color) {\\n    @include theme-mixins.prop(color, $color);\\n  }\\n}\\n\\n@mixin fill-color($color, $query: functions.all()) {\\n  $feat-color: functions.create-target($query, color);\\n\\n  @include feature-targeting-mixins.targets($feat-color) {\\n    @include theme-mixins.prop(background-color, $color);\\n  }\\n}\\n\\n@mixin shape-radius($radius, $rtl-reflexive: false, $query: functions.all()) {\\n  @include shape-mixins.radius($radius, $rtl-reflexive, $query: $query);\\n}\\n\\n//\\n// Private\\n//\\n\\n@mixin base_($query: functions.all()) {\\n  $feat-structure: functions.create-target($query, structure);\\n  $feat-animation: functions.create-target($query, animation);\\n\\n  @include feature-targeting-mixins.targets($feat-structure) {\\n    display: none;\\n    position: absolute;\\n    box-sizing: border-box;\\n    max-width: calc(100vw - #{variables.$min-distance-from-edge});\\n    max-height: calc(100vh - #{variables.$min-distance-from-edge});\\n    margin: 0;\\n    padding: 0;\\n    transform: scale(1);\\n    transform-origin: top left;\\n    opacity: 0;\\n    overflow: auto;\\n    will-change: transform, opacity;\\n    z-index: variables.$z-index;\\n  }\\n\\n  @include feature-targeting-mixins.targets($feat-animation) {\\n    transition:\\n      opacity variables.$fade-in-duration linear,\\n      transform variables.$scale-duration animation-variables.$deceleration-curve-timing-function;\\n  }\\n\\n  &:focus {\\n    @include feature-targeting-mixins.targets($feat-structure) {\\n      outline: none;\\n    }\\n  }\\n\\n  // stylelint-disable-next-line selector-max-type\\n  &--open {\\n    @include feature-targeting-mixins.targets($feat-structure) {\\n      display: inline-block;\\n      transform: scale(1);\\n      opacity: 1;\\n    }\\n  }\\n\\n  &--animating-open {\\n    @include feature-targeting-mixins.targets($feat-structure) {\\n      display: inline-block;\\n      transform: scale(.8);\\n      opacity: 0;\\n    }\\n  }\\n\\n  &--animating-closed {\\n    @include feature-targeting-mixins.targets($feat-structure) {\\n      display: inline-block;\\n      opacity: 0;\\n    }\\n\\n    @include feature-targeting-mixins.targets($feat-animation) {\\n      transition: opacity variables.$fade-out-duration linear;\\n    }\\n  }\\n}\\n","//\\n// Copyright 2018 Google Inc.\\n//\\n// Permission is hereby granted, free of charge, to any person obtaining a copy\\n// of this software and associated documentation files (the \\"Software\\"), to deal\\n// in the Software without restriction, including without limitation the rights\\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n// copies of the Software, and to permit persons to whom the Software is\\n// furnished to do so, subject to the following conditions:\\n//\\n// The above copyright notice and this permission notice shall be included in\\n// all copies or substantial portions of the Software.\\n//\\n// THE SOFTWARE IS PROVIDED \\"AS IS\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\\n// THE SOFTWARE.\\n//\\n\\n$fade-in-duration: .03s !default;\\n$fade-out-duration: .075s !default;\\n$scale-duration: .12s !default;\\n$min-distance-from-edge: 32px !default;\\n$z-index: 8 !default; // One above mdc-dialog\\n","//\\n// Copyright 2018 Google Inc.\\n//\\n// Permission is hereby granted, free of charge, to any person obtaining a copy\\n// of this software and associated documentation files (the \\"Software\\"), to deal\\n// in the Software without restriction, including without limitation the rights\\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n// copies of the Software, and to permit persons to whom the Software is\\n// furnished to do so, subject to the following conditions:\\n//\\n// The above copyright notice and this permission notice shall be included in\\n// all copies or substantial portions of the Software.\\n//\\n// THE SOFTWARE IS PROVIDED \\"AS IS\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\\n// THE SOFTWARE.\\n//\\n\\n@use \\"sass:math\\";\\n@use \\"@material/elevation/mixins\\" as elevation-mixins;\\n@use \\"@material/feature-targeting/functions\\";\\n@use \\"@material/feature-targeting/mixins\\" as feature-targeting-mixins;\\n@use \\"@material/rtl/mixins\\" as rtl-mixins;\\n@use \\"@material/list/mixins\\" as list-mixins;\\n@use \\"@material/list/variables\\" as list-variables;\\n@use \\"@material/ripple/mixins\\" as ripple-mixins;\\n@use \\"./variables\\";\\n\\n@mixin core-styles($query: functions.all()) {\\n  $feat-color: functions.create-target($query, color);\\n  $feat-structure: functions.create-target($query, structure);\\n\\n  @include ripple-mixins.common($query); // COPYBARA_COMMENT_THIS_LINE\\n  @include elevation-mixins.overlay-common($query); // COPYBARA_COMMENT_THIS_LINE\\n\\n  // Customize the menu-surface and contained list to match the mdc-menu styles.\\n  .mdc-menu {\\n    @include list-mixins.item-meta-ink-color(variables.$ink-color, $query);\\n    @include list-mixins.item-graphic-ink-color(variables.$ink-color, $query);\\n\\n    @include feature-targeting-mixins.targets($feat-structure) {\\n      min-width: variables.$min-width;\\n    }\\n\\n    // Include mdc-list selector to ensure list-inside-menu overrides default list styles\\n    .mdc-list {\\n      @include list-mixins.item-primary-text-ink-color(variables.$ink-color, $query);\\n      @include elevation-mixins.overlay-surface-position($query: $query);\\n      @include elevation-mixins.overlay-dimensions(100%, $query: $query);\\n    }\\n\\n    .mdc-list-divider {\\n      @include feature-targeting-mixins.targets($feat-structure) {\\n        margin: 8px 0;\\n      }\\n    }\\n\\n    .mdc-list-item {\\n      @include feature-targeting-mixins.targets($feat-structure) {\\n        user-select: none;\\n      }\\n    }\\n\\n    .mdc-list-item--disabled {\\n      @include feature-targeting-mixins.targets($feat-structure) {\\n        cursor: auto;\\n      }\\n    }\\n\\n    //stylelint-disable selector-no-qualifying-type\\n    a.mdc-list-item .mdc-list-item__text,\\n    a.mdc-list-item .mdc-list-item__graphic {\\n      @include feature-targeting-mixins.targets($feat-structure) {\\n        pointer-events: none;\\n      }\\n    }\\n    // stylelint-enable selector-no-qualifying-type\\n  }\\n\\n  // postcss-bem-linter: define menu\\n  .mdc-menu__selection-group {\\n    @include feature-targeting-mixins.targets($feat-structure) {\\n      padding: 0;\\n      fill: currentColor;\\n    }\\n\\n    .mdc-list-item {\\n      @include feature-targeting-mixins.targets($feat-structure) {\\n        @include rtl-mixins.reflexive-property(padding, 56px, list-variables.$side-padding);\\n      }\\n    }\\n\\n    // Extra specificity required to override `display` property on `mdc-list-item__graphic`.\\n    .mdc-menu__selection-group-icon {\\n      @include feature-targeting-mixins.targets($feat-structure) {\\n        @include rtl-mixins.reflexive-position(left, 16px);\\n\\n        display: none;\\n        position: absolute;\\n        // IE11 requires the icon to be vertically centered due to its absolute positioning\\n        top: 50%;\\n        transform: translateY(-50%);\\n      }\\n    }\\n  }\\n  // postcss-bem-linter: end\\n\\n  // stylelint-disable-next-line plugin/selector-bem-pattern\\n  .mdc-menu-item--selected .mdc-menu__selection-group-icon {\\n    @include feature-targeting-mixins.targets($feat-structure) {\\n      display: inline;\\n    }\\n  }\\n}\\n\\n@mixin width($width, $query: functions.all()) {\\n  $feat-structure: functions.create-target($query, color);\\n\\n  @include feature-targeting-mixins.targets($feat-structure) {\\n    @if math.is-unitless($width) {\\n      width: $width * variables.$width-base;\\n    } @else {\\n      width: $width;\\n    }\\n  }\\n}\\n","//\\n// Copyright 2018 Google Inc.\\n//\\n// Permission is hereby granted, free of charge, to any person obtaining a copy\\n// of this software and associated documentation files (the \\"Software\\"), to deal\\n// in the Software without restriction, including without limitation the rights\\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n// copies of the Software, and to permit persons to whom the Software is\\n// furnished to do so, subject to the following conditions:\\n//\\n// The above copyright notice and this permission notice shall be included in\\n// all copies or substantial portions of the Software.\\n//\\n// THE SOFTWARE IS PROVIDED \\"AS IS\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\\n// THE SOFTWARE.\\n//\\n\\n@use \\"@material/theme/mixins\\";\\n@use \\"@material/theme/variables\\";\\n\\n$ink-color: rgba(variables.prop-value(on-surface), variables.text-emphasis(high)) !default;\\n\\n$width-base: 56px !default;\\n$min-width: 2 * $width-base !default;\\n","//\\n// Copyright 2017 Google Inc.\\n//\\n// Permission is hereby granted, free of charge, to any person obtaining a copy\\n// of this software and associated documentation files (the \\"Software\\"), to deal\\n// in the Software without restriction, including without limitation the rights\\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n// copies of the Software, and to permit persons to whom the Software is\\n// furnished to do so, subject to the following conditions:\\n//\\n// The above copyright notice and this permission notice shall be included in\\n// all copies or substantial portions of the Software.\\n//\\n// THE SOFTWARE IS PROVIDED \\"AS IS\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\\n// THE SOFTWARE.\\n//\\n\\n@use \\"sass:list\\";\\n@use \\"@material/feature-targeting/functions\\";\\n@use \\"@material/feature-targeting/mixins\\" as feature-targeting-mixins;\\n@use \\"@material/animation/functions\\" as functions2;\\n@use \\"@material/animation/variables\\" as animation-variables;\\n@use \\"@material/rtl/mixins\\" as rtl-mixins;\\n@use \\"@material/typography/mixins\\" as typography-mixins;\\n@use \\"@material/typography/variables\\" as variables2;\\n@use \\"@material/theme/mixins\\" as theme-mixins;\\n@use \\"@material/theme/variables\\" as theme-variables;\\n@use \\"@material/list/mixins\\" as list-mixins;\\n@use \\"@material/ripple/mixins\\" as ripple-mixins;\\n@use \\"@material/shape/mixins\\" as shape-mixins;\\n@use \\"@material/elevation/mixins\\" as elevation-mixins;\\n@use \\"./variables\\";\\n\\n//\\n// Public\\n//\\n\\n@mixin core-styles($query: functions.all()) {\\n  $feat-structure: functions.create-target($query, structure);\\n  $feat-animation: functions.create-target($query, animation);\\n\\n  // postcss-bem-linter: define drawer\\n  .mdc-drawer {\\n    @include title-ink-color(variables.$title-ink-color, $query: $query);\\n    @include subtitle-ink-color(variables.$subtitle-ink-color, $query: $query);\\n    @include border-color(variables.$divider-color, $query: $query);\\n    @include surface-fill-color(variables.$surface-fill-color, $query: $query);\\n    @include item-icon-ink-color(variables.$item-inactive-ink-color, $query: $query);\\n    @include item-text-ink-color(variables.$item-inactive-ink-color, $query: $query);\\n    @include item-activated-icon-ink-color(variables.$item-activated-ink-color, $query: $query);\\n    @include item-activated-text-ink-color(variables.$item-activated-ink-color, $query: $query);\\n    @include shape-radius(large, $query: $query);\\n    @include item-shape-radius(4px, $query: $query);\\n    @include z-index(variables.$z-index, $query: $query);\\n    @include width(variables.$width, $query: $query);\\n\\n    @include feature-targeting-mixins.targets($feat-structure) {\\n      display: flex;\\n      flex-direction: column;\\n      flex-shrink: 0;\\n      box-sizing: border-box;\\n      height: 100%;\\n      /* @noflip */\\n      border-right-width: 1px;\\n      /* @noflip */\\n      border-right-style: solid;\\n      overflow: hidden;\\n\\n      @include rtl-mixins.rtl {\\n        /* @noflip */\\n        border-right-width: 0;\\n        /* @noflip */\\n        border-left-width: 1px;\\n        /* @noflip */\\n        border-right-style: none;\\n        /* @noflip */\\n        border-left-style: solid;\\n      }\\n    }\\n\\n    @include feature-targeting-mixins.targets($feat-animation) {\\n      transition-property: transform;\\n      transition-timing-function: animation-variables.$standard-curve-timing-function;\\n    }\\n\\n    @include list-item_($query);\\n  }\\n\\n  .mdc-drawer--animate {\\n    @include feature-targeting-mixins.targets($feat-structure) {\\n      transform: translateX(-100%);\\n\\n      @include rtl-mixins.rtl {\\n        transform: translateX(100%);\\n      }\\n    }\\n  }\\n\\n  .mdc-drawer--opening {\\n    @include feature-targeting-mixins.targets($feat-structure) {\\n      transform: translateX(0);\\n\\n      // Required to level the specificity with animate class.\\n      @include rtl-mixins.rtl {\\n        transform: translateX(0);\\n      }\\n    }\\n\\n    @include feature-targeting-mixins.targets($feat-animation) {\\n      transition-duration: variables.$animation-enter;\\n    }\\n  }\\n\\n  .mdc-drawer--closing {\\n    @include feature-targeting-mixins.targets($feat-structure) {\\n      transform: translateX(-100%);\\n\\n      @include rtl-mixins.rtl {\\n        transform: translateX(100%);\\n      }\\n    }\\n\\n    @include feature-targeting-mixins.targets($feat-animation) {\\n      transition-duration: variables.$animation-exit;\\n    }\\n  }\\n\\n  .mdc-drawer__header {\\n    @include feature-targeting-mixins.targets($feat-structure) {\\n      flex-shrink: 0;\\n      box-sizing: border-box;\\n      min-height: 64px; // same as $mdc-top-app-bar-row-height\\n      padding: 0 variables.$surface-padding 4px;\\n    }\\n  }\\n\\n  .mdc-drawer__title {\\n    @include typography-mixins.typography(headline6, $query: $query);\\n    @include typography-mixins.baseline-top(36px, $query: $query);\\n    @include typography-mixins.baseline-bottom(20px, $query: $query);\\n  }\\n\\n  .mdc-drawer__subtitle {\\n    @include typography-mixins.typography(body2, $query: $query);\\n    @include typography-mixins.baseline-top(20px, $query: $query);\\n\\n    @include feature-targeting-mixins.targets($feat-structure) {\\n      margin-bottom: 0;\\n    }\\n  }\\n\\n  .mdc-drawer__content {\\n    @include feature-targeting-mixins.targets($feat-structure) {\\n      height: 100%;\\n      overflow-y: auto;\\n      -webkit-overflow-scrolling: touch;\\n    }\\n  }\\n\\n  // postcss-bem-linter: end\\n}\\n\\n@mixin dismissible-core-styles($query: functions.all()) {\\n  $feat-structure: functions.create-target($query, structure);\\n\\n  .mdc-drawer--dismissible {\\n    @include feature-targeting-mixins.targets($feat-structure) {\\n      @include rtl-mixins.reflexive-position(left, 0);\\n\\n      display: none;\\n      position: absolute;\\n\\n      &.mdc-drawer--open {\\n        display: flex;\\n      }\\n    }\\n  }\\n\\n  .mdc-drawer-app-content {\\n    @include feature-targeting-mixins.targets($feat-structure) {\\n      @include rtl-mixins.reflexive-box(margin, left, 0);\\n\\n      position: relative;\\n    }\\n  }\\n}\\n\\n@mixin modal-core-styles($query: functions.all()) {\\n  $feat-structure: functions.create-target($query, structure);\\n  $feat-animation: functions.create-target($query, animation);\\n\\n  .mdc-drawer--modal {\\n    @include scrim-fill-color(variables.$modal-scrim-color, $query: $query);\\n    @include elevation-mixins.elevation(variables.$modal-elevation, $query: $query);\\n\\n    @include feature-targeting-mixins.targets($feat-structure) {\\n      @include rtl-mixins.reflexive-position(left, 0);\\n\\n      display: none;\\n      position: fixed;\\n    }\\n\\n    &.mdc-drawer--open {\\n      @include feature-targeting-mixins.targets($feat-structure) {\\n        display: flex;\\n      }\\n    }\\n  }\\n\\n  .mdc-drawer-scrim {\\n    @include feature-targeting-mixins.targets($feat-structure) {\\n      display: none;\\n      position: fixed;\\n      top: 0;\\n      left: 0;\\n      width: 100%;\\n      height: 100%;\\n      z-index: variables.$z-index - 1;\\n    }\\n\\n    @include feature-targeting-mixins.targets($feat-animation) {\\n      transition-property: opacity;\\n      transition-timing-function: animation-variables.$standard-curve-timing-function;\\n    }\\n\\n    .mdc-drawer--open + & {\\n      @include feature-targeting-mixins.targets($feat-structure) {\\n        display: block;\\n      }\\n    }\\n\\n    .mdc-drawer--animate + & {\\n      @include feature-targeting-mixins.targets($feat-structure) {\\n        opacity: 0;\\n      }\\n    }\\n\\n    .mdc-drawer--opening + & {\\n      @include feature-targeting-mixins.targets($feat-animation) {\\n        transition-duration: variables.$animation-enter;\\n      }\\n\\n      @include feature-targeting-mixins.targets($feat-structure) {\\n        opacity: 1;\\n      }\\n    }\\n\\n    .mdc-drawer--closing + & {\\n      @include feature-targeting-mixins.targets($feat-animation) {\\n        transition-duration: variables.$animation-exit;\\n      }\\n\\n      @include feature-targeting-mixins.targets($feat-structure) {\\n        opacity: 0;\\n      }\\n    }\\n  }\\n}\\n\\n@mixin activated-overlay-color($color, $query: functions.all()) {\\n  :not(.mdc-list--non-interactive) > .mdc-list-item {\\n    @include ripple-mixins.states-activated($color, $query: $query);\\n  }\\n}\\n\\n@mixin border-color($color, $query: functions.all()) {\\n  $feat-color: functions.create-target($query, color);\\n  $value: rgba(theme-variables.prop-value($color), variables.$divider-opacity);\\n\\n  @include feature-targeting-mixins.targets($feat-color) {\\n    @include theme-mixins.prop(border-color, $value);\\n  }\\n}\\n\\n@mixin item-shape-radius($radius, $rtl-reflexive: true, $query: functions.all()) {\\n  @include list-mixins.single-line-shape-radius($radius, $rtl-reflexive, $query: $query);\\n}\\n\\n@mixin shape-radius($radius, $query: functions.all()) {\\n  @if list.length($radius) > 2 {\\n    @error \\"Invalid radius: \'#{$radius}\' component doesn\'t allow customizing all corners\\";\\n  } @else if list.length($radius) == 2 {\\n    $radius: 0 list.nth($radius, 1) list.nth($radius, 2) 0;\\n  } @else {\\n    $radius: 0 $radius $radius 0;\\n  }\\n\\n  @include shape-mixins.radius($radius, $rtl-reflexive: true, $query: $query);\\n}\\n\\n@mixin divider-color($color, $query: functions.all()) {\\n  $value: rgba(theme-variables.prop-value($color), variables.$divider-opacity);\\n\\n  @include list-mixins.divider-color($value, $query: $query);\\n}\\n\\n@mixin title-ink-color($color, $query: functions.all()) {\\n  $feat-color: functions.create-target($query, color);\\n  $value: rgba(theme-variables.prop-value($color), variables.$title-ink-opacity);\\n\\n  .mdc-drawer__title {\\n    @include feature-targeting-mixins.targets($feat-color) {\\n      @include theme-mixins.prop(color, $value);\\n    }\\n  }\\n}\\n\\n@mixin subtitle-ink-color($color, $query: functions.all()) {\\n  $feat-color: functions.create-target($query, color);\\n  $value: rgba(theme-variables.prop-value($color), variables.$subtitle-ink-opacity);\\n\\n  @include list-mixins.group-subheader-ink-color($value, $query: $query);\\n\\n  .mdc-drawer__subtitle {\\n    @include feature-targeting-mixins.targets($feat-color) {\\n      @include theme-mixins.prop(color, $value);\\n    }\\n  }\\n}\\n\\n@mixin fill-color-accessible($color, $query: functions.all()) {\\n  $accessibleColor: theme-variables.accessible-ink-color($color);\\n\\n  @include title-ink-color($accessibleColor, $query: $query);\\n  @include subtitle-ink-color($accessibleColor, $query: $query);\\n  @include item-text-ink-color($accessibleColor, $query: $query);\\n  @include item-icon-ink-color($accessibleColor, $query: $query);\\n  @include surface-fill-color($color, $query: $query);\\n}\\n\\n@mixin item-icon-ink-color($color, $query: functions.all()) {\\n  $value: rgba(theme-variables.prop-value($color), variables.$item-inactive-icon-ink-opacity);\\n\\n  @include list-mixins.item-graphic-ink-color($value, $query: $query);\\n}\\n\\n@mixin item-activated-icon-ink-color($color, $query: functions.all()) {\\n  $value: rgba(theme-variables.prop-value($color), variables.$item-active-icon-ink-opacity);\\n\\n  .mdc-list-item--activated {\\n    @include list-mixins.item-graphic-ink-color($value, $query: $query);\\n  }\\n}\\n\\n@mixin item-activated-text-ink-color($color, $query: functions.all()) {\\n  $value: rgba(theme-variables.prop-value($color), variables.$item-active-text-ink-opacity);\\n\\n  .mdc-list-item--activated {\\n    @include list-mixins.item-primary-text-ink-color($value, $query: $query);\\n  }\\n}\\n\\n@mixin item-text-ink-color($color, $query: functions.all()) {\\n  $value: rgba(theme-variables.prop-value($color), variables.$item-inactive-text-ink-opacity);\\n\\n  .mdc-list-item {\\n    @include list-mixins.item-primary-text-ink-color($value, $query: $query);\\n  }\\n}\\n\\n@mixin surface-fill-color($color, $query: functions.all()) {\\n  $feat-color: functions.create-target($query, color);\\n  $value: theme-variables.prop-value($color);\\n\\n  @include feature-targeting-mixins.targets($feat-color) {\\n    @include theme-mixins.prop(background-color, $value);\\n  }\\n}\\n\\n@mixin scrim-fill-color($color, $query: functions.all()) {\\n  $feat-color: functions.create-target($query, color);\\n  $value: rgba(theme-variables.prop-value($color), variables.$modal-scrim-opacity);\\n\\n  + .mdc-drawer-scrim {\\n    @include feature-targeting-mixins.targets($feat-color) {\\n      @include theme-mixins.prop(background-color, $value);\\n    }\\n  }\\n}\\n\\n@mixin z-index($value, $query: functions.all()) {\\n  $feat-structure: functions.create-target($query, structure);\\n\\n  @include feature-targeting-mixins.targets($feat-structure) {\\n    z-index: $value;\\n  }\\n}\\n\\n@mixin width($width, $query: functions.all()) {\\n  $feat-structure: functions.create-target($query, structure);\\n\\n  @include feature-targeting-mixins.targets($feat-structure) {\\n    width: $width;\\n  }\\n\\n  &.mdc-drawer--open:not(.mdc-drawer--closing) + .mdc-drawer-app-content {\\n    @include feature-targeting-mixins.targets($feat-structure) {\\n      @include rtl-mixins.reflexive-box(margin, left, $width);\\n    }\\n  }\\n}\\n\\n//\\n// Private\\n//\\n@mixin list-item_($query: functions.all()) {\\n  $feat-structure: functions.create-target($query, structure);\\n\\n  // postcss-bem-linter: ignore\\n  .mdc-list-item {\\n    @include typography-mixins.typography(subtitle2, $query: $query);\\n\\n    @include feature-targeting-mixins.targets($feat-structure) {\\n      height: calc(48px - 2 * #{variables.$list-item-spacing});\\n      // To accomodate margin conflict.\\n      margin: (variables.$list-item-spacing * 2) 8px;\\n      padding: 0 variables.$surface-padding / 2;\\n    }\\n  }\\n\\n  // postcss-bem-linter: ignore\\n  .mdc-list-item:nth-child(1) {\\n    @include feature-targeting-mixins.targets($feat-structure) {\\n      margin-top: 2px;\\n    }\\n  }\\n\\n  // postcss-bem-linter: ignore\\n  .mdc-list-item:nth-last-child(1) {\\n    @include feature-targeting-mixins.targets($feat-structure) {\\n      margin-bottom: 0;\\n    }\\n  }\\n\\n  // postcss-bem-linter: ignore\\n  .mdc-list-group__subheader {\\n    @include typography-mixins.typography(body2, $query: $query);\\n    @include typography-mixins.baseline-top(24px, $query: $query);\\n\\n    @include feature-targeting-mixins.targets($feat-structure) {\\n      margin: 0;\\n      padding: 0 variables.$surface-padding;\\n    }\\n  }\\n\\n  // postcss-bem-linter: ignore\\n  .mdc-list-divider {\\n    @include feature-targeting-mixins.targets($feat-structure) {\\n      margin: 3px 0 4px;\\n    }\\n  }\\n\\n  // Prevents list item children from being included in the click target.\\n  // postcss-bem-linter: ignore\\n  .mdc-list-item__text,\\n  .mdc-list-item__graphic {\\n    @include feature-targeting-mixins.targets($feat-structure) {\\n      pointer-events: none;\\n    }\\n  }\\n}\\n","//\\n// Copyright 2017 Google Inc.\\n//\\n// Permission is hereby granted, free of charge, to any person obtaining a copy\\n// of this software and associated documentation files (the \\"Software\\"), to deal\\n// in the Software without restriction, including without limitation the rights\\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n// copies of the Software, and to permit persons to whom the Software is\\n// furnished to do so, subject to the following conditions:\\n//\\n// The above copyright notice and this permission notice shall be included in\\n// all copies or substantial portions of the Software.\\n//\\n// THE SOFTWARE IS PROVIDED \\"AS IS\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\\n// THE SOFTWARE.\\n//\\n\\n@use \\"@material/theme/variables\\";\\n\\n// Colors\\n$title-ink-color: variables.prop-value(on-surface) !default;\\n$subtitle-ink-color: variables.prop-value(on-surface) !default;\\n$item-inactive-ink-color: variables.prop-value(on-surface) !default;\\n$item-activated-ink-color: variables.prop-value(primary) !default;\\n$divider-color: variables.prop-value(on-surface) !default;\\n$surface-fill-color: variables.prop-value(surface) !default;\\n\\n// Opacity\\n$title-ink-opacity: variables.text-emphasis(high) !default;\\n$subtitle-ink-opacity: variables.text-emphasis(medium) !default;\\n$item-inactive-icon-ink-opacity: variables.text-emphasis(medium) !default;\\n$item-inactive-text-ink-opacity: variables.text-emphasis(high) !default;\\n$item-active-icon-ink-opacity: 1 !default;\\n$item-active-text-ink-opacity: variables.text-emphasis(high) !default;\\n$divider-opacity: .12 !default;\\n\\n// Widths\\n$width: 256px !default;\\n$list-item-spacing: 4px !default;\\n$surface-padding: 16px !default;\\n\\n// Animations\\n$animation-enter: 250ms !default;\\n$animation-exit: 200ms !default;\\n\\n// Scrim\\n$modal-scrim-color: variables.prop-value(on-surface) !default;\\n$modal-scrim-opacity: .32 !default;\\n\\n$z-index: 6 !default;\\n$modal-elevation: 16 !default;\\n","// Copyright 2017 Google Inc.\\n//\\n// Permission is hereby granted, free of charge, to any person obtaining a copy\\n// of this software and associated documentation files (the \\"Software\\"), to deal\\n// in the Software without restriction, including without limitation the rights\\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n// copies of the Software, and to permit persons to whom the Software is\\n// furnished to do so, subject to the following conditions:\\n//\\n// The above copyright notice and this permission notice shall be included in\\n// all copies or substantial portions of the Software.\\n//\\n// THE SOFTWARE IS PROVIDED \\"AS IS\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\\n// THE SOFTWARE.\\n\\n@use \\"sass:list\\";\\n@use \\"sass:map\\";\\n@use \\"./variables\\";\\n@use \\"./mixins\\";\\n\\n:root {\\n  @each $size in map.keys(variables.$columns) {\\n    --mdc-layout-grid-margin-#{$size}: #{map.get(variables.$default-margin, $size)};\\n    --mdc-layout-grid-gutter-#{$size}: #{map.get(variables.$default-gutter, $size)};\\n    --mdc-layout-grid-column-width-#{$size}: #{map.get(variables.$column-width, $size)};\\n  }\\n}\\n\\n// postcss-bem-linter: define layout-grid\\n.mdc-layout-grid {\\n  @each $size in map.keys(variables.$columns) {\\n    @include mixins.media-query_($size) {\\n      $margin: map.get(variables.$default-margin, $size);\\n\\n      @include mixins.layout-grid($size, $margin, variables.$max-width);\\n    }\\n  }\\n}\\n\\n.mdc-layout-grid__inner {\\n  @each $size in map.keys(variables.$columns) {\\n    @include mixins.media-query_($size) {\\n      $margin: map.get(variables.$default-margin, $size);\\n      $gutter: map.get(variables.$default-gutter, $size);\\n\\n      @include mixins.inner($size, $margin, $gutter);\\n    }\\n  }\\n}\\n\\n.mdc-layout-grid__cell {\\n  // select the upper breakpoint\\n  $upper-breakpoint: list.nth(map.keys(variables.$columns), 1);\\n\\n  @each $size in map.keys(variables.$columns) {\\n    @include mixins.media-query_($size) {\\n      $gutter: map.get(variables.$default-gutter, $size);\\n\\n      @include mixins.cell($size, variables.$default-column-span, $gutter);\\n\\n      @for $span from 1 through map.get(variables.$columns, $upper-breakpoint) {\\n        // Span classes.\\n        // stylelint-disable max-nesting-depth\\n        @at-root .mdc-layout-grid__cell--span-#{$span},\\n        .mdc-layout-grid__cell--span-#{$span}-#{$size} {\\n          @include mixins.cell-span_($size, $span, $gutter);\\n        }\\n        // stylelint-enable max-nesting-depth\\n      }\\n    }\\n  }\\n\\n  // Order override classes.\\n  @for $i from 1 through map.get(variables.$columns, $upper-breakpoint) {\\n    &--order-#{$i} {\\n      @include mixins.cell-order($i);\\n    }\\n  }\\n\\n  // Alignment classes.\\n  &--align-top {\\n    @include mixins.cell-align(top);\\n  }\\n\\n  &--align-middle {\\n    @include mixins.cell-align(middle);\\n  }\\n\\n  &--align-bottom {\\n    @include mixins.cell-align(bottom);\\n  }\\n}\\n\\n.mdc-layout-grid--fixed-column-width {\\n  @each $size in map.keys(variables.$columns) {\\n    @include mixins.media-query_($size) {\\n      $margin: map.get(variables.$default-margin, $size);\\n      $gutter: map.get(variables.$default-gutter, $size);\\n      $column-width: map.get(variables.$column-width, $size);\\n\\n      @include mixins.fixed-column-width($size, $margin, $gutter, $column-width);\\n    }\\n  }\\n}\\n\\n.mdc-layout-grid--align-left {\\n  margin-right: auto;\\n  margin-left: 0;\\n}\\n\\n.mdc-layout-grid--align-right {\\n  margin-right: 0;\\n  margin-left: auto;\\n}\\n// postcss-bem-linter: end\\n","// Copyright 2017 Google Inc.\\n//\\n// Permission is hereby granted, free of charge, to any person obtaining a copy\\n// of this software and associated documentation files (the \\"Software\\"), to deal\\n// in the Software without restriction, including without limitation the rights\\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n// copies of the Software, and to permit persons to whom the Software is\\n// furnished to do so, subject to the following conditions:\\n//\\n// The above copyright notice and this permission notice shall be included in\\n// all copies or substantial portions of the Software.\\n//\\n// THE SOFTWARE IS PROVIDED \\"AS IS\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\\n// THE SOFTWARE.\\n\\n@use \\"sass:list\\";\\n@use \\"sass:map\\";\\n@use \\"sass:math\\";\\n@use \\"./variables\\";\\n\\n// returns the lower grid boundary or null if the smallest grid is selected\\n@function breakpoint-min($size) {\\n  @if not map.has-key(variables.$columns, $size) {\\n    @error \\"Invalid style specified! Choose one of #{map.keys(variables.$columns)}\\";\\n  }\\n  $min: map.get(variables.$breakpoints, $size);\\n\\n  @return if($min > 0, $min, null);\\n}\\n\\n// returns the upper grid boundary or null if the largest grid is selected\\n@function breakpoint-max($size) {\\n  @if not map.has-key(variables.$columns, $size) {\\n    @error \\"Invalid style specified! Choose one of #{map.keys(variables.$columns)}\\";\\n  }\\n  $names: map.keys(variables.$columns);\\n  $n: list.index($names, $size);\\n  $prev: if($n > 1, list.nth($names, $n - 1), null);\\n\\n  @return if($prev, (breakpoint-min($prev) - 1px), null);\\n}\\n\\n// Private mixins, meant for internal use.\\n@mixin media-query_($size) {\\n  @if not map.has-key(variables.$columns, $size) {\\n    @error \\"Invalid style specified! Choose one of #{map.keys(variables.$columns)}\\";\\n  }\\n\\n  $min: breakpoint-min($size);\\n  $max: breakpoint-max($size);\\n\\n  @if $min == null and $max != null {\\n    // Phone\\n    @media (max-width: $max) {\\n      @content;\\n    }\\n  } @else if $min != null and $max != null {\\n    // Tablet\\n    @media (min-width: $min) and (max-width: $max) {\\n      @content;\\n    }\\n  } @else if $min != null and $max == null {\\n    // Desktop\\n    @media (min-width: $min) {\\n      @content;\\n    }\\n  } @else {\\n    // Fallback - no breakpoints defined\\n    @content;\\n  }\\n}\\n\\n@mixin cell-span_($size, $span, $gutter) {\\n  @if not map.has-key(variables.$columns, $size) {\\n    @error \\"Invalid style specified! Choose one of #{map.keys(variables.$columns)}\\";\\n  }\\n\\n  $percent: math.percentage($span / map.get(variables.$columns, $size));\\n\\n  @if $percent > 100% {\\n    $percent: 100%;\\n  }\\n\\n  width: calc(#{$percent} - #{$gutter});\\n  // stylelint-disable-next-line declaration-block-no-duplicate-properties\\n  width: calc(#{$percent} - var(--mdc-layout-grid-gutter-#{$size}, #{$gutter}));\\n\\n  @supports (display: grid) {\\n    width: auto;\\n    grid-column-end: span math.min($span, map.get(variables.$columns, $size));\\n  }\\n}\\n\\n// Public mixins, meant for developer usage.\\n@mixin layout-grid($size, $margin, $max-width: null) {\\n  @if not map.has-key(variables.$columns, $size) {\\n    @error \\"Invalid style specified! Choose one of #{map.keys(variables.$columns)}\\";\\n  }\\n\\n  box-sizing: border-box;\\n  margin: 0 auto;\\n  padding: $margin;\\n  // stylelint-disable-next-line declaration-block-no-duplicate-properties\\n  padding: var(--mdc-layout-grid-margin-#{$size}, #{$margin});\\n\\n  @if $max-width {\\n    max-width: $max-width;\\n  }\\n}\\n\\n@mixin inner($size, $margin, $gutter) {\\n  @if not map.has-key(variables.$columns, $size) {\\n    @error \\"Invalid style specified! Choose one of #{map.keys(variables.$columns)}\\";\\n  }\\n\\n  display: flex;\\n  flex-flow: row wrap;\\n  align-items: stretch;\\n  margin: -$gutter / 2;\\n  // stylelint-disable-next-line declaration-block-no-duplicate-properties\\n  margin: calc(var(--mdc-layout-grid-gutter-#{$size}, #{$gutter}) / 2 * -1);\\n\\n  @supports (display: grid) {\\n    display: grid;\\n    margin: 0;\\n    grid-gap: $gutter;\\n    // stylelint-disable-next-line declaration-block-no-duplicate-properties\\n    grid-gap: var(--mdc-layout-grid-gutter-#{$size}, $gutter);\\n    grid-template-columns: repeat(map.get(variables.$columns, $size), minmax(0, 1fr));\\n  }\\n}\\n\\n@mixin cell($size, $default-span, $gutter) {\\n  @if not map.has-key(variables.$columns, $size) {\\n    @error \\"Invalid style specified! Choose one of #{map.keys(variables.$columns)}\\";\\n  }\\n\\n  @include cell-span_($size, $default-span, $gutter);\\n\\n  box-sizing: border-box;\\n  margin: $gutter / 2;\\n  // stylelint-disable-next-line declaration-block-no-duplicate-properties\\n  margin: calc(var(--mdc-layout-grid-gutter-#{$size}, #{$gutter}) / 2);\\n\\n  @supports (display: grid) {\\n    margin: 0;\\n  }\\n}\\n\\n@mixin cell-order($order) {\\n  order: $order;\\n}\\n\\n@mixin cell-align($position) {\\n  @if $position == \\"top\\" {\\n    align-self: flex-start;\\n\\n    @supports (display: grid) {\\n      align-self: start;\\n    }\\n  }\\n\\n  @if $position == \\"middle\\" {\\n    align-self: center;\\n  }\\n\\n  @if $position == \\"bottom\\" {\\n    align-self: flex-end;\\n\\n    @supports (display: grid) {\\n      align-self: end;\\n    }\\n  }\\n\\n  @if $position == \\"stretch\\" {\\n    align-self: stretch;\\n  }\\n}\\n\\n@mixin fixed-column-width($size, $margin, $gutter, $column-width) {\\n  @if not map.has-key(variables.$columns, $size) {\\n    @error \\"Invalid style specified! Choose one of #{map.keys(variables.$columns)}\\";\\n  }\\n\\n  $columnCount: map.get(variables.$columns, $size);\\n  $gutter-number: $columnCount - 1;\\n  $margin-number: 2;\\n\\n  width: $column-width * $columnCount + $gutter * $gutter-number + $margin * $margin-number;\\n  // stylelint-disable-next-line declaration-block-no-duplicate-properties\\n  width:\\n    calc(\\n      var(--mdc-layout-grid-column-width-#{$size}, #{$column-width}) * #{$columnCount} +\\n      var(--mdc-layout-grid-gutter-#{$size}, #{$gutter}) * #{$gutter-number} +\\n      var(--mdc-layout-grid-margin-#{$size}, #{$margin}) * #{$margin-number}\\n    );\\n}\\n","//\\n// Copyright 2017 Google Inc.\\n//\\n// Permission is hereby granted, free of charge, to any person obtaining a copy\\n// of this software and associated documentation files (the \\"Software\\"), to deal\\n// in the Software without restriction, including without limitation the rights\\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n// copies of the Software, and to permit persons to whom the Software is\\n// furnished to do so, subject to the following conditions:\\n//\\n// The above copyright notice and this permission notice shall be included in\\n// all copies or substantial portions of the Software.\\n//\\n// THE SOFTWARE IS PROVIDED \\"AS IS\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\\n// THE SOFTWARE.\\n//\\n\\n@use \\"sass:math\\";\\n@use \\"@material/elevation/mixins\\" as elevation-mixins;\\n@use \\"@material/feature-targeting/functions\\";\\n@use \\"@material/feature-targeting/mixins\\" as feature-targeting-mixins;\\n@use \\"@material/ripple/mixins\\" as ripple-mixins;\\n@use \\"@material/rtl/mixins\\" as rtl-mixins;\\n@use \\"@material/shape/mixins\\" as shape-mixins;\\n@use \\"@material/theme/mixins\\" as theme-mixins;\\n@use \\"./variables\\";\\n@use \\"@material/theme/variables\\" as theme-variables;\\n\\n//\\n// Public\\n//\\n\\n@mixin core-styles($query: functions.all()) {\\n  @include without-ripple($query);\\n  @include ripple($query);\\n}\\n\\n// This API is intended for use by frameworks that may want to separate the ripple-related styles from the other\\n// card styles. It is recommended that most users use `mdc-card-core-styles` instead.\\n@mixin without-ripple($query: functions.all()) {\\n  // postcss-bem-linter: define card\\n\\n  $feat-color: functions.create-target($query, color);\\n  $feat-structure: functions.create-target($query, structure);\\n\\n  @include elevation-mixins.overlay-common($query); // COPYBARA_COMMENT_THIS_LINE\\n\\n  .mdc-card {\\n    @include shape-radius(medium, $query: $query);\\n    @include fill-color(surface, $query);\\n    @include elevation-mixins.overlay-surface-position($query: $query);\\n    @include elevation-mixins.overlay-dimensions(100%, $query: $query);\\n    @include elevation-mixins.elevation(1, $query: $query);\\n\\n    @include feature-targeting-mixins.targets($feat-structure) {\\n      @include container-layout_;\\n    }\\n  }\\n\\n  .mdc-card--outlined {\\n    @include elevation-mixins.elevation(0, $query: $query);\\n    @include outline(variables.$outline-color, $query: $query);\\n  }\\n\\n  //\\n  // Media\\n  //\\n\\n  .mdc-card__media {\\n    @include feature-targeting-mixins.targets($feat-structure) {\\n      position: relative; // Child element `__media-content` has `position: absolute`\\n      box-sizing: border-box;\\n      background-repeat: no-repeat;\\n      background-position: center;\\n      background-size: cover;\\n    }\\n\\n    &::before {\\n      @include feature-targeting-mixins.targets($feat-structure) {\\n        display: block;\\n        content: \\"\\";\\n      }\\n    }\\n  }\\n\\n  .mdc-card__media:first-child {\\n    @include feature-targeting-mixins.targets($feat-structure) {\\n      border-top-left-radius: inherit;\\n      border-top-right-radius: inherit;\\n    }\\n  }\\n\\n  .mdc-card__media:last-child {\\n    @include feature-targeting-mixins.targets($feat-structure) {\\n      border-bottom-left-radius: inherit;\\n      border-bottom-right-radius: inherit;\\n    }\\n  }\\n\\n  .mdc-card__media--square {\\n    @include media-aspect-ratio(1, 1, $query);\\n  }\\n\\n  .mdc-card__media--16-9 {\\n    @include media-aspect-ratio(16, 9, $query);\\n  }\\n\\n  .mdc-card__media-content {\\n    @include feature-targeting-mixins.targets($feat-structure) {\\n      position: absolute;\\n      top: 0;\\n      right: 0;\\n      bottom: 0;\\n      left: 0;\\n      box-sizing: border-box;\\n    }\\n  }\\n\\n  //\\n  // Primary action\\n  //\\n\\n  .mdc-card__primary-action {\\n    @include feature-targeting-mixins.targets($feat-structure) {\\n      @include container-layout_;\\n\\n      position: relative; // Needed to prevent the ripple wash from overflowing the container in IE and Edge\\n      outline: none;\\n      color: inherit;\\n      text-decoration: none;\\n      cursor: pointer;\\n      overflow: hidden;\\n    }\\n  }\\n\\n  .mdc-card__primary-action:first-child {\\n    @include feature-targeting-mixins.targets($feat-structure) {\\n      border-top-left-radius: inherit;\\n      border-top-right-radius: inherit;\\n    }\\n  }\\n\\n  .mdc-card__primary-action:last-child {\\n    @include feature-targeting-mixins.targets($feat-structure) {\\n      border-bottom-left-radius: inherit;\\n      border-bottom-right-radius: inherit;\\n    }\\n  }\\n\\n  //\\n  // Action row\\n  //\\n\\n  .mdc-card__actions {\\n    @include feature-targeting-mixins.targets($feat-structure) {\\n      @include actions-layout_;\\n\\n      min-height: 52px;\\n      padding: 8px;\\n    }\\n  }\\n\\n  .mdc-card__actions--full-bleed {\\n    @include feature-targeting-mixins.targets($feat-structure) {\\n      padding: 0;\\n    }\\n  }\\n\\n  .mdc-card__action-buttons,\\n  .mdc-card__action-icons {\\n    @include feature-targeting-mixins.targets($feat-structure) {\\n      @include actions-layout_;\\n    }\\n  }\\n\\n  .mdc-card__action-icons {\\n    @include feature-targeting-mixins.targets($feat-color) {\\n      @include theme-mixins.prop(color, variables.$action-icon-color);\\n    }\\n\\n    @include feature-targeting-mixins.targets($feat-structure) {\\n      flex-grow: 1;\\n      justify-content: flex-end;\\n    }\\n  }\\n\\n  .mdc-card__action-buttons + .mdc-card__action-icons {\\n    @include feature-targeting-mixins.targets($feat-structure) {\\n      @include rtl-mixins.reflexive-box(margin, left, 16px);\\n    }\\n  }\\n\\n  //\\n  // Action items\\n  //\\n\\n  .mdc-card__action {\\n    @include feature-targeting-mixins.targets($feat-structure) {\\n      @include actions-layout_(inline-flex);\\n\\n      justify-content: center;\\n      cursor: pointer;\\n      user-select: none;\\n    }\\n\\n    &:focus {\\n      @include feature-targeting-mixins.targets($feat-structure) {\\n        outline: none;\\n      }\\n    }\\n  }\\n\\n  //\\n  // Action buttons\\n  //\\n\\n  .mdc-card__action--button {\\n    @include feature-targeting-mixins.targets($feat-structure) {\\n      @include rtl-mixins.reflexive-box(margin, right, 8px);\\n\\n      padding: 0 8px;\\n    }\\n\\n    &:last-child {\\n      @include feature-targeting-mixins.targets($feat-structure) {\\n        @include rtl-mixins.reflexive-box(margin, right, 0);\\n      }\\n    }\\n  }\\n\\n  .mdc-card__actions--full-bleed .mdc-card__action--button {\\n    @include feature-targeting-mixins.targets($feat-structure) {\\n      justify-content: space-between;\\n      width: 100%;\\n      height: auto;\\n      max-height: none;\\n      margin: 0;\\n      padding: 8px 16px;\\n      /* @noflip */\\n      text-align: left;\\n    }\\n\\n    @include rtl-mixins.rtl {\\n      @include feature-targeting-mixins.targets($feat-structure) {\\n        /* @noflip */\\n        text-align: right;\\n      }\\n    }\\n  }\\n\\n  //\\n  // Action icons\\n  //\\n\\n  .mdc-card__action--icon {\\n    @include feature-targeting-mixins.targets($feat-structure) {\\n      // Icon buttons are taller than buttons, so we need to adjust their margins to prevent the action row from\\n      // expanding.\\n      margin: -6px 0;\\n\\n      // Same padding as mdc-icon-button.\\n      padding: 12px;\\n    }\\n  }\\n\\n  .mdc-card__action--icon:not(:disabled) {\\n    @include feature-targeting-mixins.targets($feat-color) {\\n      @include theme-mixins.prop(color, variables.$action-icon-color);\\n    }\\n  }\\n\\n  // postcss-bem-linter: end\\n}\\n\\n// This API is intended for use by frameworks that may want to separate the ripple-related styles from the other\\n// card styles. It is recommended that most users use `mdc-card-core-styles` instead.\\n@mixin ripple($query: functions.all()) {\\n  @include ripple-mixins.common($query); // COPYBARA_COMMENT_THIS_LINE\\n\\n  .mdc-card__primary-action {\\n    @include ripple-mixins.surface($query);\\n    @include ripple-mixins.radius-bounded($query: $query);\\n    @include ripple-mixins.states($query: $query);\\n  }\\n}\\n\\n@mixin fill-color($color, $query: functions.all()) {\\n  $feat-color: functions.create-target($query, color);\\n\\n  @include feature-targeting-mixins.targets($feat-color) {\\n    @include theme-mixins.prop(background-color, $color);\\n  }\\n}\\n\\n@mixin outline($color, $thickness: variables.$outline-width, $query: functions.all()) {\\n  $feat-color: functions.create-target($query, color);\\n  $feat-structure: functions.create-target($query, structure);\\n\\n  @include feature-targeting-mixins.targets($feat-structure) {\\n    border-width: $thickness;\\n    border-style: solid;\\n  }\\n\\n  @include feature-targeting-mixins.targets($feat-color) {\\n    border-color: theme-variables.prop-value($color);\\n  }\\n}\\n\\n@mixin shape-radius($radius, $rtl-reflexive: false, $query: functions.all()) {\\n  @include shape-mixins.radius($radius, $rtl-reflexive, $query: $query);\\n}\\n\\n@mixin media-aspect-ratio($x, $y, $query: functions.all()) {\\n  $feat-structure: functions.create-target($query, structure);\\n\\n  &::before {\\n    @include feature-targeting-mixins.targets($feat-structure) {\\n      // This clever trick brought to you by: http://www.mademyday.de/css-height-equals-width-with-pure-css.html\\n      margin-top: math.percentage($y / $x);\\n    }\\n  }\\n}\\n\\n//\\n// Private\\n//\\n\\n@mixin container-layout_ {\\n  display: flex;\\n  flex-direction: column;\\n  box-sizing: border-box;\\n}\\n\\n@mixin actions-layout_($display: flex) {\\n  display: $display;\\n  flex-direction: row;\\n  align-items: center;\\n  box-sizing: border-box;\\n}\\n","//\\n// Copyright 2018 Google Inc.\\n//\\n// Permission is hereby granted, free of charge, to any person obtaining a copy\\n// of this software and associated documentation files (the \\"Software\\"), to deal\\n// in the Software without restriction, including without limitation the rights\\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n// copies of the Software, and to permit persons to whom the Software is\\n// furnished to do so, subject to the following conditions:\\n//\\n// The above copyright notice and this permission notice shall be included in\\n// all copies or substantial portions of the Software.\\n//\\n// THE SOFTWARE IS PROVIDED \\"AS IS\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\\n// THE SOFTWARE.\\n//\\n\\n@use \\"sass:color\\";\\n@use \\"@material/theme/mixins\\";\\n@use \\"@material/theme/variables\\";\\n\\n$action-icon-color: rgba(variables.prop-value(on-surface), variables.text-emphasis(medium)) !default;\\n$outline-color: color.mix(variables.prop-value(on-surface), variables.prop-value(surface), 12%) !default;\\n$outline-width: 1px !default;\\n","$mdc-theme-primary: #FFFFFF;\\n$mdc-theme-secondary: #3170F3;\\n$mdc-theme-background: #28293D;\\n@import \\"@material/top-app-bar/mdc-top-app-bar\\";\\n@import \\"@material/icon-button/mdc-icon-button\\";\\n@import \\"@material/list/mdc-list\\";\\n@import \\"@material/menu-surface/mdc-menu-surface\\";\\n@import \\"@material/menu/mdc-menu\\";\\n@import \\"@material/drawer/mdc-drawer\\";\\n@import \\"@material/layout-grid/mdc-layout-grid\\";\\n@import \\"~material-design-icons/iconfont/material-icons.css\\";\\n@import \\"@material/card/mdc-card\\";\\n@import \\"@material/layout-grid/mdc-layout-grid\\";\\n\\n.mdc-top-app-bar {\\n  background: mdc-theme-prop-value(secondary);\\n}\\n\\n.mdc-card {\\n  background: mdc-theme-prop-value(background);\\n}\\n\\nbody {\\n  margin: 0;\\n  background: mdc-theme-prop-value(background);\\n}\\n\\n.mdc-drawer {\\n  border-right-width: 0;\\n}\\n\\n.mdc-drawer-app-content {\\n  flex: auto;\\n  overflow: auto;\\n}\\n\\n.mdc-drawer__content {\\n  color: $mdc-theme-primary;\\n  background: mdc-theme-prop-value(secondary);\\n}\\n\\n.main-content {\\n  padding-top: 20px;\\n}\\n\\n.app-bar {\\n  position: absolute;\\n}\\n\\n// only apply this style if below top app bar\\n.mdc-top-app-bar {\\n  color: $mdc-theme-primary;\\n  z-index: 7;\\n}\\n\\n.mdc-top-app-bar .mdc-top-app-bar__action-item,\\n.mdc-top-app-bar .mdc-top-app-bar__navigation-icon {\\n  color: mdc-theme-prop-value(primary);\\n}\\n\\n.demo-card__title {\\n  color: #F3F4F6;\\n  /* dark gray for good contrast */\\n  padding: 1rem;\\n  margin: 0;\\n}\\n\\n@font-face {\\n  font-family: \'Material Icons\';\\n  src: url(\'~material-design-icons/iconfont/MaterialIcons-Regular.woff2\') format(\'woff2\');\\n}"],"sourceRoot":""}]);\n// Exports\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///805\n\n}')},825:module=>{eval('{\n\n/* istanbul ignore next  */\nfunction apply(styleElement, options, obj) {\n  var css = "";\n  if (obj.supports) {\n    css += "@supports (".concat(obj.supports, ") {");\n  }\n  if (obj.media) {\n    css += "@media ".concat(obj.media, " {");\n  }\n  var needLayer = typeof obj.layer !== "undefined";\n  if (needLayer) {\n    css += "@layer".concat(obj.layer.length > 0 ? " ".concat(obj.layer) : "", " {");\n  }\n  css += obj.css;\n  if (needLayer) {\n    css += "}";\n  }\n  if (obj.media) {\n    css += "}";\n  }\n  if (obj.supports) {\n    css += "}";\n  }\n  var sourceMap = obj.sourceMap;\n  if (sourceMap && typeof btoa !== "undefined") {\n    css += "\\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), " */");\n  }\n\n  // For old IE\n  /* istanbul ignore if  */\n  options.styleTagTransform(css, styleElement, options.options);\n}\nfunction removeStyleElement(styleElement) {\n  // istanbul ignore if\n  if (styleElement.parentNode === null) {\n    return false;\n  }\n  styleElement.parentNode.removeChild(styleElement);\n}\n\n/* istanbul ignore next  */\nfunction domAPI(options) {\n  if (typeof document === "undefined") {\n    return {\n      update: function update() {},\n      remove: function remove() {}\n    };\n  }\n  var styleElement = options.insertStyleElement(options);\n  return {\n    update: function update(obj) {\n      apply(styleElement, options, obj);\n    },\n    remove: function remove() {\n      removeStyleElement(styleElement);\n    }\n  };\n}\nmodule.exports = domAPI;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODI1LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0RBQWtEO0FBQ2xEO0FBQ0E7QUFDQSwwQ0FBMEM7QUFDMUM7QUFDQTtBQUNBO0FBQ0EsaUZBQWlGO0FBQ2pGO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EseURBQXlEO0FBQ3pEOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0M7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2Jwcm9wLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanM/ZTQ3OSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaikge1xuICB2YXIgY3NzID0gXCJcIjtcbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KG9iai5zdXBwb3J0cywgXCIpIHtcIik7XG4gIH1cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIkBtZWRpYSBcIi5jb25jYXQob2JqLm1lZGlhLCBcIiB7XCIpO1xuICB9XG4gIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2Ygb2JqLmxheWVyICE9PSBcInVuZGVmaW5lZFwiO1xuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwiQGxheWVyXCIuY29uY2F0KG9iai5sYXllci5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KG9iai5sYXllcikgOiBcIlwiLCBcIiB7XCIpO1xuICB9XG4gIGNzcyArPSBvYmouY3NzO1xuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuICB2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcbiAgaWYgKHNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIuY29uY2F0KGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSksIFwiICovXCIpO1xuICB9XG5cbiAgLy8gRm9yIG9sZCBJRVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG4gIG9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZUVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG59XG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KSB7XG4gIC8vIGlzdGFuYnVsIGlnbm9yZSBpZlxuICBpZiAoc3R5bGVFbGVtZW50LnBhcmVudE5vZGUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgc3R5bGVFbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50KTtcbn1cblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBkb21BUEkob3B0aW9ucykge1xuICBpZiAodHlwZW9mIGRvY3VtZW50ID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKCkge30sXG4gICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHt9XG4gICAgfTtcbiAgfVxuICB2YXIgc3R5bGVFbGVtZW50ID0gb3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucyk7XG4gIHJldHVybiB7XG4gICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUob2JqKSB7XG4gICAgICBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaik7XG4gICAgfSxcbiAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpO1xuICAgIH1cbiAgfTtcbn1cbm1vZHVsZS5leHBvcnRzID0gZG9tQVBJOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///825\n\n}')},943:(t,n,c)=>{t.exports=c.p+"fonts/MaterialIcons-Regular.woff"}},__webpack_module_cache__={};function __webpack_require__(t){var n=__webpack_module_cache__[t];if(void 0!==n)return n.exports;var c=__webpack_module_cache__[t]={id:t,exports:{}};return __webpack_modules__[t](c,c.exports,__webpack_require__),c.exports}__webpack_require__.m=__webpack_modules__,__webpack_require__.n=t=>{var n=t&&t.__esModule?()=>t.default:()=>t;return __webpack_require__.d(n,{a:n}),n},__webpack_require__.d=(t,n)=>{for(var c in n)__webpack_require__.o(n,c)&&!__webpack_require__.o(t,c)&&Object.defineProperty(t,c,{enumerable:!0,get:n[c]})},__webpack_require__.o=(t,n)=>Object.prototype.hasOwnProperty.call(t,n),__webpack_require__.p="/",__webpack_require__.b=document.baseURI||self.location.href,__webpack_require__.nc=void 0,__webpack_require__(272);var __webpack_exports__=__webpack_require__(57)})();